###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                28/Aug/2016  23:08:49
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zha_project.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\zha_project.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
      1          /**************************************************************************************************
      2            Filename:       zha_project.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "nwk_util.h"
     75          
     76          #include "ZDObject.h"
     77          #include "ZDProfile.h"
     78          #include "zcl.h"
     79          #include "zcl_general.h"
     80          #include "zcl_ha.h"
     81          #include "zcl_ss.h"
     82          #include "zcl_ms.h"
     83          #include "zcl_ezmode.h"
     84          #include "zcl_diagnostic.h"
     85          #include "zcl_lighting.h"
     86          #include "zha_project.h"
     87          #include "SerialApp.h"
     88          #include "at_command.h"   
     89          #include "onboard.h"
     90          
     91          /* HAL */
     92          #include "hal_lcd.h"
     93          #include "hal_led.h"
     94          #include "hal_key.h"
     95          
     96          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     97                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     98          #include "zgp_translationtable.h"
     99            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
    100              #define ZGP_AUTO_TT
    101            #endif
    102          #endif
    103          
    104          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    105          #include "math.h"
    106          #include "hal_timer.h"
    107          #endif
    108          
    109          #include "NLMEDE.h"
    110          
    111          /*********************************************************************
    112           * MACROS
    113           */
    114          
    115          /*********************************************************************
    116           * CONSTANTS
    117           */
    118          #if (defined HAL_BOARD_ZLIGHT)
    119          #define LEVEL_MAX                 0xFE
    120          #define LEVEL_MIN                 0x0
    121          #define GAMMA_VALUE               2
    122          #define PWM_FULL_DUTY_CYCLE       1000
    123          #elif (defined HAL_PWM)
    124          #define LEVEL_MAX                 0xFE
    125          #define LEVEL_MIN                 0x0
    126          #define GAMMA_VALUE               2
    127          #define PWM_FULL_DUTY_CYCLE       100
    128          #endif
    129          
    130          /*********************************************************************
    131           * TYPEDEFS
    132           */
    133          
    134          /*********************************************************************
    135           * GLOBAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          byte zha_project_TaskID;
   \                     zha_project_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 zha_projectSeqNum;
   \                     zha_projectSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          ZDO_ActiveEndpointRsp_t   *zclZHAtest_ActiveEP;
   \                     zclZHAtest_ActiveEP:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          endPointDesc_t zclZHAtest_epDesc;
   \                     zclZHAtest_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t zclZHAtest_DstAddr;
   \                     zclZHAtest_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          static zAddrType_t simpleDescReqAddr;
   \                     simpleDescReqAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 ep[5];
   \                     ep:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 netState = 0;
   \                     netState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          zAddrType_t dstAddr;
   \                     dstAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    146          
    147          /*********************************************************************
    148           * GLOBAL FUNCTIONS
    149           */
    150          
    151          /*********************************************************************
    152           * LOCAL VARIABLES
    153           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          afAddrType_t zha_project_DstAddr;
   \                     zha_project_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    155          
    156          #ifdef ZCL_EZMODE
    157          static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    158          static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    159          
    160          
    161          // register EZ-Mode with task information (timeout events, callback, etc...)
    162          //static const zclEZMode_RegisterData_t zha_project_RegisterEZModeData =
    163          //{
    164          //  &zha_project_TaskID,
    165          //  SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    166          //  SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    167          //  &zha_projectSeqNum,
    168          //  zha_project_EZModeCB
    169          //};
    170          
    171          #else
    172          uint16 bindingInClusters[] =
    173          {
    174            ZCL_CLUSTER_ID_GEN_ON_OFF
    175          #ifdef ZCL_LEVEL_CTRL
    176            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    177          #endif
    178          };
    179          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    180          
    181          #endif  // ZCL_EZMODE
    182          
    183          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    184          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    185          {
    186            SAMPLELIGHT_ENDPOINT,
    187            &zha_project_TaskID,
    188            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    189            (afNetworkLatencyReq_t)0            // No Network Latency req
    190          };
    191          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    196          devStates_t zha_project_NwkState = DEV_INIT;
   \                     zha_project_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zha_project_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    197          
    198          #if ZCL_LEVEL_CTRL
    199          uint8 zha_project_WithOnOff;       // set to TRUE if state machine should set light on/off
    200          uint8 zha_project_NewLevel;        // new level when done moving
    201          bool  zha_project_NewLevelUp;      // is direction to new level up or down?
    202          int32 zha_project_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
    203          int32 zha_project_Rate32;          // rate in units, fixed point (e.g. 16.123)
    204          uint8 zha_project_LevelLastLevel;  // to save the Current Level before the light was turned OFF
    205          #endif
    206          
    207          /*********************************************************************
    208           * LOCAL FUNCTIONS
    209           */
    210          
    211          
    212          
    213          static void zha_project_HandleKeys( byte shift, byte keys );
    214          static void zha_project_BasicResetCB( void );
    215          static void zha_project_IdentifyCB( zclIdentify_t *pCmd );
    216          static void zha_project_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    217          static void zha_project_OnOffCB( uint8 cmd );
    218          #ifdef ZCL_LEVEL_CTRL
    219          static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    220          static void zha_project_LevelControlMoveCB( zclLCMove_t *pCmd );
    221          static void zha_project_LevelControlStepCB( zclLCStep_t *pCmd );
    222          static void zha_project_LevelControlStopCB( void );
    223          static void zha_project_DefaultMove( void );
    224          static uint32 zha_project_TimeRateHelper( uint8 newLevel );
    225          static uint16 zha_project_GetTime ( uint8 level, uint16 time );
    226          static void zha_project_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    227          static void zha_project_MoveBasedOnTime( uint8 newLevel, uint16 time );
    228          static void zha_project_AdjustLightLevel( void );
    229          #endif
    230          
    231          // app display functions
    232          static void zha_project_DisplayLight( void );
    233          
    234          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    235          void zha_project_UpdateLampLevel( uint8 level );
    236          #endif
    237          
    238          // Functions to process ZCL Foundation incoming Command/Response messages
    239          static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    240          #ifdef ZCL_READ
    241          static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    242          #endif
    243          #ifdef ZCL_WRITE
    244          static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    245          #endif
    246          static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    247          #ifdef ZCL_DISCOVER
    248          static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    249          static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    250          static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    251          #endif
    252          
    253          /*********************************************************************
    254           * STATUS STRINGS
    255           */
    256          
    257          
    258          /*********************************************************************
    259           * ZCL General Profile Callback table
    260           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    261          static zclGeneral_AppCallbacks_t zha_project_CmdCallbacks =
   \                     zha_project_CmdCallbacks:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for zha_project_CmdCallbacks>`
   \   000020                REQUIRE __INIT_XDATA_I
    262          {
    263            zha_project_BasicResetCB,            // Basic Cluster Reset command
    264            zha_project_IdentifyCB,              // Identify command
    265          #ifdef ZCL_EZMODE
    266            NULL,                                   // Identify EZ-Mode Invoke command
    267            NULL,                                   // Identify Update Commission State command
    268          #endif
    269            NULL,                                   // Identify Trigger Effect command
    270            zha_project_IdentifyQueryRspCB,      // Identify Query Response command
    271            zha_project_OnOffCB,                 // On/Off cluster commands
    272            NULL,                                   // On/Off cluster enhanced command Off with Effect
    273            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    274            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    275          #ifdef ZCL_LEVEL_CTRL
    276            zha_project_LevelControlMoveToLevelCB, // Level Control Move to Level command
    277            zha_project_LevelControlMoveCB,        // Level Control Move command
    278            zha_project_LevelControlStepCB,        // Level Control Step command
    279            zha_project_LevelControlStopCB,        // Level Control Stop command
    280          #endif
    281          #ifdef ZCL_GROUPS
    282            NULL,                                   // Group Response commands
    283          #endif
    284          #ifdef ZCL_SCENES
    285            NULL,                                  // Scene Store Request command
    286            NULL,                                  // Scene Recall Request command
    287            NULL,                                  // Scene Response command
    288          #endif
    289          #ifdef ZCL_ALARMS
    290            NULL,                                  // Alarm (Response) commands
    291          #endif
    292          #ifdef SE_UK_EXT
    293            NULL,                                  // Get Event Log command
    294            NULL,                                  // Publish Event Log command
    295          #endif
    296            NULL,                                  // RSSI Location command
    297            NULL                                   // RSSI Location Response command
    298          };
    299          
    300          /*********************************************************************
    301           * @fn          zha_project_Init
    302           *
    303           * @brief       Initialization function for the zclGeneral layer.
    304           *
    305           * @param       none
    306           *
    307           * @return      none
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void zha_project_Init( byte task_id )
   \                     zha_project_Init:
    310          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    311            zha_project_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zha_project_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    312          
    313            // Set destination address to indirect
    314            zha_project_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zha_project_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    315            zha_project_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    316            zha_project_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zha_project_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    317          
    318            // This app is part of the Home Automation Profile
    319            zclHA_Init( &zha_project_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zha_project_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zha_project_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    320            SerialApp_Init();
   \   00001F                ; Setup parameters for call to function SerialApp_Init
   \   00001F   12....       LCALL   `??SerialApp_Init::?relay`; Banked call to: SerialApp_Init
    321            AT_Init();
   \   000022                ; Setup parameters for call to function AT_Init
   \   000022   12....       LCALL   `??AT_Init::?relay`  ; Banked call to: AT_Init
    322            // Register the ZCL General Cluster Library callback functions
    323            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zha_project_CmdCallbacks );
   \   000025                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000025   7A..         MOV     R2,#zha_project_CmdCallbacks & 0xff
   \   000027   7B..         MOV     R3,#(zha_project_CmdCallbacks >> 8) & 0xff
   \   000029   7901         MOV     R1,#0x1
   \   00002B   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    324          
    325            // Register the application's attribute list
    326            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zha_project_NumAttributes, zha_project_Attrs );
   \   00002E                ; Setup parameters for call to function zcl_registerAttrList
   \   00002E   7C..         MOV     R4,#zha_project_Attrs & 0xff
   \   000030   7D..         MOV     R5,#(zha_project_Attrs >> 8) & 0xff
   \   000032   90....       MOV     DPTR,#zha_project_NumAttributes
   \   000035   E4           CLR     A
   \   000036   93           MOVC    A,@A+DPTR
   \   000037   FA           MOV     R2,A
   \   000038   7901         MOV     R1,#0x1
   \   00003A   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    327          
    328            // Register the Application to receive the unprocessed Foundation command/response messages
    329            zcl_registerForMsg( zha_project_TaskID );
   \   00003D                ; Setup parameters for call to function zcl_registerForMsg
   \   00003D   90....       MOV     DPTR,#zha_project_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    330          
    331          #ifdef ZCL_DISCOVER
    332            // Register the application's command list
    333            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zha_project_Cmds );
    334          #endif
    335          
    336            // Register for all key events - This app will handle all key events
    337            RegisterForKeys( zha_project_TaskID );
   \   000045                ; Setup parameters for call to function RegisterForKeys
   \   000045   90....       MOV     DPTR,#zha_project_TaskID
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    338          
    339            // Register for a test endpoint
    340            afRegister( &sampleLight_TestEp );
   \   00004D                ; Setup parameters for call to function afRegister
   \   00004D   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   00004F   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   000051   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    341          
    342          #ifdef ZCL_EZMODE
    343            // Register EZ-Mode
    344            //zcl_RegisterEZMode( &zha_project_RegisterEZModeData );
    345          
    346            // Register with the ZDO to receive Match Descriptor Responses
    347              ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
   \   000054                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000054   7A06         MOV     R2,#0x6
   \   000056   7B80         MOV     R3,#-0x80
   \   000058   EE           MOV     A,R6
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    348              ZDO_RegisterForZDOMsg( task_id, End_Device_Bind_rsp );
   \   00005D                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00005D   7A20         MOV     R2,#0x20
   \   00005F   7B80         MOV     R3,#-0x80
   \   000061   EE           MOV     A,R6
   \   000062   F9           MOV     R1,A
   \   000063   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    349              ZDO_RegisterForZDOMsg( task_id, Match_Desc_rsp );
   \   000066                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000066   7A06         MOV     R2,#0x6
   \   000068   7B80         MOV     R3,#-0x80
   \   00006A   EE           MOV     A,R6
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    350              ZDO_RegisterForZDOMsg( task_id, Active_EP_rsp );
   \   00006F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00006F   7A05         MOV     R2,#0x5
   \   000071   7B80         MOV     R3,#-0x80
   \   000073   EE           MOV     A,R6
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    351              ZDO_RegisterForZDOMsg( task_id, Simple_Desc_rsp );
   \   000078                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000078   7A04         MOV     R2,#0x4
   \   00007A   7B80         MOV     R3,#-0x80
   \   00007C   EE           MOV     A,R6
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    352              ZDO_RegisterForZDOMsg( task_id, Device_annce );
   \   000081                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000081   7A13         MOV     R2,#0x13
   \   000083   7B00         MOV     R3,#0x0
   \   000085   EE           MOV     A,R6
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    353          #endif
    354          
    355          
    356          #ifdef ZCL_DIAGNOSTIC
    357            // Register the application's callback function to read/write attribute data.
    358            // This is only required when the attribute data format is unknown to ZCL.
    359            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   00008A                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   00008A   7C00         MOV     R4,#0x0
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   7A..         MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
   \   000090   7B..         MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   000092   7901         MOV     R1,#0x1
   \   000094   12....       LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    360          
    361            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   000097                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   000097   12....       LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
    362            {
    363              // Here the user could start the timer to save Diagnostics to NV
    364            }
    365          #endif
    366          
    367          #ifdef LCD_SUPPORTED
    368            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    369          #endif  // LCD_SUPPORTED
    370          
    371          #ifdef ZGP_AUTO_TT
    372            zgpTranslationTable_RegisterEP ( &zha_project_SimpleDesc );
    373          #endif
    374          }
   \   00009A   7F01         MOV     R7,#0x1
   \   00009C   02....       LJMP    ?BANKED_LEAVE_XDATA
    375          
    376          /*********************************************************************
    377           * @fn          zclSample_event_loop
    378           *
    379           * @brief       Event Loop Processor for zclGeneral.
    380           *
    381           * @param       none
    382           *
    383           * @return      none
    384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          uint16 zha_project_event_loop( uint8 task_id, uint16 events )
   \                     zha_project_event_loop:
    386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 53
   \   000005   74CB         MOV     A,#-0x35
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    387            afIncomingMSGPacket_t *MSGpkt;
    388          
    389            (void)task_id;  // Intentionally unreferenced parameter
    390          
    391              if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   6003         JZ      $+5
   \   000012   02....       LJMP    ??zha_project_event_loop_0 & 0xFFFF
    392              {
    393                  while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zha_project_TaskID )) )
    394                  {
    395                      switch ( MSGpkt->hdr.event )
    396                      {
    397                          #ifdef ZCL_EZMODE
    398                          case ZDO_CB_MSG:
    399                              zha_project_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    400                              break;
    401                          #endif
    402                          case ZCL_INCOMING_MSG:
    403                          // Incoming ZCL Foundation command/response messages
    404                              zha_project_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    405                              break;
    406          
    407                          case KEY_CHANGE:
    408                              zha_project_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    409                              break;
    410                          case AF_INCOMING_MSG_CMD:
    411                              zcl_ProcessMessageMSG(MSGpkt);
    412          
    413                              //ZHAtest_MessageMSGCB( MSGpkt );
    414                              break;    
    415                          
    416          
    417                          case ZDO_STATE_CHANGE:
    418                              zha_project_NwkState = (devStates_t)(MSGpkt->hdr.status);
    419                   
    420                              if(zha_project_NwkState == DEV_ZB_COORD)
    421                              {
    422                                  netState = 1;
    423                                  NLME_PermitJoiningRequest(0);
    424                              }
    425                          break;
    426          
    427                          default:
    428                              break;
    429                      }
    430          
    431                    // Release the memory
    432                    osal_msg_deallocate( (uint8 *)MSGpkt );
    433                  }
    434                  return (events ^ SYS_EVENT_MSG);
    435              }
    436              if ( events & ZHA_ATTRIBUTE_REQ_EVT )
   \   000015   EE           MOV     A,R6
   \   000016   5404         ANL     A,#0x4
   \   000018   6075         JZ      ??zha_project_event_loop_1
    437              {
    438                  uint8 i=0;
                               ^
Warning[Pe177]: variable "i" was declared but never referenced
    439                  afAddrType_t  dscReqAddr;
    440                  dscReqAddr.addrMode=afAddr16Bit;
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine3 & 0xFFFF
    441                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    442                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_0:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
    443                  zclReadCmd_t BasicAttrsList;
    444                  BasicAttrsList.numAttr = 5;
   \   000028   740C         MOV     A,#0xc
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7405         MOV     A,#0x5
   \   00002F   F0           MOVX    @DPTR,A
    445                  BasicAttrsList.attrID[0] = ATTRID_BASIC_ZCL_VERSION;
   \   000030   740D         MOV     A,#0xd
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
    446                  BasicAttrsList.attrID[1] = ATTRID_BASIC_HW_VERSION;
   \   000039   740F         MOV     A,#0xf
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?Subroutine16 & 0xFFFF
    447                  BasicAttrsList.attrID[2] = ATTRID_BASIC_MODEL_ID;
   \                     ??CrossCallReturnLabel_43:
   \   000043   7411         MOV     A,#0x11
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7405         MOV     A,#0x5
   \   00004A   12....       LCALL   ?Subroutine16 & 0xFFFF
    448                  BasicAttrsList.attrID[3] = ATTRID_BASIC_MANUFACTURER_NAME;
   \                     ??CrossCallReturnLabel_44:
   \   00004D   7413         MOV     A,#0x13
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?Subroutine16 & 0xFFFF
    449                  //BasicAttrsList.attrID[5] = ATTRID_BASIC_DATE_CODE;
    450                  BasicAttrsList.attrID[4] = ATTRID_BASIC_POWER_SOURCE;
   \                     ??CrossCallReturnLabel_45:
   \   000057   7415         MOV     A,#0x15
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7407         MOV     A,#0x7
   \   00005E   12....       LCALL   ?Subroutine4 & 0xFFFF
    451                  zcl_SendRead( 1, &dscReqAddr,ZCL_CLUSTER_ID_GEN_BASIC, &BasicAttrsList,
    452                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
    453                  
    454                  //return ( events ^ ZHA_ATTRIBUTE_REQ_EVT );
    455              }  
   \                     ??CrossCallReturnLabel_3:
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   740F         MOV     A,#0xf
   \   000070   12....       LCALL   ?XSTACK_DISP100_8
   \   000073   88..         MOV     ?V0,R0
   \   000075   89..         MOV     ?V1,R1
   \   000077   78..         MOV     R0,#?V0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   7C00         MOV     R4,#0x0
   \   00007E   7D00         MOV     R5,#0x0
   \   000080   7405         MOV     A,#0x5
   \   000082   12....       LCALL   ?XSTACK_DISP101_8
   \   000085   7901         MOV     R1,#0x1
   \   000087   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   00008A   7405         MOV     A,#0x5
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
    456            
    457              if(events & ZHA_ATTRIBUTE_POWER_EVT)
   \                     ??zha_project_event_loop_1:
   \   00008F   EE           MOV     A,R6
   \   000090   5480         ANL     A,#0x80
   \   000092   6058         JZ      ??zha_project_event_loop_2
    458              {
    459                  afAddrType_t  dscReqAddr;
    460                  dscReqAddr.addrMode=afAddr16Bit;
   \   000094   7408         MOV     A,#0x8
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   12....       LCALL   ?Subroutine3 & 0xFFFF
    461                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    462                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_1:
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   7401         MOV     A,#0x1
   \   0000A1   F0           MOVX    @DPTR,A
    463                  zclReadCmd_t BasicAttrsList;
    464                  BasicAttrsList.numAttr = 2;
   \   0000A2   740C         MOV     A,#0xc
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   F0           MOVX    @DPTR,A
    465                  BasicAttrsList.attrID[0] = ATTRID_POWER_CFG_BATTERY_VOLTAGE;
   \   0000AA   740D         MOV     A,#0xd
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   7420         MOV     A,#0x20
   \   0000B1   12....       LCALL   ?Subroutine16 & 0xFFFF
    466                  BasicAttrsList.attrID[1] = 0x0021;
   \                     ??CrossCallReturnLabel_46:
   \   0000B4   740F         MOV     A,#0xf
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   7421         MOV     A,#0x21
   \   0000BB   12....       LCALL   ?Subroutine4 & 0xFFFF
    467                  zcl_SendRead( 1, &dscReqAddr,
    468                              ZCL_CLUSTER_ID_GEN_POWER_CFG, &BasicAttrsList,
    469                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
    470                  //return ( events ^ ZHA_ATTRIBUTE_POWER_EVT );    
    471              }
   \                     ??CrossCallReturnLabel_4:
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   78..         MOV     R0,#?V0
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C6   78..         MOV     R0,#?V0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   740F         MOV     A,#0xf
   \   0000CD   12....       LCALL   ?XSTACK_DISP100_8
   \   0000D0   88..         MOV     ?V0,R0
   \   0000D2   89..         MOV     ?V1,R1
   \   0000D4   78..         MOV     R0,#?V0
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D9   7C01         MOV     R4,#0x1
   \   0000DB   7D00         MOV     R5,#0x0
   \   0000DD   7405         MOV     A,#0x5
   \   0000DF   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E2   7901         MOV     R1,#0x1
   \   0000E4   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   0000E7   7405         MOV     A,#0x5
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
    472              if ( events & ZONE_TYPE_EVT )
   \                     ??zha_project_event_loop_2:
   \   0000EC   EE           MOV     A,R6
   \   0000ED   5420         ANL     A,#0x20
   \   0000EF   7003         JNZ     $+5
   \   0000F1   02....       LJMP    ??zha_project_event_loop_3 & 0xFFFF
    473              {
    474                  afAddrType_t  dscReqAddr;
    475                  dscReqAddr.addrMode=afAddr16Bit;
   \   0000F4   7408         MOV     A,#0x8
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL   ?Subroutine3 & 0xFFFF
    476                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    477                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_2:
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   7401         MOV     A,#0x1
   \   000101   F0           MOVX    @DPTR,A
    478                  zclReadCmd_t BasicAttrsList;
    479                  BasicAttrsList.numAttr = 1;
   \   000102   740C         MOV     A,#0xc
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   7401         MOV     A,#0x1
   \   000109   F0           MOVX    @DPTR,A
    480                  BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
   \   00010A   740D         MOV     A,#0xd
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   7401         MOV     A,#0x1
   \   000111   12....       LCALL   ?Subroutine4 & 0xFFFF
    481                  zcl_SendRead( 1, &dscReqAddr,
    482                              ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
    483                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
   \                     ??CrossCallReturnLabel_5:
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000117   78..         MOV     R0,#?V0
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011C   78..         MOV     R0,#?V0
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000121   740F         MOV     A,#0xf
   \   000123   12....       LCALL   ?XSTACK_DISP100_8
   \   000126   88..         MOV     ?V0,R0
   \   000128   89..         MOV     ?V1,R1
   \   00012A   78..         MOV     R0,#?V0
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012F   7C00         MOV     R4,#0x0
   \   000131   7D05         MOV     R5,#0x5
   \   000133   ED           MOV     A,R5
   \   000134   12....       LCALL   ?XSTACK_DISP101_8
   \   000137   7901         MOV     R1,#0x1
   \   000139   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   00013C   7405         MOV     A,#0x5
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
    484                  return ( events ^ ZONE_TYPE_EVT );
   \   000141   EE           MOV     A,R6
   \   000142   6420         XRL     A,#0x20
   \   000144   FA           MOV     R2,A
   \   000145   EF           MOV     A,R7
   \   000146   02....       LJMP    ??zha_project_event_loop_4 & 0xFFFF
    485              } 
   \                     ??zha_project_event_loop_5:
   \   000149   A3           INC     DPTR
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   90....       MOV     DPTR,#zha_project_NwkState
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   6409         XRL     A,#0x9
   \   000151   700B         JNZ     ??zha_project_event_loop_6
   \   000153   90....       MOV     DPTR,#netState
   \   000156   7401         MOV     A,#0x1
   \   000158   F0           MOVX    @DPTR,A
   \   000159                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000159   7900         MOV     R1,#0x0
   \   00015B   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \                     ??zha_project_event_loop_6:
   \   00015E                ; Setup parameters for call to function osal_msg_deallocate
   \   00015E   AA..         MOV     R2,?V0
   \   000160   AB..         MOV     R3,?V1
   \   000162   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zha_project_event_loop_0:
   \   000165                ; Setup parameters for call to function osal_msg_receive
   \   000165   90....       MOV     DPTR,#zha_project_TaskID
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F9           MOV     R1,A
   \   00016A   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00016D   8A..         MOV     ?V0,R2
   \   00016F   8B..         MOV     ?V1,R3
   \   000171   EA           MOV     A,R2
   \   000172   45..         ORL     A,?V1
   \   000174   607D         JZ      ??zha_project_event_loop_7
   \   000176   8A82         MOV     DPL,R2
   \   000178   8B83         MOV     DPH,R3
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   24E6         ADD     A,#-0x1a
   \   00017D   606E         JZ      ??zha_project_event_loop_8
   \   00017F   24E6         ADD     A,#-0x1a
   \   000181   6011         JZ      ??zha_project_event_loop_9
   \   000183   2474         ADD     A,#0x74
   \   000185   6052         JZ      ??zha_project_event_loop_10
   \   000187   24EF         ADD     A,#-0x11
   \   000189   60BE         JZ      ??zha_project_event_loop_5
   \   00018B   24FE         ADD     A,#-0x2
   \   00018D   70CF         JNZ     ??zha_project_event_loop_6
   \   00018F                ; Setup parameters for call to function zha_project_ProcessZDOMsgs
   \   00018F   12....       LCALL   `??zha_project_ProcessZDOMsgs::?relay`; Banked call to: zha_project_ProcessZDOMsgs
   \   000192   80CA         SJMP    ??zha_project_event_loop_6
   \                     ??zha_project_event_loop_9:
   \   000194   EA           MOV     A,R2
   \   000195   2417         ADD     A,#0x17
   \   000197   F8           MOV     R0,A
   \   000198   E4           CLR     A
   \   000199   35..         ADDC    A,?V1
   \   00019B   F9           MOV     R1,A
   \   00019C   88..         MOV     ?V2,R0
   \   00019E   89..         MOV     ?V3,R1
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   14           DEC     A
   \   0001A9   601B         JZ      ??zha_project_event_loop_11
   \   0001AB   24FD         ADD     A,#-0x3
   \   0001AD   701A         JNZ     ??zha_project_event_loop_12
   \   0001AF   8882         MOV     DPL,R0
   \   0001B1   8983         MOV     DPH,R1
   \   0001B3   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0001B6   8882         MOV     DPL,R0
   \   0001B8   8983         MOV     DPH,R1
   \   0001BA   7800         MOV     R0,#0x0
   \                     ??zha_project_event_loop_13:
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   F9           MOV     R1,A
   \   0001BE   E8           MOV     A,R0
   \   0001BF   C3           CLR     C
   \   0001C0   99           SUBB    A,R1
   \   0001C1   5006         JNC     ??zha_project_event_loop_12
   \   0001C3   08           INC     R0
   \   0001C4   80F6         SJMP    ??zha_project_event_loop_13
   \                     ??zha_project_event_loop_11:
   \   0001C6                ; Setup parameters for call to function zha_project_ProcessInReadRspCmd
   \   0001C6   12....       LCALL   `??zha_project_ProcessInReadRspCmd::?relay`; Banked call to: zha_project_ProcessInReadRspCmd
   \                     ??zha_project_event_loop_12:
   \   0001C9   85..82       MOV     DPL,?V2
   \   0001CC   85..83       MOV     DPH,?V3
   \   0001CF   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0001D2   608A         JZ      ??zha_project_event_loop_6
   \   0001D4                ; Setup parameters for call to function osal_mem_free
   \   0001D4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001D7   8085         SJMP    ??zha_project_event_loop_6
   \                     ??zha_project_event_loop_10:
   \   0001D9                ; Setup parameters for call to function zha_project_HandleKeys
   \   0001D9   A3           INC     DPTR
   \   0001DA   A3           INC     DPTR
   \   0001DB   A3           INC     DPTR
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   FA           MOV     R2,A
   \   0001DE   85..82       MOV     DPL,?V0
   \   0001E1   8B83         MOV     DPH,R3
   \   0001E3   A3           INC     DPTR
   \   0001E4   A3           INC     DPTR
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   F9           MOV     R1,A
   \   0001E7   12....       LCALL   `??zha_project_HandleKeys::?relay`; Banked call to: zha_project_HandleKeys
   \   0001EA   02....       LJMP    ??zha_project_event_loop_6 & 0xFFFF
   \                     ??zha_project_event_loop_8:
   \   0001ED                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   0001ED   12....       LCALL   `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
   \   0001F0   02....       LJMP    ??zha_project_event_loop_6 & 0xFFFF
   \                     ??zha_project_event_loop_7:
   \   0001F3   EE           MOV     A,R6
   \   0001F4   FA           MOV     R2,A
   \   0001F5   EF           MOV     A,R7
   \   0001F6   6480         XRL     A,#0x80
   \   0001F8   02....       LJMP    ??zha_project_event_loop_4 & 0xFFFF
    486              if ( events & ZHA_ACTIVE_EP_EVT )
   \                     ??zha_project_event_loop_3:
   \   0001FB   EE           MOV     A,R6
   \   0001FC   5408         ANL     A,#0x8
   \   0001FE   6015         JZ      ??zha_project_event_loop_14
    487              {
    488                  ZDP_ActiveEPReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr, 0);
   \   000200                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000200   75..00       MOV     ?V0,#0x0
   \   000203   78..         MOV     R0,#?V0
   \   000205   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000208   7905         MOV     R1,#0x5
   \   00020A   12....       LCALL   ?Subroutine10 & 0xFFFF
    489                  //return ( events ^ ZHA_ACTIVE_EP_EVT );
    490              }  
   \                     ??CrossCallReturnLabel_30:
   \   00020D   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000210   7401         MOV     A,#0x1
   \   000212   12....       LCALL   ?DEALLOC_XSTACK8
    491            
    492            // event to get simple descriptor of the newly joined device
    493              if ( events & SIMPLE_DESC_QUERY_EVT )
   \                     ??zha_project_event_loop_14:
   \   000215   EE           MOV     A,R6
   \   000216   5410         ANL     A,#0x10
   \   000218   6046         JZ      ??zha_project_event_loop_15
    494              {
    495                  uint8 i;
    496                  for(i=0;i<=zclZHAtest_ActiveEP->cnt;i++)
   \   00021A   75..00       MOV     ?V0,#0x0
   \   00021D   8025         SJMP    ??zha_project_event_loop_16
    497                  {
    498                      if(ep[i]!=0)
   \                     ??zha_project_event_loop_17:
   \   00021F   A8..         MOV     R0,?V0
   \   000221   74..         MOV     A,#ep & 0xff
   \   000223   28           ADD     A,R0
   \   000224   F582         MOV     DPL,A
   \   000226   E4           CLR     A
   \   000227   34..         ADDC    A,#(ep >> 8) & 0xff
   \   000229   F583         MOV     DPH,A
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   F9           MOV     R1,A
   \   00022D   6013         JZ      ??zha_project_event_loop_18
    499                      {
    500                            ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,
    501                                      ep[i], 0);
   \   00022F                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   00022F   75..00       MOV     ?V1,#0x0
   \   000232   78..         MOV     R0,#?V1
   \   000234   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000237   12....       LCALL   ?Subroutine10 & 0xFFFF
    502                      }
    503                  }
   \                     ??CrossCallReturnLabel_31:
   \   00023A   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00023D   7401         MOV     A,#0x1
   \   00023F   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zha_project_event_loop_18:
   \   000242   05..         INC     ?V0
   \                     ??zha_project_event_loop_16:
   \   000244   90....       MOV     DPTR,#zclZHAtest_ActiveEP
   \   000247   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   C3           CLR     C
   \   00024F   95..         SUBB    A,?V0
   \   000251   50CC         JNC     ??zha_project_event_loop_17
    504                  osal_memset(ep,0,sizeof(ep));
   \   000253                ; Setup parameters for call to function osal_memset
   \   000253   7C05         MOV     R4,#0x5
   \   000255   7D00         MOV     R5,#0x0
   \   000257   7900         MOV     R1,#0x0
   \   000259   7A..         MOV     R2,#ep & 0xff
   \   00025B   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   00025D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    505                  //return ( events ^ SIMPLE_DESC_QUERY_EVT );
    506              }
    507          
    508            // handle processing of timeout event triggered by request fast polling command
    509          
    510              if ( events & SIMPLE_DESC_EVT )
   \                     ??zha_project_event_loop_15:
   \   000260   EE           MOV     A,R6
   \   000261   5440         ANL     A,#0x40
   \   000263   6015         JZ      ??zha_project_event_loop_19
    511              {
    512                  ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,1, 0);
   \   000265                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000265   75..00       MOV     ?V0,#0x0
   \   000268   78..         MOV     R0,#?V0
   \   00026A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00026D   7901         MOV     R1,#0x1
   \   00026F   12....       LCALL   ?Subroutine10 & 0xFFFF
    513                  //return ( events ^ SIMPLE_DESC_QUERY_EVT );
    514              }
   \                     ??CrossCallReturnLabel_32:
   \   000272   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   000275   7401         MOV     A,#0x1
   \   000277   12....       LCALL   ?DEALLOC_XSTACK8
    515              if ( events & RESET_EVT )
   \                     ??zha_project_event_loop_19:
   \   00027A   EF           MOV     A,R7
   \   00027B   5402         ANL     A,#0x2
   \   00027D   600B         JZ      ??zha_project_event_loop_20
    516              {
    517                  Onboard_soft_reset();
   \   00027F                ; Setup parameters for call to function Onboard_soft_reset
   \   00027F   12....       LCALL   Onboard_soft_reset & 0xFFFF
    518                  return ( events ^ RESET_EVT );
   \   000282   EE           MOV     A,R6
   \   000283   FA           MOV     R2,A
   \   000284   EF           MOV     A,R7
   \   000285   6402         XRL     A,#0x2
   \                     ??zha_project_event_loop_4:
   \   000287   FB           MOV     R3,A
   \   000288   8004         SJMP    ??zha_project_event_loop_21
    519              }  
    520           
    521            // Discard unknown events
    522            return 0;
   \                     ??zha_project_event_loop_20:
   \   00028A   7A00         MOV     R2,#0x0
   \   00028C   7B00         MOV     R3,#0x0
   \                     ??zha_project_event_loop_21:
   \   00028E   7435         MOV     A,#0x35
   \   000290   12....       LCALL   ?DEALLOC_XSTACK8
   \   000293   7F04         MOV     R7,#0x4
   \   000295   02....       LJMP    ?BANKED_LEAVE_XDATA
    523          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#simpleDescReqAddr
   \   000003   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000006   7A..         MOV     R2,#simpleDescReqAddr & 0xff
   \   000008   7B..         MOV     R3,#(simpleDescReqAddr >> 8) & 0xff
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003                ; Setup parameters for call to function zcl_SendRead
   \   000003                ; Setup parameters for call to function zcl_SendRead
   \   000003                ; Setup parameters for call to function zcl_SendRead
   \   000003   F5..         MOV     ?V0,A
   \   000005   78..         MOV     R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#simpleDescReqAddr
   \   000006   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   7409         MOV     A,#0x9
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET
    524          
    525          
    526          /*********************************************************************
    527           * @fn      zha_project_HandleKeys
    528           *
    529           * @brief   Handles all key events for this device.
    530           *
    531           * @param   shift - true if in shift/alt.
    532           * @param   keys - bit field for key events. Valid entries:
    533           *                 HAL_KEY_SW_5
    534           *                 HAL_KEY_SW_4
    535           *                 HAL_KEY_SW_2
    536           *                 HAL_KEY_SW_1
    537           *
    538           * @return  none
    539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          static void zha_project_HandleKeys( byte shift, byte keys )
   \                     zha_project_HandleKeys:
    541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    542            if ( keys & HAL_KEY_SW_1 )
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5011         JNC     ??zha_project_HandleKeys_0
    543            {
    544              giLightScreenMode = LIGHT_MAINMODE;
   \   000012   90....       MOV     DPTR,#giLightScreenMode
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    545          
    546              // toggle local light immediately
    547              zha_project_OnOff = zha_project_OnOff ? LIGHT_OFF : LIGHT_ON;
   \   000017   90....       MOV     DPTR,#zha_project_OnOff
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6003         JZ      ??zha_project_HandleKeys_1
   \   00001D   E4           CLR     A
   \   00001E   8002         SJMP    ??zha_project_HandleKeys_2
   \                     ??zha_project_HandleKeys_1:
   \   000020   7401         MOV     A,#0x1
   \                     ??zha_project_HandleKeys_2:
   \   000022   F0           MOVX    @DPTR,A
    548          #ifdef ZCL_LEVEL_CTRL
    549              zha_project_LevelCurrentLevel = zha_project_OnOff ? zha_project_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    550          #endif
    551            }
    552          
    553            if ( keys & HAL_KEY_SW_2 )
   \                     ??zha_project_HandleKeys_0:
   \   000023   EF           MOV     A,R7
   \   000024   A2E1         MOV     C,0xE0 /* A   */.1
   \   000026   505D         JNC     ??zha_project_HandleKeys_3
    554            {
    555          #if (defined HAL_BOARD_ZLIGHT)
    556          
    557              zha_project_BasicResetCB();
    558          
    559          #else
    560          
    561              giLightScreenMode = LIGHT_MAINMODE;
   \   000028   90....       MOV     DPTR,#giLightScreenMode
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    562          
    563          #ifdef ZCL_EZMODE
    564              {
    565                // Invoke EZ-Mode
    566                zclEZMode_InvokeData_t ezModeData;
    567          
    568                // Invoke EZ-Mode
    569                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   04           INC     A
   \   000034   F0           MOVX    @DPTR,A
    570                if ( (zha_project_NwkState == DEV_ZB_COORD) ||
    571                    (zha_project_NwkState == DEV_ROUTER)   ||
    572                      (zha_project_NwkState == DEV_END_DEVICE) )
   \   000035   90....       MOV     DPTR,#zha_project_NwkState
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6409         XRL     A,#0x9
   \   00003B   600A         JZ      ??zha_project_HandleKeys_4
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6407         XRL     A,#0x7
   \   000040   6005         JZ      ??zha_project_HandleKeys_4
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6406         XRL     A,#0x6
   \   000045   7009         JNZ     ??zha_project_HandleKeys_5
    573                {
    574                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zha_project_HandleKeys_4:
   \   000047   7401         MOV     A,#0x1
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   7401         MOV     A,#0x1
   \   00004E   8006         SJMP    ??zha_project_HandleKeys_6
    575                }
    576                else
    577                {
    578                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zha_project_HandleKeys_5:
   \   000050   7401         MOV     A,#0x1
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E4           CLR     A
   \                     ??zha_project_HandleKeys_6:
   \   000056   F0           MOVX    @DPTR,A
    579                }
    580                ezModeData.initiator = FALSE;          // OnOffLight is a target
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E4           CLR     A
   \   00005D   F0           MOVX    @DPTR,A
    581                ezModeData.numActiveOutClusters = 0;
   \   00005E   7406         MOV     A,#0x6
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
    582                ezModeData.pActiveOutClusterIDs = NULL;
   \   000065   7407         MOV     A,#0x7
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   F0           MOVX    @DPTR,A
    583                ezModeData.numActiveInClusters = 0;
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
    584                ezModeData.pActiveOutClusterIDs = NULL;
   \   000075   7407         MOV     A,#0x7
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   F0           MOVX    @DPTR,A
    585                zcl_InvokeEZMode( &ezModeData );
   \   00007E                ; Setup parameters for call to function zcl_InvokeEZMode
   \   00007E   AA..         MOV     R2,?XSP + 0
   \   000080   AB..         MOV     R3,?XSP + 1
   \   000082   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    586              }
    587          
    588          #else // NOT EZ-Mode
    589              {
    590                zAddrType_t dstAddr;
    591                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    592          
    593                // Initiate an End Device Bind Request, this bind request will
    594                // only use a cluster list that is important to binding.
    595                dstAddr.addrMode = afAddr16Bit;
    596                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    597                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    598                                     SAMPLELIGHT_ENDPOINT,
    599                                     ZCL_HA_PROFILE_ID,
    600                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    601                                     0, NULL,   // No Outgoing clusters to bind
    602                                     TRUE );
    603              }
    604          #endif // ZCL_EZMODE
    605          #endif // HAL_BOARD_ZLIGHT
    606            }
    607          
    608            if ( keys & HAL_KEY_SW_3 )
   \                     ??zha_project_HandleKeys_3:
   \   000085   EF           MOV     A,R7
   \   000086   A2E4         MOV     C,0xE0 /* A   */.4
   \   000088   5023         JNC     ??zha_project_HandleKeys_7
    609            {
    610              NLME_SendNetworkStatus( zha_project_DstAddr.addr.shortAddr,
    611                                 NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
   \   00008A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008A   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00008D   8A..         MOV     ?V0,R2
   \   00008F   8B..         MOV     ?V1,R3
   \   000091   AC..         MOV     R4,?V0
   \   000093   AD..         MOV     R5,?V1
   \   000095                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   000095   75..00       MOV     ?V0,#0x0
   \   000098   78..         MOV     R0,#?V0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009D   7902         MOV     R1,#0x2
   \   00009F   90....       MOV     DPTR,#zha_project_DstAddr
   \   0000A2   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    612            }
   \                     ??CrossCallReturnLabel_78:
   \   0000A5   12....       LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
    613          
    614            if ( keys & HAL_KEY_SW_4 )
   \                     ??zha_project_HandleKeys_7:
   \   0000AD   EF           MOV     A,R7
   \   0000AE   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000B0   5041         JNC     ??zha_project_HandleKeys_8
    615            {
    616              giLightScreenMode = LIGHT_MAINMODE;
   \   0000B2   90....       MOV     DPTR,#giLightScreenMode
   \   0000B5   E4           CLR     A
   \   0000B6   F0           MOVX    @DPTR,A
    617          
    618              if ( ( zha_project_NwkState == DEV_ZB_COORD ) ||
    619                    ( zha_project_NwkState == DEV_ROUTER ) )
   \   0000B7   90....       MOV     DPTR,#zha_project_NwkState
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   6409         XRL     A,#0x9
   \   0000BD   6005         JZ      ??zha_project_HandleKeys_9
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   6407         XRL     A,#0x7
   \   0000C2   702F         JNZ     ??zha_project_HandleKeys_8
    620              {
    621                zAddrType_t tmpAddr;
    622          
    623                tmpAddr.addrMode = Addr16Bit;
   \                     ??zha_project_HandleKeys_9:
   \   0000C4   7408         MOV     A,#0x8
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   F0           MOVX    @DPTR,A
    624                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0000CC                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000CC   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000CF   85..82       MOV     DPL,?XSP + 0
   \   0000D2   85..83       MOV     DPH,?XSP + 1
   \   0000D5   EA           MOV     A,R2
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   EB           MOV     A,R3
   \   0000D9   F0           MOVX    @DPTR,A
    625          
    626                // toggle permit join
    627                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   0000DA   90....       MOV     DPTR,#gPermitDuration
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   6003         JZ      ??zha_project_HandleKeys_10
   \   0000E0   E4           CLR     A
   \   0000E1   8002         SJMP    ??zha_project_HandleKeys_11
   \                     ??zha_project_HandleKeys_10:
   \   0000E3   74FF         MOV     A,#-0x1
   \                     ??zha_project_HandleKeys_11:
   \   0000E5   F0           MOVX    @DPTR,A
    628          
    629                // Trust Center significance is always true
    630                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   0000E6                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   7C01         MOV     R4,#0x1
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F9           MOV     R1,A
   \   0000EC   AA..         MOV     R2,?XSP + 0
   \   0000EE   AB..         MOV     R3,?XSP + 1
   \   0000F0   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    631              }
    632            }
    633          
    634            // Shift F5 does a Basic Reset (factory defaults)
    635            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zha_project_HandleKeys_8:
   \   0000F3   EE           MOV     A,R6
   \   0000F4   600A         JZ      ??zha_project_HandleKeys_12
   \   0000F6   EF           MOV     A,R7
   \   0000F7   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000F9   5016         JNC     ??zha_project_HandleKeys_13
    636            {
    637              zha_project_BasicResetCB();
   \   0000FB                ; Setup parameters for call to function zha_project_BasicResetCB
   \   0000FB   12....       LCALL   `??zha_project_BasicResetCB::?relay`; Banked call to: zha_project_BasicResetCB
   \   0000FE   8011         SJMP    ??zha_project_HandleKeys_13
    638            }
    639            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zha_project_HandleKeys_12:
   \   000100   EF           MOV     A,R7
   \   000101   A2E2         MOV     C,0xE0 /* A   */.2
   \   000103   500C         JNC     ??zha_project_HandleKeys_13
    640            {
    641              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
   \   000105   90....       MOV     DPTR,#giLightScreenMode
   \   000108   E0           MOVX    A,@DPTR
   \   000109   6003         JZ      ??zha_project_HandleKeys_14
   \   00010B   E4           CLR     A
   \   00010C   8002         SJMP    ??zha_project_HandleKeys_15
   \                     ??zha_project_HandleKeys_14:
   \   00010E   7401         MOV     A,#0x1
   \                     ??zha_project_HandleKeys_15:
   \   000110   F0           MOVX    @DPTR,A
    642            }
    643          
    644            // update the display, including the light
    645            //zha_project_LcdDisplayUpdate();
    646          }
   \                     ??zha_project_HandleKeys_13:
   \   000111   7409         MOV     A,#0x9
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   \   000116                REQUIRE ?Subroutine0
   \   000116                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   22           RET
    647          
    648          
    649          /*********************************************************************
    650           * @fn      zha_project_DisplayLight
    651           *
    652           * @brief   Displays current state of light on LED and also on main display if supported.
    653           *
    654           * @param   none
    655           *
    656           * @return  none
    657           */
    658          static void zha_project_DisplayLight( void )
    659          {
    660            // set the LED1 based on light (on or off)
    661            if ( zha_project_OnOff == LIGHT_ON )
    662            {
    663              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    664            }
    665            else
    666            {
    667              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    668            }
    669          
    670          #ifdef LCD_SUPPORTED
    671            if (giLightScreenMode == LIGHT_MAINMODE)
    672            {
    673          #ifdef ZCL_LEVEL_CTRL
    674              // display current light level
    675              if ( ( zha_project_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    676                   ( zha_project_OnOff == LIGHT_OFF ) )
    677              {
    678                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    679              }
    680              else if ( ( zha_project_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    681                        ( zha_project_LevelCurrentLevel == zha_project_LevelOnLevel ) ||
    682                         ( ( zha_project_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    683                           ( zha_project_LevelCurrentLevel == zha_project_LevelLastLevel ) ) )
    684              {
    685                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    686              }
    687              else    // "    LEVEL ###"
    688              {
    689                zclHA_uint8toa( zha_project_LevelCurrentLevel, &sLightLevel[10] );
    690                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
    691              }
    692          #else
    693              if ( zha_project_OnOff )
    694              {
    695                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    696              }
    697              else
    698              {
    699                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    700              }
    701          #endif // ZCL_LEVEL_CTRL
    702            }
    703          #endif // LCD_SUPPORTED
    704          }
    705          
    706          /*********************************************************************
    707           * @fn      zha_project_BasicResetCB
    708           *
    709           * @brief   Callback from the ZCL General Cluster Library
    710           *          to set all the Basic Cluster attributes to default values.
    711           *
    712           * @param   none
    713           *
    714           * @return  none
    715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    716          static void zha_project_BasicResetCB( void )
   \                     zha_project_BasicResetCB:
    717          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    718            NLME_LeaveReq_t leaveReq;
    719            // Set every field to 0
    720            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    721          
    722            // This will enable the device to rejoin the network after reset.
    723            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    724          
    725            // Set the NV startup option to force a "new" join.
    726            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    727          
    728            // Leave the network, and reset afterwards
    729            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zha_project_BasicResetCB_0
    730            {
    731              // Couldn't send out leave; prepare to reset anyway
    732              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
    733            }
    734          }
   \                     ??zha_project_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036                REQUIRE ?Subroutine1
   \   000036                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine23_0
   \   000003                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    735          
    736          /*********************************************************************
    737           * @fn      zha_project_IdentifyCB
    738           *
    739           * @brief   Callback from the ZCL General Cluster Library when
    740           *          it received an Identity Command for this application.
    741           *
    742           * @param   srcAddr - source address and endpoint of the response message
    743           * @param   identifyTime - the number of seconds to identify yourself
    744           *
    745           * @return  none
    746           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    747          static void zha_project_IdentifyCB( zclIdentify_t *pCmd )
   \                     zha_project_IdentifyCB:
    748          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    749            zha_project_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00000D   90....       MOV     DPTR,#zha_project_IdentifyTime
   \   000010   12....       LCALL   ?Subroutine5 & 0xFFFF
    750          //zha_project_ProcessIdentifyTimeChange();
    751          }
   \                     ??CrossCallReturnLabel_6:
   \   000013   80..         SJMP    ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    752          
    753          /*********************************************************************
    754           * @fn      zha_project_IdentifyQueryRspCB
    755           *
    756           * @brief   Callback from the ZCL General Cluster Library when
    757           *          it received an Identity Query Response Command for this application.
    758           *
    759           * @param   srcAddr - requestor's address
    760           * @param   timeout - number of seconds to identify yourself (valid for query response)
    761           *
    762           * @return  none
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          static void zha_project_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zha_project_IdentifyQueryRspCB:
    765          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    766            (void)pRsp;
    767          #ifdef ZCL_EZMODE
    768            {
    769              zclEZMode_ActionData_t data;
    770              data.pIdentifyQueryRsp = pRsp;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
    771              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
   \   000014                ; Setup parameters for call to function zcl_EZModeAction
   \   000014   AA..         MOV     R2,?XSP + 0
   \   000016   AB..         MOV     R3,?XSP + 1
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    772            }
    773          #endif
    774          }
   \   00001D   7402         MOV     A,#0x2
   \   00001F   80..         SJMP    ?Subroutine1
    775          
    776          /*********************************************************************
    777           * @fn      zha_project_OnOffCB
    778           *
    779           * @brief   Callback from the ZCL General Cluster Library when
    780           *          it received an On/Off Command for this application.
    781           *
    782           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    783           *
    784           * @return  none
    785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    786          static void zha_project_OnOffCB( uint8 cmd )
   \                     zha_project_OnOffCB:
    787          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    788            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
    789          
    790            zha_project_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000017   90....       MOV     DPTR,#zha_project_DstAddr
   \   00001A   12....       LCALL   ?Subroutine5 & 0xFFFF
    791          
    792          
    793            // Turn on the light
    794            if ( cmd == COMMAND_ON )
   \                     ??CrossCallReturnLabel_7:
   \   00001D   7401         MOV     A,#0x1
   \   00001F   6E           XRL     A,R6
   \   000020   600E         JZ      ??zha_project_OnOffCB_0
    795            {
    796              zha_project_OnOff = LIGHT_ON;
    797            }
    798            // Turn off the light
    799            else if ( cmd == COMMAND_OFF )
   \   000022   EE           MOV     A,R6
   \   000023   6012         JZ      ??zha_project_OnOffCB_1
    800            {
    801              zha_project_OnOff = LIGHT_OFF;
    802            }
    803            // Toggle the light
    804            else if ( cmd == COMMAND_TOGGLE )
   \   000025   7402         MOV     A,#0x2
   \   000027   6E           XRL     A,R6
   \   000028   7012         JNZ     ??zha_project_OnOffCB_2
    805            {
    806              if ( zha_project_OnOff == LIGHT_OFF )
   \   00002A   90....       MOV     DPTR,#zha_project_OnOff
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7007         JNZ     ??zha_project_OnOffCB_1
    807              {
    808                zha_project_OnOff = LIGHT_ON;
   \                     ??zha_project_OnOffCB_0:
   \   000030   90....       MOV     DPTR,#zha_project_OnOff
   \   000033   7401         MOV     A,#0x1
   \   000035   8004         SJMP    ??zha_project_OnOffCB_3
    809              }
    810              else
    811              {
    812                zha_project_OnOff = LIGHT_OFF;
   \                     ??zha_project_OnOffCB_1:
   \   000037   90....       MOV     DPTR,#zha_project_OnOff
   \   00003A   E4           CLR     A
   \                     ??zha_project_OnOffCB_3:
   \   00003B   F0           MOVX    @DPTR,A
    813              }
    814            }
    815          
    816          #if ZCL_LEVEL_CTRL
    817            zha_project_DefaultMove( );
    818          #endif
    819          
    820            // update the display
    821            //zha_project_LcdDisplayUpdate( );
    822          }
   \                     ??zha_project_OnOffCB_2:
   \   00003C   02....       LJMP    ?Subroutine0 & 0xFFFF
    823          
    824          
    825          /******************************************************************************
    826           *
    827           *  Functions for processing ZCL Foundation incoming Command/Response messages
    828           *
    829           *****************************************************************************/
    830          
    831          /*********************************************************************
    832           * @fn      zha_project_ProcessIncomingMsg
    833           *
    834           * @brief   Process ZCL Foundation incoming message
    835           *
    836           * @param   pInMsg - pointer to the received message
    837           *
    838           * @return  none
    839           */
    840          static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
    841          {
    842            switch ( pInMsg->zclHdr.commandID )
    843            {
    844          #ifdef ZCL_READ
    845              case ZCL_CMD_READ_RSP:
    846                zha_project_ProcessInReadRspCmd( pInMsg );
    847                break;
    848          #endif
    849          #ifdef ZCL_WRITE
    850              case ZCL_CMD_WRITE_RSP:
    851                zha_project_ProcessInWriteRspCmd( pInMsg );
    852                break;
    853          #endif
    854          #ifdef ZCL_REPORT
    855              // Attribute Reporting implementation should be added here
    856              case ZCL_CMD_CONFIG_REPORT:
    857                // zha_project_ProcessInConfigReportCmd( pInMsg );
    858                break;
    859          
    860              case ZCL_CMD_CONFIG_REPORT_RSP:
    861                // zha_project_ProcessInConfigReportRspCmd( pInMsg );
    862                break;
    863          
    864              case ZCL_CMD_READ_REPORT_CFG:
    865                // zha_project_ProcessInReadReportCfgCmd( pInMsg );
    866                break;
    867          
    868              case ZCL_CMD_READ_REPORT_CFG_RSP:
    869                // zha_project_ProcessInReadReportCfgRspCmd( pInMsg );
    870                break;
    871          
    872              case ZCL_CMD_REPORT:
    873                // zha_project_ProcessInReportCmd( pInMsg );
    874                break;
    875          #endif
    876              case ZCL_CMD_DEFAULT_RSP:
    877                zha_project_ProcessInDefaultRspCmd( pInMsg );
    878                break;
    879          #ifdef ZCL_DISCOVER
    880              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    881                zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
    882                break;
    883          
    884              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    885                zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
    886                break;
    887          
    888              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    889                zha_project_ProcessInDiscAttrsRspCmd( pInMsg );
    890                break;
    891          
    892              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    893                zha_project_ProcessInDiscAttrsExtRspCmd( pInMsg );
    894                break;
    895          #endif
    896              default:
    897                break;
    898            }
    899          
    900            if ( pInMsg->attrCmd )
    901              osal_mem_free( pInMsg->attrCmd );
    902          }
    903          
    904          #ifdef ZCL_READ
    905          /*********************************************************************
    906           * @fn      zha_project_ProcessInReadRspCmd
    907           *
    908           * @brief   Process the "Profile" Read Response Command
    909           *
    910           * @param   pInMsg - incoming message to process
    911           *
    912           * @return  none
    913           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine24_0
   \   000006                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    914          static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zha_project_ProcessInReadRspCmd:
    915          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 43
   \   000005   74D5         MOV     A,#-0x2b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V10,R2
   \   00000C   8B..         MOV     ?V11,R3
    916            zclReadRspCmd_t *readRspCmd;
    917              uint8 i,k;
    918              uint8 *j;
    919              uint16 *p;
    920              readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd; 
   \   00000E   EA           MOV     A,R2
   \   00000F   2417         ADD     A,#0x17
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V11
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V1,A
    921              switch(pInMsg->clusterId)
   \   00001F   EA           MOV     A,R2
   \   000020   240A         ADD     A,#0xa
   \   000022   F5..         MOV     ?V8,A
   \   000024   E4           CLR     A
   \   000025   35..         ADDC    A,?V11
   \   000027   F5..         MOV     ?V9,A
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V2,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V3,A
   \   00003C   78..         MOV     R0,#?V2
   \   00003E   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_0`:
   \   000041   0000         DW        0
   \   000043   0A00         DW        10
   \   000045   0000         DW        0
   \   000047   ....         DW        ??zha_project_ProcessInReadRspCmd_0
   \   000049   0100         DW        1
   \   00004B   ....         DW        ??zha_project_ProcessInReadRspCmd_1
   \   00004D   0600         DW        6
   \   00004F   ....         DW        ??zha_project_ProcessInReadRspCmd_2
   \   000051   0800         DW        8
   \   000053   ....         DW        ??zha_project_ProcessInReadRspCmd_3
   \   000055   0003         DW        768
   \   000057   ....         DW        ??zha_project_ProcessInReadRspCmd_4
   \   000059   0004         DW        1024
   \   00005B   ....         DW        ??zha_project_ProcessInReadRspCmd_5
   \   00005D   0204         DW        1026
   \   00005F   ....         DW        ??zha_project_ProcessInReadRspCmd_6
   \   000061   0504         DW        1029
   \   000063   ....         DW        ??zha_project_ProcessInReadRspCmd_7
   \   000065   0005         DW        1280
   \   000067   ....         DW        ??zha_project_ProcessInReadRspCmd_8
   \   000069   0205         DW        1282
   \   00006B   ....         DW        ??zha_project_ProcessInReadRspCmd_9
   \   00006D   ....         DW        ??zha_project_ProcessInReadRspCmd_10
    922              {
    923                case ZCL_CLUSTER_ID_GEN_BASIC:
    924                  {
    925                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_0:
   \   00006F   7E00         MOV     R6,#0x0
   \   000071   800D         SJMP    ??zha_project_ProcessInReadRspCmd_11
    926                    {
    927                          zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
    928                          j=statusRec->data;
    929                          switch(statusRec->attrID)
    930                          {
    931                              case ATTRID_BASIC_POWER_SOURCE:
    932                                  uint8 zclZHAtest_PowerSource=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
    933                                  break;
    934          //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
    935          //                        zclZHAtest_BatteryVoltage=*j;
    936          //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_BatteryVoltage);
    937          //                        break;
    938                              case ATTRID_BASIC_ZCL_VERSION:
    939                                  break;
    940                              case ATTRID_BASIC_MODEL_ID:
    941                                  break;
    942                              case ATTRID_BASIC_MANUFACTURER_NAME:
    943                                  SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
                                         ^
Warning[Pe223]: function "SetTempDeviceManuName" declared implicitly
    944                                  break;
    945                              case ATTRID_BASIC_HW_VERSION:
    946                                  uint8 zclZHAtest_HWRevision = *j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
    947                                  SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_HWRevision);
                                         ^
Warning[Pe223]: function "SetTempDeviceHW" declared implicitly

                          uint8 zclZHAtest_PowerSource=*j;
                                ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",932  Warning[Pe177]: 
          variable "zclZHAtest_PowerSource" was declared but never referenced

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",929  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zclZHAtest_PowerSource" (declared at line 932 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
            variable "zclZHAtest_HWRevision" (declared at line 946 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \                     ??zha_project_ProcessInReadRspCmd_12:
   \   000073                ; Setup parameters for call to function SetTempDeviceHW
   \   000073   85..82       MOV     DPL,?V2
   \   000076   85..83       MOV     DPH,?V3
   \   000079   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00007C   12....       LCALL   `??SetTempDeviceHW::?relay`; Banked call to: SetTempDeviceHW
    948                                  break;                        
   \                     ??zha_project_ProcessInReadRspCmd_13:
   \   00007F   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_11:
   \   000080   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000083   4003         JC      $+5
   \   000085   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   \   000088   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00008B   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_1`:
   \   00008E   0300         DW        3
   \   000090   01           DB        1
   \   000091   ....         DW        ??zha_project_ProcessInReadRspCmd_13
   \   000093   ....         DW        ??zha_project_ProcessInReadRspCmd_12
   \   000095   ....         DW        ??zha_project_ProcessInReadRspCmd_14
   \                     ??zha_project_ProcessInReadRspCmd_14:
   \   000097                ; Setup parameters for call to function SetTempDeviceManuName
   \   000097   AC..         MOV     R4,?V2
   \   000099   AD..         MOV     R5,?V3
   \   00009B   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00009E   12....       LCALL   `??SetTempDeviceManuName::?relay`; Banked call to: SetTempDeviceManuName
   \   0000A1   80DC         SJMP    ??zha_project_ProcessInReadRspCmd_13
    949                              default:
    950                                break;
    951                          
    952                          }
    953          
    954                    }
    955                  }
    956                  //osal_set_event( zclZHAtest_TaskID,ZHAtest_ATTRIBUTE_POWER_EVT);
    957                  
    958                  break;
    959                  
    960                case ZCL_CLUSTER_ID_GEN_POWER_CFG:
    961                  {
    962                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_1:
   \   0000A3   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_15:
   \   0000A5   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000A8   4003         JC      $+5
   \   0000AA   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
    963                    {
    964                          zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0000AD   12....       LCALL   ?Subroutine15 & 0xFFFF
    965                          j=statusRec->data;
    966                          switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_41:
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   6420         XRL     A,#0x20
   \   0000B3   7002         JNZ     ??zha_project_ProcessInReadRspCmd_16
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReadRspCmd_16:
   \   0000B7   7011         JNZ     ??zha_project_ProcessInReadRspCmd_17
    967                          {
    968                              case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
    969                                  uint8 zclZHAtest_BatteryVoltage=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
    970                                  SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_BatteryVoltage);
                                         ^
Warning[Pe223]: function "SetTempDeviceBAT" declared implicitly

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",966  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zclZHAtest_BatteryVoltage" (declared at line 969 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \   0000B9                ; Setup parameters for call to function SetTempDeviceBAT
   \   0000B9   8882         MOV     DPL,R0
   \   0000BB   8983         MOV     DPH,R1
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000C4   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000C7   12....       LCALL   `??SetTempDeviceBAT::?relay`; Banked call to: SetTempDeviceBAT
    971                                  break;
    972                              default:
    973                                break;
    974                          
    975                          }
    976          
    977                    }
   \                     ??zha_project_ProcessInReadRspCmd_17:
   \   0000CA   0E           INC     R6
   \   0000CB   80D8         SJMP    ??zha_project_ProcessInReadRspCmd_15
    978                
    979                  }        
    980                  
    981                  
    982                  //osal_set_event( zclZHAtest_TaskID, ZHAtest_ACTIVE_EP_EVT );
    983                  break;
    984                case ZCL_CLUSTER_ID_GEN_ON_OFF:
    985                  {
    986                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_2:
   \   0000CD   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_18:
   \   0000CF   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000D2   4003         JC      $+5
   \   0000D4   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
    987                    {
    988                      zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0000D7   12....       LCALL   ?Subroutine6 & 0xFFFF
    989                      j=statusRec->data;
    990                      switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_13:
   \   0000DA   7023         JNZ     ??zha_project_ProcessInReadRspCmd_19
    991                      {
    992                          case ATTRID_ON_OFF:
    993                              uint16 buf[3];
                                     ^
Warning[Pe1072]: a declaration cannot have a label
    994                              osal_memset(buf,0,sizeof(buf));
   \   0000DC                ; Setup parameters for call to function osal_memset
   \   0000DC   7C06         MOV     R4,#0x6
   \   0000DE   7D00         MOV     R5,#0x0
   \   0000E0   7900         MOV     R1,#0x0
   \   0000E2   AA..         MOV     R2,?XSP + 0
   \   0000E4   AB..         MOV     R3,?XSP + 1
   \   0000E6   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    995                              buf[0] = *j;
   \   0000E9   85..82       MOV     DPL,?V2
   \   0000EC   85..83       MOV     DPH,?V3
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   85..82       MOV     DPL,?XSP + 0
   \   0000F3   85..83       MOV     DPH,?XSP + 1
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E4           CLR     A
   \   0000F9   12....       LCALL   ??Subroutine27_0 & 0xFFFF
    996                              UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                     ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_76:
   \   0000FC   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
    997                            break;
    998                          default:
    999                            break;
   1000                      }
   1001          
   1002                    }
   \                     ??zha_project_ProcessInReadRspCmd_19:
   \   0000FF   0E           INC     R6
   \   000100   80CD         SJMP    ??zha_project_ProcessInReadRspCmd_18
   1003                
   1004                  }
   1005                  break;
   1006                  case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
   1007                      {
   1008                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_4:
   \   000102   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_20:
   \   000104   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000107   4003         JC      $+5
   \   000109   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1009                          {
   1010                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   00010C   12....       LCALL   ?Subroutine15 & 0xFFFF
   1011                              p=(uint16 *)statusRec->data;
   \                     ??CrossCallReturnLabel_42:
   \   00010F   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   1012                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1013                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_71:
   \   000112   6407         XRL     A,#0x7
   \   000114   7002         JNZ     ??zha_project_ProcessInReadRspCmd_21
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReadRspCmd_21:
   \   000118   701B         JNZ     ??zha_project_ProcessInReadRspCmd_22
   1014                              {
   1015                                  case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
   1016                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1017                                      osal_memset(buf,0,sizeof(buf));
   \   00011A                ; Setup parameters for call to function osal_memset
   \   00011A   7C06         MOV     R4,#0x6
   \   00011C   7D00         MOV     R5,#0x0
   \   00011E   7900         MOV     R1,#0x0
   \   000120   AA..         MOV     R2,?XSP + 0
   \   000122   AB..         MOV     R3,?XSP + 1
   \   000124   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1018                                      buf[2] = *p;
   \   000127   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00012A   7404         MOV     A,#0x4
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   1019                                      UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus3" declared implicitly
   \                     ??CrossCallReturnLabel_75:
   \   000132   12....       LCALL   `??UpdateDeviceStatus3::?relay`; Banked call to: UpdateDeviceStatus3
   1020                                  break;
   1021                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
   1022                                      //zclZHAtest_HUE_Status = *p;
   1023                                    break;
   1024                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
   1025                                      //zclZHAtest_Saturation = *p;                        
   1026                                    break;
   1027                                  default:
   1028                                  break;
   1029          
   1030                              }
   1031          
   1032                          }
   \                     ??zha_project_ProcessInReadRspCmd_22:
   \   000135   0E           INC     R6
   \   000136   80CC         SJMP    ??zha_project_ProcessInReadRspCmd_20
   1033          
   1034                       }
   1035              
   1036                  break;
   1037                  case ZCL_CLUSTER_ID_SS_IAS_ZONE:
   1038                 {        uint16 supportOD = 0;
   1039                          uint8 sensorType = 0;
   1040                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_8:
   \   000138   7E00         MOV     R6,#0x0
   \   00013A   02....       LJMP    ??zha_project_ProcessInReadRspCmd_23 & 0xFFFF
   1041                          {
   1042                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1043                              p=(uint16 *)statusRec->data;
   1044                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1045                              switch(statusRec->attrID)
   1046                              {
   1047                                  case ATTRID_SS_IAS_ZONE_STATUS:
   1048                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1049                                      osal_memset(buf,0,sizeof(buf));
   1050                                      buf[0] = *p;
   1051                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   1052                                  break;
   1053                                  case ATTRID_SS_IAS_ZONE_TYPE:
   1054                                      zAddrType_t addr;
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1055                                      uint8 address[8];
   1056                                      uint8 pValue[Z_EXTADDR_LEN];
   1057                                      addr.addrMode = Addr64Bit;
   \                     ??zha_project_ProcessInReadRspCmd_24:
   \   00013D   742A         MOV     A,#0x2a
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   7403         MOV     A,#0x3
   \   000144   F0           MOVX    @DPTR,A
   1058                                      osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
   \   000145                ; Setup parameters for call to function osal_nv_read
   \   000145   7412         MOV     A,#0x12
   \   000147   12....       LCALL   ?XSTACK_DISP100_8
   \   00014A   88..         MOV     ?V4,R0
   \   00014C   89..         MOV     ?V5,R1
   \   00014E   78..         MOV     R0,#?V4
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000153   75..08       MOV     ?V4,#0x8
   \   000156   75..00       MOV     ?V5,#0x0
   \   000159   78..         MOV     R0,#?V4
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015E   7C00         MOV     R4,#0x0
   \   000160   7D00         MOV     R5,#0x0
   \   000162   7A01         MOV     R2,#0x1
   \   000164   7B00         MOV     R3,#0x0
   \   000166   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000169   7404         MOV     A,#0x4
   \   00016B   12....       LCALL   ?DEALLOC_XSTACK8
   1059                                      //osal_memcpy(pValue,addr.addr.extAddr,8);
   1060                                      osal_memcpy(addr.addr.extAddr,pValue,8);
   \   00016E                ; Setup parameters for call to function osal_memcpy
   \   00016E   7412         MOV     A,#0x12
   \   000170   12....       LCALL   ?XSTACK_DISP100_8
   \   000173   88..         MOV     ?V4,R0
   \   000175   89..         MOV     ?V5,R1
   \   000177   75..00       MOV     ?V6,#0x0
   \   00017A   78..         MOV     R0,#?V4
   \   00017C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00017F   7C08         MOV     R4,#0x8
   \   000181   7D00         MOV     R5,#0x0
   \   000183   7425         MOV     A,#0x25
   \   000185   12....       LCALL   ?XSTACK_DISP101_8
   \   000188   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00018B   7403         MOV     A,#0x3
   \   00018D   12....       LCALL   ?DEALLOC_XSTACK8
   1061                                      //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
   1062                                      APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
   \   000190                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000190   741A         MOV     A,#0x1a
   \   000192   12....       LCALL   ?XSTACK_DISP102_8
   \   000195   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000198   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   1063                                      ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
   1064                                                             1,
   1065                                                             0x0020,
   1066                                                             &addr,  pInMsg->endPoint,
   1067                                                              FALSE );
   \   00019B                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00019B   75..00       MOV     ?V4,#0x0
   \   00019E   78..         MOV     R0,#?V4
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A3   E5..         MOV     A,?V10
   \   0001A5   2416         ADD     A,#0x16
   \   0001A7   F582         MOV     DPL,A
   \   0001A9   E4           CLR     A
   \   0001AA   35..         ADDC    A,?V11
   \   0001AC   F583         MOV     DPH,A
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   F5..         MOV     ?V4,A
   \   0001B1   78..         MOV     R0,#?V4
   \   0001B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B6   7424         MOV     A,#0x24
   \   0001B8   12....       LCALL   ?XSTACK_DISP100_8
   \   0001BB   88..         MOV     ?V4,R0
   \   0001BD   89..         MOV     ?V5,R1
   \   0001BF   78..         MOV     R0,#?V4
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C4   75..20       MOV     ?V4,#0x20
   \   0001C7   75..00       MOV     ?V5,#0x0
   \   0001CA   78..         MOV     R0,#?V4
   \   0001CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CF   7420         MOV     A,#0x20
   \   0001D1   12....       LCALL   ?XSTACK_DISP100_8
   \   0001D4   88..         MOV     ?V4,R0
   \   0001D6   89..         MOV     ?V5,R1
   \   0001D8   78..         MOV     R0,#?V4
   \   0001DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DD   7901         MOV     R1,#0x1
   \   0001DF   7C..         MOV     R4,#dstAddr & 0xff
   \   0001E1   7D..         MOV     R5,#(dstAddr >> 8) & 0xff
   \   0001E3   7A21         MOV     R2,#0x21
   \   0001E5   7B00         MOV     R3,#0x0
   \   0001E7   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001EA   7408         MOV     A,#0x8
   \   0001EC   12....       LCALL   ?DEALLOC_XSTACK8
   1068                                      //zclZHAtest_Smoke_Type = *p;
   1069                                      //uint16 buf[3];
   1070                                      osal_memset(buf,0,sizeof(buf));
   \   0001EF                ; Setup parameters for call to function osal_memset
   \   0001EF   7C06         MOV     R4,#0x6
   \   0001F1   7D00         MOV     R5,#0x0
   \   0001F3   7900         MOV     R1,#0x0
   \   0001F5   EC           MOV     A,R4
   \   0001F6   12....       LCALL   ?XSTACK_DISP101_8
   \   0001F9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1071                                      buf[1] = *p;
   \   0001FC   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001FF   7408         MOV     A,#0x8
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   12....       LCALL   ?Subroutine5 & 0xFFFF
   1072                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_8:
   \   000207                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000207   7406         MOV     A,#0x6
   \   000209   12....       LCALL   ?XSTACK_DISP102_8
   \   00020C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00020F   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1073                                      //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zclZHAtest_Smoke_Type,0,false,0);
   1074                                      SetTempDeviceType(pInMsg->srcAddr.addr.shortAddr,*p);
                                             ^
Warning[Pe223]: function "SetTempDeviceType" declared implicitly

         {        uint16 supportOD = 0;
                         ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1038  Warning[Pe177]: 
          variable "supportOD" was declared but never referenced

                  uint8 sensorType = 0;
                        ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1039  Warning[Pe177]: 
          variable "sensorType" was declared but never referenced
   \   000212                ; Setup parameters for call to function SetTempDeviceType
   \   000212   85..82       MOV     DPL,?V2
   \   000215   85..83       MOV     DPH,?V3
   \   000218   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00021B   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00021E   12....       LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
   1075                                   break;
   \                     ??zha_project_ProcessInReadRspCmd_25:
   \   000221   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_23:
   \   000222   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000225   4003         JC      $+5
   \   000227   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   \   00022A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00022D   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_2`:
   \   000230   0100         DW        1
   \   000232   01           DB        1
   \   000233   ....         DW        ??zha_project_ProcessInReadRspCmd_25
   \   000235   ....         DW        ??zha_project_ProcessInReadRspCmd_24
   \   000237   ....         DW        ??zha_project_ProcessInReadRspCmd_26
   \                     ??zha_project_ProcessInReadRspCmd_26:
   \   000239                ; Setup parameters for call to function osal_memset
   \   000239   7C06         MOV     R4,#0x6
   \   00023B   7D00         MOV     R5,#0x0
   \   00023D   7900         MOV     R1,#0x0
   \   00023F   EC           MOV     A,R4
   \   000240   12....       LCALL   ?XSTACK_DISP101_8
   \   000243   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000246   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000249   7406         MOV     A,#0x6
   \   00024B   12....       LCALL   ?XSTACK_DISP0_8
   \   00024E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000251                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000251   7406         MOV     A,#0x6
   \   000253   12....       LCALL   ?XSTACK_DISP102_8
   \   000256   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000259   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   \   00025C   80C3         SJMP    ??zha_project_ProcessInReadRspCmd_25
   1076                                
   1077                                  default:
   1078                                  break;
   1079          
   1080                              }
   1081          
   1082                          }
   1083          
   1084                       }
   1085                
   1086                break;
   1087                case ZCL_CLUSTER_ID_SS_IAS_WD:
   1088                      {
   1089                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_9:
   \   00025E   7E00         MOV     R6,#0x0
   \   000260   800F         SJMP    ??zha_project_ProcessInReadRspCmd_27
   1090                          {
   1091                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1092                              j=statusRec->data;
   1093                              switch(statusRec->attrID)
   1094                              {
   1095                                  case COMMAND_SS_IAS_WD_START_WARNING:
   1096                                      //zclZHAtest_Warning = *j;
   1097                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1098                                      osal_memset(buf,0,sizeof(buf));
   1099                                      //buf[0] = zclZHAtest_Warning;
   1100                                      //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
   1101                                      break;
   1102                                  case COMMAND_SS_IAS_WD_SQUAWK:
   1103                                      //zclZHAtest_WD_SQUAWK = *j;
   1104                                      //uint16 buf[3];
   1105                                      osal_memset(buf,0,sizeof(buf));
   \                     ??zha_project_ProcessInReadRspCmd_28:
   \   000262                ; Setup parameters for call to function osal_memset
   \   000262   7C06         MOV     R4,#0x6
   \   000264   7D00         MOV     R5,#0x0
   \   000266   7900         MOV     R1,#0x0
   \   000268   740C         MOV     A,#0xc
   \   00026A   12....       LCALL   ?XSTACK_DISP101_8
   \   00026D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1106                                     // buf[1] = zclZHAtest_WD_SQUAWK;
   1107                                      //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
   1108                                      break;
   1109          
   1110                                  default:
   1111                                      break;
   1112          
   1113                              }
   \                     ??zha_project_ProcessInReadRspCmd_29:
   \   000270   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_27:
   \   000271   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000274   4003         JC      $+5
   \   000276   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   \   000279   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   F5..         MOV     ?V4,A
   \   00027F   A3           INC     DPTR
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F5..         MOV     ?V5,A
   \   000283   78..         MOV     R0,#?V4
   \   000285   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_3`:
   \   000288   0000         DW        0
   \   00028A   01           DB        1
   \   00028B   ....         DW        ??zha_project_ProcessInReadRspCmd_29
   \   00028D   ....         DW        ??zha_project_ProcessInReadRspCmd_28
   \   00028F   ....         DW        ??zha_project_ProcessInReadRspCmd_28
   1114          
   1115                          }
   1116          
   1117                       }        
   1118                  
   1119                  break;
   1120                
   1121                case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
   1122                 {
   1123                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_6:
   \   000291   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_30:
   \   000293   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000296   4003         JC      $+5
   \   000298   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1124                          {
   1125                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   00029B   12....       LCALL   ?Subroutine6 & 0xFFFF
   1126                              p=(uint16 *)statusRec->data;
   1127                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_14:
   \   00029E   7013         JNZ     ??zha_project_ProcessInReadRspCmd_31
   1128                              {
   1129                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1130                                      //zclZHAtest_Temperature_Value = *p;
   1131                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1132                                      osal_memset(buf,0,sizeof(buf));
   \   0002A0                ; Setup parameters for call to function osal_memset
   \   0002A0   7C06         MOV     R4,#0x6
   \   0002A2   7D00         MOV     R5,#0x0
   \   0002A4   7900         MOV     R1,#0x0
   \   0002A6   AA..         MOV     R2,?XSP + 0
   \   0002A8   AB..         MOV     R3,?XSP + 1
   \   0002AA   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1133                                      buf[0] = *p;
   \   0002AD   12....       LCALL   ?Subroutine2 & 0xFFFF
   1134                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_72:
   \   0002B0   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1135                                      
   1136                                  break;
   1137                                  default:
   1138                                  break;
   1139          
   1140                              }
   1141          
   1142                          }
   \                     ??zha_project_ProcessInReadRspCmd_31:
   \   0002B3   0E           INC     R6
   \   0002B4   80DD         SJMP    ??zha_project_ProcessInReadRspCmd_30
   1143          
   1144                       }
   1145                   break;
   1146                  case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1147                     {
   1148                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_3:
   \   0002B6   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_32:
   \   0002B8   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0002BB   5070         JNC     ??zha_project_ProcessInReadRspCmd_10
   1149                          {
   1150                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0002BD   12....       LCALL   ?Subroutine6 & 0xFFFF
   1151                              j=statusRec->data;
   1152                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1153                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_15:
   \   0002C0   7024         JNZ     ??zha_project_ProcessInReadRspCmd_33
   1154                              {
   1155                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1156                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1157                                      osal_memset(buf,0,sizeof(buf));
   \   0002C2                ; Setup parameters for call to function osal_memset
   \   0002C2   7C06         MOV     R4,#0x6
   \   0002C4   7D00         MOV     R5,#0x0
   \   0002C6   7900         MOV     R1,#0x0
   \   0002C8   AA..         MOV     R2,?XSP + 0
   \   0002CA   AB..         MOV     R3,?XSP + 1
   \   0002CC   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1158                                      //zclZHAtest_Level_to_Level = *j;
   1159                                      buf[1] = *j;
   \   0002CF   85..82       MOV     DPL,?V2
   \   0002D2   85..83       MOV     DPH,?V3
   \   0002D5   E0           MOVX    A,@DPTR
   \   0002D6   F8           MOV     R0,A
   \   0002D7   7402         MOV     A,#0x2
   \   0002D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DC   E8           MOV     A,R0
   \   0002DD   F0           MOVX    @DPTR,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   E4           CLR     A
   \   0002E0   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   1160                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_77:
   \   0002E3   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1161                                  break;
   1162                                  default:
   1163                                  break;
   1164          
   1165                              }
   1166          
   1167                          }
   \                     ??zha_project_ProcessInReadRspCmd_33:
   \   0002E6   0E           INC     R6
   \   0002E7   80CF         SJMP    ??zha_project_ProcessInReadRspCmd_32
   1168          
   1169                       }
   1170              
   1171                  break;
   1172                case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
   1173                     {
   1174                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_7:
   \   0002E9   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_34:
   \   0002EB   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0002EE   503D         JNC     ??zha_project_ProcessInReadRspCmd_10
   1175                          {
   1176                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0002F0   12....       LCALL   ?Subroutine6 & 0xFFFF
   1177                              p=(uint16 *)statusRec->data;
   1178                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1179                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_16:
   \   0002F3   7013         JNZ     ??zha_project_ProcessInReadRspCmd_35
   1180                              {
   1181                                  case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
   1182                                      //zclZHAtest_Humidity_Value = *p;
   1183                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1184                                      osal_memset(buf,0,sizeof(buf));
   \   0002F5                ; Setup parameters for call to function osal_memset
   \   0002F5   7C06         MOV     R4,#0x6
   \   0002F7   7D00         MOV     R5,#0x0
   \   0002F9   7900         MOV     R1,#0x0
   \   0002FB   AA..         MOV     R2,?XSP + 0
   \   0002FD   AB..         MOV     R3,?XSP + 1
   \   0002FF   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1185                                      buf[0] = *p;
   \   000302   12....       LCALL   ?Subroutine2 & 0xFFFF
   1186                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_73:
   \   000305   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1187                                      
   1188                                  break;
   1189                                  default:
   1190                                  break;
   1191          
   1192                              }
   1193          
   1194                          }
   \                     ??zha_project_ProcessInReadRspCmd_35:
   \   000308   0E           INC     R6
   \   000309   80E0         SJMP    ??zha_project_ProcessInReadRspCmd_34
   1195          
   1196                       }     
   1197                  
   1198                  
   1199                  break;   
   1200                case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
   1201                     {
   1202                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_5:
   \   00030B   7E00         MOV     R6,#0x0
   \   00030D   8019         SJMP    ??zha_project_ProcessInReadRspCmd_36
   1203                          {
   1204                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReadRspCmd_37:
   \   00030F   12....       LCALL   ?Subroutine6 & 0xFFFF
   1205                              p=(uint16 *)statusRec->data;
   1206                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1207                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_17:
   \   000312   7013         JNZ     ??zha_project_ProcessInReadRspCmd_38
   1208                              {
   1209                                  case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
   1210                                      //zclZHAtest_Illumiance_Value = *p;
   1211                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1212                                      osal_memset(buf,0,sizeof(buf));
   \   000314                ; Setup parameters for call to function osal_memset
   \   000314   7C06         MOV     R4,#0x6
   \   000316   7D00         MOV     R5,#0x0
   \   000318   7900         MOV     R1,#0x0
   \   00031A   AA..         MOV     R2,?XSP + 0
   \   00031C   AB..         MOV     R3,?XSP + 1
   \   00031E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1213                                      buf[0] = *p;
   \   000321   12....       LCALL   ?Subroutine2 & 0xFFFF
   1214                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly

      uint8 i,k;
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",917  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \                     ??CrossCallReturnLabel_74:
   \   000324   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1215                                      
   1216                                  break;
   1217                                  default:
   1218                                  break;
   1219          
   1220                              }
   1221          
   1222                          }
   \                     ??zha_project_ProcessInReadRspCmd_38:
   \   000327   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_36:
   \   000328   12....       LCALL   ?Subroutine8 & 0xFFFF
   1223          
   1224                       }          
   1225                  
   1226                  
   1227                  break;
   1228                default:
   1229                  break;
   1230              //ReadRspStatus.attrID = readRspCmd->attrList;
   1231              // Notify the originator of the results of the original read attributes 
   1232              // attempt and, for each successfull request, the value of the requested 
   1233              // attribute
   1234            }
   \                     ??CrossCallReturnLabel_27:
   \   00032B   40E2         JC      ??zha_project_ProcessInReadRspCmd_37
   1235          
   1236            
   1237            
   1238            return TRUE; 
   \                     ??zha_project_ProcessInReadRspCmd_10:
   \   00032D   7901         MOV     R1,#0x1
   \   00032F   742B         MOV     A,#0x2b
   \   000331   12....       LCALL   ?DEALLOC_XSTACK8
   \   000334   7F0C         MOV     R7,#0xc
   \   000336   02....       LJMP    ?BANKED_LEAVE_XDATA
   1239          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   A882         MOV     R0,DPL
   \   000005   A983         MOV     R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EE           MOV     A,R6
   \   000001   75F006       MOV     B,#0x6
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0
   \   00000A   28           ADD     A,R0
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V1
   \   00000F   39           ADDC    A,R1
   \   000010   F583         MOV     DPH,A
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   7D00         MOV     R5,#0x0
   \   000004   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   F5..         MOV     ?V4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V5,A
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   A882         MOV     R0,DPL
   \   000005   A983         MOV     R1,DPH
   \   000007                REQUIRE ??Subroutine25_0
   \   000007                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V3,A
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   EE           MOV     A,R6
   \   000009   C3           CLR     C
   \   00000A   98           SUBB    A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000009                REQUIRE ??Subroutine26_0
   \   000009                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine27_0
   \   000004                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus3
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006                REQUIRE ??Subroutine28_0
   \   000006                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006                REQUIRE ??Subroutine29_0
   \   000006                ; // Fall through to label ??Subroutine29_0
   1240          #endif // ZCL_READ
   1241          
   1242          #ifdef ZCL_WRITE
   1243          /*********************************************************************
   1244           * @fn      zha_project_ProcessInWriteRspCmd
   1245           *
   1246           * @brief   Process the "Profile" Write Response Command
   1247           *
   1248           * @param   pInMsg - incoming message to process
   1249           *
   1250           * @return  none
   1251           */
   1252          static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1253          {
   1254            zclWriteRspCmd_t *writeRspCmd;
   1255            uint8 i;
   1256          
   1257            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1258            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1259            {
   1260              // Notify the device of the results of the its original write attributes
   1261              // command.
   1262            }
   1263          
   1264            return ( TRUE );
   1265          }
   1266          #endif // ZCL_WRITE
   1267          
   1268          /*********************************************************************
   1269           * @fn      zha_project_ProcessInDefaultRspCmd
   1270           *
   1271           * @brief   Process the "Profile" Default Response Command
   1272           *
   1273           * @param   pInMsg - incoming message to process
   1274           *
   1275           * @return  none
   1276           */
   1277          static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1278          {
   1279            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1280          
   1281            // Device is notified of the Default Response command.
   1282            (void)pInMsg;
   1283          
   1284            return ( TRUE );
   1285          }
   1286          
   1287          #ifdef ZCL_DISCOVER
   1288          /*********************************************************************
   1289           * @fn      zha_project_ProcessInDiscCmdsRspCmd
   1290           *
   1291           * @brief   Process the Discover Commands Response Command
   1292           *
   1293           * @param   pInMsg - incoming message to process
   1294           *
   1295           * @return  none
   1296           */
   1297          static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1298          {
   1299            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1300            uint8 i;
   1301          
   1302            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1303            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1304            {
   1305              // Device is notified of the result of its attribute discovery command.
   1306            }
   1307          
   1308            return ( TRUE );
   1309          }
   1310          
   1311          /*********************************************************************
   1312           * @fn      zha_project_ProcessInDiscAttrsRspCmd
   1313           *
   1314           * @brief   Process the "Profile" Discover Attributes Response Command
   1315           *
   1316           * @param   pInMsg - incoming message to process
   1317           *
   1318           * @return  none
   1319           */
   1320          static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1321          {
   1322            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1323            uint8 i;
   1324          
   1325            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1326            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1327            {
   1328              // Device is notified of the result of its attribute discovery command.
   1329            }
   1330          
   1331            return ( TRUE );
   1332          }
   1333          
   1334          /*********************************************************************
   1335           * @fn      zha_project_ProcessInDiscAttrsExtRspCmd
   1336           *
   1337           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1338           *
   1339           * @param   pInMsg - incoming message to process
   1340           *
   1341           * @return  none
   1342           */
   1343          static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1344          {
   1345            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1346            uint8 i;
   1347          
   1348            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1349            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1350            {
   1351              // Device is notified of the result of its attribute discovery command.
   1352            }
   1353          
   1354            return ( TRUE );
   1355          }
   1356          #endif // ZCL_DISCOVER
   1357          
   1358          #if ZCL_EZMODE
   1359          /*********************************************************************
   1360           * @fn      zha_project_ProcessZDOMsgs
   1361           *
   1362           * @brief   Called when this node receives a ZDO/ZDP response.
   1363           *
   1364           * @param   none
   1365           *
   1366           * @return  status
   1367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1368          static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   \                     zha_project_ProcessZDOMsgs:
   1369          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1370            zclEZMode_ActionData_t data;
   1371            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1372          
   1373            // Let EZ-Mode know of the Simple Descriptor Response
   1374              ZDO_DeviceAnnce_t devAnnce;
   1375              zAddrType_t addr;
   1376              afAddrType_t destAddr;
   1377              uint8 *pData;
   1378              uint8 address[8];
   1379              uint8 i;
   1380              uint8 pValue[Z_EXTADDR_LEN];
   1381              uint8 pValue1[Z_EXTADDR_LEN];
   1382              switch ( pMsg->clusterID )
   \   00000E   EA           MOV     A,R2
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V1,A
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessZDOMsgs>_0`:
   \   000024   0000         DW        0
   \   000026   0600         DW        6
   \   000028   1300         DW        19
   \   00002A   ....         DW        ??zha_project_ProcessZDOMsgs_0
   \   00002C   0480         DW        32772
   \   00002E   ....         DW        ??zha_project_ProcessZDOMsgs_1
   \   000030   0580         DW        32773
   \   000032   ....         DW        ??zha_project_ProcessZDOMsgs_2
   \   000034   0680         DW        32774
   \   000036   ....         DW        ??zha_project_ProcessZDOMsgs_3
   \   000038   2080         DW        32800
   \   00003A   ....         DW        ??zha_project_ProcessZDOMsgs_4
   \   00003C   2180         DW        32801
   \   00003E   ....         DW        ??zha_project_ProcessZDOMsgs_5
   \   000040   ....         DW        ??zha_project_ProcessZDOMsgs_6
   1383              {
   1384                  case End_Device_Bind_rsp:
   1385                  {
   1386                      if ( ZDO_ParseBindRsp( pMsg ) == ZSuccess )
   \                     ??zha_project_ProcessZDOMsgs_4:
   \   000042   EA           MOV     A,R2
   \   000043   2413         ADD     A,#0x13
   \   000045   F582         MOV     DPL,A
   \   000047   E4           CLR     A
   \   000048   35..         ADDC    A,?V3
   \   00004A   F583         MOV     DPH,A
   \   00004C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   7004         JNZ     ??zha_project_ProcessZDOMsgs_7
   1387                      {
   1388          
   1389                      // Light LED
   1390                      //HalUARTWrite(HAL_UART_PORT_0,"Bind established",sizeof("Bind established"));
   1391                          HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000052                ; Setup parameters for call to function HalLedSet
   \   000052   7A01         MOV     R2,#0x1
   \   000054   8002         SJMP    ??zha_project_ProcessZDOMsgs_8
   1392                      }
   1393                      #if defined( BLINK_LEDS )
   1394                      else
   1395                      {
   1396                      // Flash LED to show failure
   1397                          HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??zha_project_ProcessZDOMsgs_7:
   \   000056                ; Setup parameters for call to function HalLedSet
   \   000056   7A04         MOV     R2,#0x4
   \                     ??zha_project_ProcessZDOMsgs_8:
   \   000058   7908         MOV     R1,#0x8
   \   00005A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00005D   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   1398                      }
   1399                      #endif
   1400                      break;
   1401                  }
   1402                  case Match_Desc_rsp:
   1403                  {
   1404                      ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   \                     ??zha_project_ProcessZDOMsgs_3:
   \   000060                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000060   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000063   8A..         MOV     ?V0,R2
   \   000065   8B..         MOV     ?V1,R3
   \   000067   AE..         MOV     R6,?V0
   \   000069   AF..         MOV     R7,?V1
   1405                      if ( pRsp )
   \   00006B   EE           MOV     A,R6
   \   00006C   4F           ORL     A,R7
   \   00006D   7003         JNZ     $+5
   \   00006F   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   1406                      {
   1407                          if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   E0           MOVX    A,@DPTR
   \   000077   702E         JNZ     ??zha_project_ProcessZDOMsgs_9
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   6028         JZ      ??zha_project_ProcessZDOMsgs_9
   1408                          {
   1409                              zclZHAtest_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00007F   90....       MOV     DPTR,#zclZHAtest_DstAddr + 8
   \   000082   7402         MOV     A,#0x2
   \   000084   F0           MOVX    @DPTR,A
   1410                              zclZHAtest_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00008D   90....       MOV     DPTR,#zclZHAtest_DstAddr
   \   000090   12....       LCALL   ?Subroutine5 & 0xFFFF
   1411                              // Take the first endpoint, Can be changed to search through endpoints
   1412                              zclZHAtest_DstAddr.endPoint = pRsp->epList[0];
   \                     ??CrossCallReturnLabel_10:
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   90....       MOV     DPTR,#zclZHAtest_DstAddr + 9
   \   00009F   F0           MOVX    @DPTR,A
   1413          
   1414                              // Light LED
   1415                              HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   0000A0                ; Setup parameters for call to function HalLedSet
   \   0000A0   7A01         MOV     R2,#0x1
   \   0000A2   7908         MOV     R1,#0x8
   \   0000A4   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   1416                          }
   1417                          osal_mem_free( pRsp );
   \                     ??zha_project_ProcessZDOMsgs_9:
   \   0000A7                ; Setup parameters for call to function osal_mem_free
   \   0000A7   02....       LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
   1418                      }
   1419                      break;
   1420                  }
   1421                  case Device_annce:
   1422                  { 
   1423                      uint8 k=0;
   1424                      ZDO_ParseDeviceAnnce( pMsg, &devAnnce );
   \                     ??zha_project_ProcessZDOMsgs_0:
   \   0000AA                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   0000AA   AC..         MOV     R4,?XSP + 0
   \   0000AC   AD..         MOV     R5,?XSP + 1
   \   0000AE   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1425                      
   1426                      
   1427                      for(i=0;i<6;i++)
   \   0000B1   7E00         MOV     R6,#0x0
   1428                      {
   1429          
   1430                          if(AssociatedDevList[i].shortAddr!=devAnnce.nwkAddr)
   \                     ??zha_project_ProcessZDOMsgs_11:
   \   0000B3   EE           MOV     A,R6
   \   0000B4   75F01C       MOV     B,#0x1c
   \   0000B7   A4           MUL     AB
   \   0000B8   F8           MOV     R0,A
   \   0000B9   A9F0         MOV     R1,B
   \   0000BB   74..         MOV     A,#AssociatedDevList & 0xff
   \   0000BD   28           ADD     A,R0
   \   0000BE   F582         MOV     DPL,A
   \   0000C0   74..         MOV     A,#(AssociatedDevList >> 8) & 0xff
   \   0000C2   39           ADDC    A,R1
   \   0000C3   F583         MOV     DPH,A
   \   0000C5   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000C8   85..82       MOV     DPL,?XSP + 0
   \   0000CB   85..83       MOV     DPH,?XSP + 1
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   68           XRL     A,R0
   \   0000D0   7003         JNZ     ??zha_project_ProcessZDOMsgs_12
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   69           XRL     A,R1
   \                     ??zha_project_ProcessZDOMsgs_12:
   \   0000D5   6015         JZ      ??zha_project_ProcessZDOMsgs_13
   1431                          {
   1432                              SetTempDeviceSA(devAnnce.nwkAddr,devAnnce.extAddr);
                                     ^
Warning[Pe223]: function "SetTempDeviceSA" declared implicitly

              uint8 k=0;
                    ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1423  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \   0000D7                ; Setup parameters for call to function SetTempDeviceSA
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   AC82         MOV     R4,DPL
   \   0000DE   AD83         MOV     R5,DPH
   \   0000E0   85..82       MOV     DPL,?XSP + 0
   \   0000E3   85..83       MOV     DPH,?XSP + 1
   \   0000E6   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   1433                          }
   1434                      }
   \                     ??CrossCallReturnLabel_79:
   \   0000E9   12....       LCALL   `??SetTempDeviceSA::?relay`; Banked call to: SetTempDeviceSA
   \                     ??zha_project_ProcessZDOMsgs_13:
   \   0000EC   0E           INC     R6
   \   0000ED   EE           MOV     A,R6
   \   0000EE   C3           CLR     C
   \   0000EF   9406         SUBB    A,#0x6
   \   0000F1   40C0         JC      ??zha_project_ProcessZDOMsgs_11
   1435                      // set simple descriptor query event
   1436                      //DelayMS(50);
   1437                      simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000F3   90....       MOV     DPTR,#simpleDescReqAddr + 8
   \   0000F6   7402         MOV     A,#0x2
   \   0000F8   F0           MOVX    @DPTR,A
   1438                      simpleDescReqAddr.addr.shortAddr = devAnnce.nwkAddr;
   \   0000F9   85..82       MOV     DPL,?XSP + 0
   \   0000FC   85..83       MOV     DPH,?XSP + 1
   \   0000FF   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000102   90....       MOV     DPTR,#simpleDescReqAddr
   \   000105   12....       LCALL   ?Subroutine5 & 0xFFFF
   1439                      osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT ,100);
   \                     ??CrossCallReturnLabel_11:
   \   000108                ; Setup parameters for call to function osal_start_timerEx
   \   000108   90....       MOV     DPTR,#__Constant_64
   \   00010B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00010E   7A04         MOV     R2,#0x4
   \   000110   7B00         MOV     R3,#0x0
   \   000112   90....       MOV     DPTR,#zha_project_TaskID
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F9           MOV     R1,A
   \   000117   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00011A   7404         MOV     A,#0x4
   \   00011C   12....       LCALL   ?DEALLOC_XSTACK8
   1440                      //osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_EVT,200);
   1441                      osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_POWER_EVT,300);
   \   00011F                ; Setup parameters for call to function osal_start_timerEx
   \   00011F   90....       MOV     DPTR,#__Constant_12c
   \   000122   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000125   7A80         MOV     R2,#-0x80
   \   000127   7B00         MOV     R3,#0x0
   \   000129   90....       MOV     DPTR,#zha_project_TaskID
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F9           MOV     R1,A
   \   00012E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000131   7404         MOV     A,#0x4
   \   000133   12....       LCALL   ?DEALLOC_XSTACK8
   1442                      osal_start_timerEx( zha_project_TaskID, ZHA_ACTIVE_EP_EVT,500);
   \   000136                ; Setup parameters for call to function osal_start_timerEx
   \   000136   90....       MOV     DPTR,#__Constant_1f4
   \   000139   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00013C   7A08         MOV     R2,#0x8
   \   00013E   7B00         MOV     R3,#0x0
   \   000140   90....       MOV     DPTR,#zha_project_TaskID
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F9           MOV     R1,A
   \   000145   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000148   7404         MOV     A,#0x4
   \   00014A   12....       LCALL   ?DEALLOC_XSTACK8
   1443                      osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT,1000);
   \   00014D                ; Setup parameters for call to function osal_start_timerEx
   \   00014D   90....       MOV     DPTR,#__Constant_3e8
   \   000150   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000153   7A10         MOV     R2,#0x10
   \   000155   7B00         MOV     R3,#0x0
   \   000157   90....       MOV     DPTR,#zha_project_TaskID
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F9           MOV     R1,A
   \   00015C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00015F   7404         MOV     A,#0x4
   \   000161   12....       LCALL   ?DEALLOC_XSTACK8
   1444                      //osal_set_event( zclZHAtest_TaskID, SIMPLE_DESC_QUERY_EVT );
   1445                      break;
   \   000164   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   1446                  }
   1447          
   1448                  case Active_EP_rsp:
   1449                  {
   1450                      ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   \                     ??zha_project_ProcessZDOMsgs_2:
   \   000167                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000167   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00016A   8A..         MOV     ?V0,R2
   \   00016C   8B..         MOV     ?V1,R3
   \   00016E   AE..         MOV     R6,?V0
   \   000170   AF..         MOV     R7,?V1
   1451                      *zclZHAtest_ActiveEP = *pRsp;
   \   000172   90....       MOV     DPTR,#zclZHAtest_ActiveEP
   \   000175   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000178   8B83         MOV     DPH,R3
   \   00017A   8A82         MOV     DPL,R2
   \   00017C   7404         MOV     A,#0x4
   \   00017E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1452                      osal_memset(ep,0,sizeof(ep));
   \   000181                ; Setup parameters for call to function osal_memset
   \   000181   7C05         MOV     R4,#0x5
   \   000183   FD           MOV     R5,A
   \   000184   F9           MOV     R1,A
   \   000185   7A..         MOV     R2,#ep & 0xff
   \   000187   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   000189   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1453                      osal_memcpy(ep,pRsp->epList,pRsp->cnt);
   \   00018C                ; Setup parameters for call to function osal_memcpy
   \   00018C   EE           MOV     A,R6
   \   00018D   2404         ADD     A,#0x4
   \   00018F   F5..         MOV     ?V0,A
   \   000191   E4           CLR     A
   \   000192   3F           ADDC    A,R7
   \   000193   F5..         MOV     ?V1,A
   \   000195   75..00       MOV     ?V2,#0x0
   \   000198   78..         MOV     R0,#?V0
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00019D   8E82         MOV     DPL,R6
   \   00019F   8F83         MOV     DPH,R7
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   FC           MOV     R4,A
   \   0001A6   7D00         MOV     R5,#0x0
   \   0001A8   7A..         MOV     R2,#ep & 0xff
   \   0001AA   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   0001AC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001AF   7403         MOV     A,#0x3
   \   0001B1   12....       LCALL   ?DEALLOC_XSTACK8
   1454                      simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0001B4   90....       MOV     DPTR,#simpleDescReqAddr + 8
   \   0001B7   7402         MOV     A,#0x2
   \   0001B9   F0           MOVX    @DPTR,A
   1455                      simpleDescReqAddr.addr.shortAddr = pRsp->nwkAddr;
   \   0001BA   8E82         MOV     DPL,R6
   \   0001BC   8F83         MOV     DPH,R7
   \   0001BE   A3           INC     DPTR
   \   0001BF   A882         MOV     R0,DPL
   \   0001C1   A983         MOV     R1,DPH
   \   0001C3   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0001C6   90....       MOV     DPTR,#simpleDescReqAddr
   \   0001C9   EA           MOV     A,R2
   \   0001CA   F0           MOVX    @DPTR,A
   \   0001CB   A3           INC     DPTR
   \   0001CC   EB           MOV     A,R3
   \   0001CD   F0           MOVX    @DPTR,A
   1456                      //HalUARTWrite(HAL_UART_PORT_0,ep,pRsp->cnt);
   1457                      //zclZHAtest_ActiveEP.status = pRsp->status;
   1458                      //zclZHAtest_ActiveEP.nwkAddr= pRsp->nwkAddr;
   1459                      //osal_memcpy(zclZHAtest_ActiveEP.epList,pRsp->epList,sizeof(uint8));
   1460                      //zclZHAtest_ActiveEP.epList[] = pRsp->epList[];
   1461                      //DelayMS(50);
   1462                      SetTempDeviceEP(pRsp->nwkAddr , ep );
                             ^
Warning[Pe223]: function "SetTempDeviceEP" declared implicitly
   \   0001CE                ; Setup parameters for call to function SetTempDeviceEP
   \   0001CE   7C..         MOV     R4,#ep & 0xff
   \   0001D0   7D..         MOV     R5,#(ep >> 8) & 0xff
   \   0001D2   8882         MOV     DPL,R0
   \   0001D4   8983         MOV     DPH,R1
   \   0001D6   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0001D9   12....       LCALL   `??SetTempDeviceEP::?relay`; Banked call to: SetTempDeviceEP
   1463                      //osal_set_event( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT );
   1464                      osal_mem_free( pRsp ); 
   \   0001DC                ; Setup parameters for call to function osal_mem_free
   \   0001DC   02....       LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
   1465                      break;
   1466                  }
   1467                  case Simple_Desc_rsp:
   1468                  {
   1469                      uint8 k=0;
   1470                      ZDO_SimpleDescRsp_t *pSimpleDescRsp;   // pointer to received simple desc response
   1471                      pSimpleDescRsp = (ZDO_SimpleDescRsp_t *)osal_mem_alloc( sizeof( ZDO_SimpleDescRsp_t ) );
   \                     ??zha_project_ProcessZDOMsgs_1:
   \   0001DF                ; Setup parameters for call to function osal_mem_alloc
   \   0001DF   7A0F         MOV     R2,#0xf
   \   0001E1   7B00         MOV     R3,#0x0
   \   0001E3   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001E6   8A..         MOV     ?V0,R2
   \   0001E8   8B..         MOV     ?V1,R3
   \   0001EA   AE..         MOV     R6,?V0
   \   0001EC   AF..         MOV     R7,?V1
   1472          
   1473          
   1474                      if(pSimpleDescRsp)
   \   0001EE   EE           MOV     A,R6
   \   0001EF   4F           ORL     A,R7
   \   0001F0   7003         JNZ     $+5
   \   0001F2   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   1475                      {
   1476                          pSimpleDescRsp->simpleDesc.pAppInClusterList = NULL;
   \   0001F5   EE           MOV     A,R6
   \   0001F6   240A         ADD     A,#0xa
   \   0001F8   F5..         MOV     ?V4,A
   \   0001FA   E4           CLR     A
   \   0001FB   3F           ADDC    A,R7
   \   0001FC   F5..         MOV     ?V5,A
   \   0001FE   85..82       MOV     DPL,?V4
   \   000201   F583         MOV     DPH,A
   \   000203   E4           CLR     A
   \   000204   F0           MOVX    @DPTR,A
   \   000205   A3           INC     DPTR
   \   000206   F0           MOVX    @DPTR,A
   1477                          pSimpleDescRsp->simpleDesc.pAppOutClusterList = NULL;
   \   000207   EE           MOV     A,R6
   \   000208   240D         ADD     A,#0xd
   \   00020A   F5..         MOV     ?V0,A
   \   00020C   E4           CLR     A
   \   00020D   3F           ADDC    A,R7
   \   00020E   F5..         MOV     ?V1,A
   \   000210   85..82       MOV     DPL,?V0
   \   000213   F583         MOV     DPH,A
   \   000215   E4           CLR     A
   \   000216   F0           MOVX    @DPTR,A
   \   000217   A3           INC     DPTR
   \   000218   F0           MOVX    @DPTR,A
   1478          
   1479                          ZDO_ParseSimpleDescRsp( pMsg, pSimpleDescRsp );
   \   000219                ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
   \   000219   EE           MOV     A,R6
   \   00021A   FC           MOV     R4,A
   \   00021B   EF           MOV     A,R7
   \   00021C   FD           MOV     R5,A
   \   00021D   AA..         MOV     R2,?V2
   \   00021F   AB..         MOV     R3,?V3
   \   000221   12....       LCALL   `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
   1480                          if(pSimpleDescRsp->simpleDesc.AppDeviceId ==0x0402)
   \   000224   8E82         MOV     DPL,R6
   \   000226   8F83         MOV     DPH,R7
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000231   8E82         MOV     DPL,R6
   \   000233   8F83         MOV     DPH,R7
   \   000235   A3           INC     DPTR
   \   000236   A882         MOV     R0,DPL
   \   000238   A983         MOV     R1,DPH
   \   00023A   7402         MOV     A,#0x2
   \   00023C   6C           XRL     A,R4
   \   00023D   7003         JNZ     ??zha_project_ProcessZDOMsgs_14
   \   00023F   7404         MOV     A,#0x4
   \   000241   6D           XRL     A,R5
   \                     ??zha_project_ProcessZDOMsgs_14:
   \   000242   7071         JNZ     ??zha_project_ProcessZDOMsgs_15
   1481                          {
   1482                              afAddrType_t  dscReqAddr;
   1483                              dscReqAddr.addrMode=afAddr16Bit;
   \   000244   7413         MOV     A,#0x13
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   7402         MOV     A,#0x2
   \   00024B   F0           MOVX    @DPTR,A
   1484                              dscReqAddr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
   \   00024C   8882         MOV     DPL,R0
   \   00024E   8983         MOV     DPH,R1
   \   000250   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000253   740B         MOV     A,#0xb
   \   000255   12....       LCALL   ?XSTACK_DISP0_8
   \   000258   12....       LCALL   ?Subroutine5 & 0xFFFF
   1485                              dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_12:
   \   00025B   7414         MOV     A,#0x14
   \   00025D   12....       LCALL   ?XSTACK_DISP0_8
   \   000260   7401         MOV     A,#0x1
   \   000262   F0           MOVX    @DPTR,A
   1486                              zclReadCmd_t BasicAttrsList;
   1487                              BasicAttrsList.numAttr = 1;
   \   000263   7417         MOV     A,#0x17
   \   000265   12....       LCALL   ?XSTACK_DISP0_8
   \   000268   7401         MOV     A,#0x1
   \   00026A   F0           MOVX    @DPTR,A
   1488                              BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
   \   00026B   7418         MOV     A,#0x18
   \   00026D   12....       LCALL   ?XSTACK_DISP0_8
   \   000270   7401         MOV     A,#0x1
   \   000272   12....       LCALL   ?Subroutine16 & 0xFFFF
   1489                              zcl_SendRead( 1, &dscReqAddr,
   1490                              ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
   1491                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
   \                     ??CrossCallReturnLabel_47:
   \   000275                ; Setup parameters for call to function zcl_SendRead
   \   000275   F5..         MOV     ?V2,A
   \   000277   78..         MOV     R0,#?V2
   \   000279   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00027C   78..         MOV     R0,#?V2
   \   00027E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000281   78..         MOV     R0,#?V2
   \   000283   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000286   741A         MOV     A,#0x1a
   \   000288   12....       LCALL   ?XSTACK_DISP100_8
   \   00028B   88..         MOV     ?V2,R0
   \   00028D   89..         MOV     ?V3,R1
   \   00028F   78..         MOV     R0,#?V2
   \   000291   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000294   7C00         MOV     R4,#0x0
   \   000296   7D05         MOV     R5,#0x5
   \   000298   7410         MOV     A,#0x10
   \   00029A   12....       LCALL   ?XSTACK_DISP101_8
   \   00029D   7901         MOV     R1,#0x1
   \   00029F   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   0002A2   7405         MOV     A,#0x5
   \   0002A4   12....       LCALL   ?DEALLOC_XSTACK8
   1492                              osal_set_event( zha_project_TaskID, ZONE_TYPE_EVT );
   \   0002A7                ; Setup parameters for call to function osal_set_event
   \   0002A7   7A20         MOV     R2,#0x20
   \   0002A9   7B00         MOV     R3,#0x0
   \   0002AB   90....       MOV     DPTR,#zha_project_TaskID
   \   0002AE   E0           MOVX    A,@DPTR
   \   0002AF   F9           MOV     R1,A
   \   0002B0   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0002B3   8006         SJMP    ??zha_project_ProcessZDOMsgs_16
   1493                              //DelayMS(100);
   1494                              //zclSampleCIE_WriteIAS_CIE_Address(&destAddr); 
   1495                          }
   1496                          else
   1497                              SetTempDeviceType(pSimpleDescRsp->nwkAddr,pSimpleDescRsp->simpleDesc.AppDeviceId);
                                     ^
Warning[Pe223]: function "SetTempDeviceType" declared implicitly

              uint8 k=0;
                    ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1469  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \                     ??zha_project_ProcessZDOMsgs_15:
   \   0002B5                ; Setup parameters for call to function SetTempDeviceType
   \   0002B5   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0002B8   12....       LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
   1498                          //osal_mem_free( pSimpleDescRsp );
   1499                          // free memory for InClusterList
   1500                          if (pSimpleDescRsp->simpleDesc.pAppInClusterList)
   \                     ??zha_project_ProcessZDOMsgs_16:
   \   0002BB   85..82       MOV     DPL,?V4
   \   0002BE   85..83       MOV     DPH,?V5
   \   0002C1   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0002C4   6003         JZ      ??zha_project_ProcessZDOMsgs_17
   1501                          {
   1502                              osal_mem_free(pSimpleDescRsp->simpleDesc.pAppInClusterList);
   \   0002C6                ; Setup parameters for call to function osal_mem_free
   \   0002C6   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1503                          }
   1504          
   1505                          // free memory for OutClusterList
   1506                          if (pSimpleDescRsp->simpleDesc.pAppOutClusterList)
   \                     ??zha_project_ProcessZDOMsgs_17:
   \   0002C9   85..82       MOV     DPL,?V0
   \   0002CC   85..83       MOV     DPH,?V1
   \   0002CF   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0002D2   6003         JZ      ??zha_project_ProcessZDOMsgs_10
   1507                          {
   1508                              osal_mem_free(pSimpleDescRsp->simpleDesc.pAppOutClusterList);
   \   0002D4                ; Setup parameters for call to function osal_mem_free
   \   0002D4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1509                          }
   1510          
   1511                          osal_mem_free( pSimpleDescRsp );
   \                     ??zha_project_ProcessZDOMsgs_10:
   \   0002D7                ; Setup parameters for call to function osal_mem_free
   \   0002D7   EE           MOV     A,R6
   \   0002D8   FA           MOV     R2,A
   \   0002D9   EF           MOV     A,R7
   \   0002DA   FB           MOV     R3,A
   \   0002DB   8003         SJMP    ??zha_project_ProcessZDOMsgs_18
   1512                      }
   1513                      break;
   1514                  }
   1515          
   1516                  case Bind_rsp:
   1517                      ZDO_MgmtBindRsp_t *Bind_pRsp =ZDO_ParseMgmtBindRsp( pMsg ) ;
                             ^
Warning[Pe1072]: a declaration cannot have a label
   \                     ??zha_project_ProcessZDOMsgs_5:
   \   0002DD                ; Setup parameters for call to function ZDO_ParseMgmtBindRsp
   \   0002DD   12....       LCALL   `??ZDO_ParseMgmtBindRsp::?relay`; Banked call to: ZDO_ParseMgmtBindRsp
   1518                      afAddrType_t  dscReqAddr;
                                           ^
Warning[Pe550]: variable "dscReqAddr" was set but never used

      switch ( pMsg->clusterID )
      ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1382  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "Bind_pRsp" (declared at line 1517 of "C:\Texas
                      Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")

    zclEZMode_ActionData_t data;
                           ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1370  Warning[Pe177]: 
          variable "data" was declared but never referenced

    ZDO_MatchDescRsp_t *pMatchDescRsp;
                        ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1371  Warning[Pe177]: 
          variable "pMatchDescRsp" was declared but never referenced

      zAddrType_t addr;
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1375  Warning[Pe177]: 
          variable "addr" was declared but never referenced

      afAddrType_t destAddr;
                   ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1376  Warning[Pe177]: 
          variable "destAddr" was declared but never referenced

      uint8 *pData;
             ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1377  Warning[Pe177]: 
          variable "pData" was declared but never referenced

      uint8 address[8];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1378  Warning[Pe177]: 
          variable "address" was declared but never referenced

      uint8 pValue[Z_EXTADDR_LEN];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1380  Warning[Pe177]: 
          variable "pValue" was declared but never referenced

      uint8 pValue1[Z_EXTADDR_LEN];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1381  Warning[Pe177]: 
          variable "pValue1" was declared but never referenced
   1519                      dscReqAddr.addrMode=afAddr16Bit;
   1520                      if ( Bind_pRsp )
   1521                      {
   1522                        //osal_memcpy(dstAddr.addr.extAddr,NWK_command.NWK_General_Frame.NWKCG_TargetAddress,8);
   1523                        //dstAddr.addr.shortAddr=Node_Info.uiNwk_Addr;
   1524                        dscReqAddr.addr.shortAddr=AssociatedDevList[0].shortAddr;
   1525                        dscReqAddr.endPoint=0x01;
   1526                        //zclSampleCIE_WriteIAS_CIE_Address(&dscReqAddr);   
   1527                      }
   1528                      osal_mem_free( Bind_pRsp );
   \   0002E0                ; Setup parameters for call to function osal_mem_free
   \                     ??zha_project_ProcessZDOMsgs_18:
   \   0002E0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1529                      break;
   1530                  default:
   1531                      break;
   1532              }
   1533          }
   \                     ??zha_project_ProcessZDOMsgs_6:
   \   0002E3   7440         MOV     A,#0x40
   \   0002E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002E8   7F06         MOV     R7,#0x6
   \   0002EA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   01           DB 1
   \   000001   ....         DW zha_project_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zha_project_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zha_project_CmdCallbacks>`:
   \   000000   ....         DW `??zha_project_BasicResetCB::?relay`
   \   000002   ....         DW `??zha_project_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??zha_project_IdentifyQueryRspCB::?relay`
   \   00000C   ....         DW `??zha_project_OnOffCB::?relay`
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_12c:
   \   000000   2C010000     DD 300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_ProcessInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_ProcessInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_ProcessZDOMsgs
   1534          
   1535          /*********************************************************************
   1536           * @fn      zha_project_EZModeCB
   1537           *
   1538           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1539          *           going on during EZ-Mode steering/finding/binding.
   1540           *
   1541           * @param   state - an
   1542           *
   1543           * @return  none
   1544           */
   1545          static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
                             ^
Warning[Pe177]: function "zha_project_EZModeCB" was declared but never
          referenced

  static void zha_project_DisplayLight( void )
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",658  Warning[Pe177]: 
          function "zha_project_DisplayLight" was declared but never referenced
   1546          {
   1547          #ifdef LCD_SUPPORTED
   1548            char *pStr;
   1549            uint8 err;
   1550          #endif
   1551          
   1552            // time to go into identify mode
   1553            if ( state == EZMODE_STATE_IDENTIFYING )
   1554            {
   1555          #ifdef LCD_SUPPORTED
   1556              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   1557          #endif
   1558          
   1559              zha_project_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   1560              //zha_project_ProcessIdentifyTimeChange();
   1561            }
   1562          
   1563            // autoclosing, show what happened (success, cancelled, etc...)
   1564            if( state == EZMODE_STATE_AUTOCLOSE )
   1565            {
   1566          #ifdef LCD_SUPPORTED
   1567              pStr = NULL;
   1568              err = pData->sAutoClose.err;
   1569              if ( err == EZMODE_ERR_SUCCESS )
   1570              {
   1571                pStr = "EZMode: Success";
   1572              }
   1573              else if ( err == EZMODE_ERR_NOMATCH )
   1574              {
   1575                pStr = "EZMode: NoMatch"; // not a match made in heaven
   1576              }
   1577              if ( pStr )
   1578              {
   1579                if ( giLightScreenMode == LIGHT_MAINMODE )
   1580                {
   1581                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1582                }
   1583              }
   1584          #endif
   1585            }
   1586          
   1587            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1588            if( state == EZMODE_STATE_FINISH )
   1589            {
   1590              // turn off identify mode
   1591              zha_project_IdentifyTime = 0;
   1592              //zha_project_ProcessIdentifyTimeChange();
   1593          
   1594          #ifdef LCD_SUPPORTED
   1595              // if successful, inform user which nwkaddr/ep we bound to
   1596              pStr = NULL;
   1597              err = pData->sFinish.err;
   1598              if( err == EZMODE_ERR_SUCCESS )
   1599              {
   1600                // already stated on autoclose
   1601              }
   1602              else if ( err == EZMODE_ERR_CANCELLED )
   1603              {
   1604                pStr = "EZMode: Cancel";
   1605              }
   1606              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   1607              {
   1608                pStr = "EZMode: BadParm";
   1609              }
   1610              else if ( err == EZMODE_ERR_TIMEDOUT )
   1611              {
   1612                pStr = "EZMode: TimeOut";
   1613              }
   1614              if ( pStr )
   1615              {
   1616                if ( giLightScreenMode == LIGHT_MAINMODE )
   1617                {
   1618                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1619                }
   1620              }
   1621          #endif
   1622              // show main UI screen 3 seconds after binding
   1623              //osal_start_timerEx( zha_project_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   1624            }
   1625          }
   1626          #endif // ZCL_EZMODE
   1627          
   1628          /****************************************************************************
   1629          ****************************************************************************/
   1630          
   1631          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   zha_project_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      0     85   zha_project_HandleKeys
        0     19   -> NLME_GetShortAddr
        0     20   -> NLME_SendNetworkStatus
        0     19   -> ZDP_MgmtPermitJoinReq
        0     19   -> zcl_InvokeEZMode
        0     19   -> zha_project_BasicResetCB
      2      0   zha_project_IdentifyCB
      2      2   zha_project_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0      9   zha_project_Init
        0      9   -> AT_Init
        0      9   -> RegisterForKeys
        0      9   -> SerialApp_Init
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> zclDiagnostic_InitStats
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
        0      9   -> zcl_registerReadWriteCB
      0     10   zha_project_OnOffCB
        0     10   -> zcl_getRawAFMsg
      0    136   zha_project_ProcessInReadRspCmd
        0     63   -> APSME_LookupExtAddr
        0     63   -> SetTempDeviceBAT
        0     63   -> SetTempDeviceHW
        0     63   -> SetTempDeviceManuName
        0     63   -> SetTempDeviceType
        0     63   -> UpdateDeviceStatus1
        0     63   -> UpdateDeviceStatus2
        0     63   -> UpdateDeviceStatus3
        0     71   -> ZDP_BindUnbindReq
        0     66   -> osal_memcpy
        0     63   -> osal_memset
        0     67   -> osal_nv_read
      2    148   zha_project_ProcessZDOMsgs
        0     78   -> HalLedSet
        0     78   -> SetTempDeviceEP
        0     78   -> SetTempDeviceSA
        0     78   -> SetTempDeviceType
        0     78   -> ZDO_ParseDeviceAnnce
        0     78   -> ZDO_ParseEPListRsp
        0     78   -> ZDO_ParseMgmtBindRsp
        0     78   -> ZDO_ParseSimpleDescRsp
        0     78   -> osal_mem_alloc
        0     78   -> osal_mem_free
        0     81   -> osal_memcpy
        0     78   -> osal_memset
        0     78   -> osal_set_event
        0     82   -> osal_start_timerEx
        0     83   -> zcl_SendRead
      0     70   zha_project_event_loop
        0     65   -> NLME_PermitJoiningRequest
        0     65   -> Onboard_soft_reset
        0     66   -> ZDP_NWKAddrOfInterestReq
        0     66   -> ZDP_SimpleDescReq
        0     65   -> osal_mem_free
        0     65   -> osal_memset
        0     65   -> osal_msg_deallocate
        0     65   -> osal_msg_receive
        0     65   -> zcl_ProcessMessageMSG
        0     70   -> zcl_SendRead
        0     65   -> zha_project_HandleKeys
        0     65   -> zha_project_ProcessInReadRspCmd
        0     65   -> zha_project_ProcessZDOMsgs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Initializer for sampleLight_TestEp>
      32  ?<Initializer for zha_project_CmdCallbacks>
       1  ?<Initializer for zha_project_NwkState>
       7  ??Subroutine23_0
       6  ??Subroutine24_0
      17  ??Subroutine25_0
       4  ??Subroutine26_0
       9  ??Subroutine27_0
       6  ??Subroutine28_0
       4  ??Subroutine29_0
       5  ?Subroutine0
       3  ?Subroutine1
      11  ?Subroutine10
       8  ?Subroutine11
       9  ?Subroutine12
       6  ?Subroutine13
       6  ?Subroutine14
       8  ?Subroutine15
       5  ?Subroutine16
       7  ?Subroutine17
      12  ?Subroutine18
       6  ?Subroutine19
       9  ?Subroutine2
       6  ?Subroutine20
       4  ?Subroutine21
      20  ?Subroutine22
      17  ?Subroutine3
       8  ?Subroutine4
       6  ?Subroutine5
      10  ?Subroutine6
       6  ?Subroutine7
      12  ?Subroutine8
      12  ?Subroutine9
       4  __Constant_12c
       4  __Constant_1f4
       4  __Constant_3e8
       4  __Constant_64
       9  dstAddr
       5  ep
       1  gPermitDuration
       1  giLightScreenMode
       1  netState
       6  sampleLight_TestEp
       9  simpleDescReqAddr
       2  zclZHAtest_ActiveEP
      12  zclZHAtest_DstAddr
       6  zclZHAtest_epDesc
       1  zha_projectSeqNum
      54  zha_project_BasicResetCB
       6  zha_project_BasicResetCB::?relay
      32  zha_project_CmdCallbacks
      12  zha_project_DstAddr
     278  zha_project_HandleKeys
       6  zha_project_HandleKeys::?relay
      21  zha_project_IdentifyCB
       6  zha_project_IdentifyCB::?relay
      33  zha_project_IdentifyQueryRspCB
       6  zha_project_IdentifyQueryRspCB::?relay
     159  zha_project_Init
       6  zha_project_Init::?relay
       1  zha_project_NwkState
      63  zha_project_OnOffCB
       6  zha_project_OnOffCB::?relay
     825  zha_project_ProcessInReadRspCmd
       6  zha_project_ProcessInReadRspCmd::?relay
     749  zha_project_ProcessZDOMsgs
       6  zha_project_ProcessZDOMsgs::?relay
       1  zha_project_TaskID
     664  zha_project_event_loop
       6  zha_project_event_loop::?relay

 
 3 095 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    39 bytes in segment XDATA_I
    39 bytes in segment XDATA_ID
    16 bytes in segment XDATA_ROM_C
    60 bytes in segment XDATA_Z
 
 3 188 bytes of CODE  memory
     0 bytes of CONST memory (+ 16 bytes shared)
    99 bytes of XDATA memory

Errors: none
Warnings: 49
