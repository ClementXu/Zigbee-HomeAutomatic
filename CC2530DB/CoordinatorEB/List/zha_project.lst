###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                28/Sep/2016  00:06:46
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=10000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HOLD_AUTO_START -D xBUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -D ZCL_WD -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zha_project.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\zha_project.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
      1          /**************************************************************************************************
      2            Filename:       zha_project.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "nwk_util.h"
     75          
     76          #include "ZDObject.h"
     77          #include "ZDProfile.h"
     78          #include "zcl.h"
     79          #include "zcl_general.h"
     80          #include "zcl_ha.h"
     81          #include "zcl_ss.h"
     82          #include "zcl_ms.h"
     83          #include "zcl_ezmode.h"
     84          #include "zcl_diagnostic.h"
     85          #include "zcl_lighting.h"
     86          #include "zha_project.h"
     87          #include "SerialApp.h"
     88          #include "at_command.h"   
     89          #include "onboard.h"
     90          
     91          /* HAL */
     92          #include "hal_lcd.h"
     93          #include "hal_led.h"
     94          #include "hal_key.h"
     95          
     96          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     97                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     98          #include "zgp_translationtable.h"
     99            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
    100              #define ZGP_AUTO_TT
    101            #endif
    102          #endif
    103          
    104          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    105          #include "math.h"
    106          #include "hal_timer.h"
    107          #endif
    108          
    109          #include "NLMEDE.h"
    110          
    111          /*********************************************************************
    112           * MACROS
    113           */
    114          
    115          /*********************************************************************
    116           * CONSTANTS
    117           */
    118          #if (defined HAL_BOARD_ZLIGHT)
    119          #define LEVEL_MAX                 0xFE
    120          #define LEVEL_MIN                 0x0
    121          #define GAMMA_VALUE               2
    122          #define PWM_FULL_DUTY_CYCLE       1000
    123          #elif (defined HAL_PWM)
    124          #define LEVEL_MAX                 0xFE
    125          #define LEVEL_MIN                 0x0
    126          #define GAMMA_VALUE               2
    127          #define PWM_FULL_DUTY_CYCLE       100
    128          #endif
    129          
    130          /*********************************************************************
    131           * TYPEDEFS
    132           */
    133          
    134          /*********************************************************************
    135           * GLOBAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          byte zha_project_TaskID;
   \                     zha_project_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 zha_projectSeqNum;
   \                     zha_projectSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          ZDO_ActiveEndpointRsp_t   *zha_project_ActiveEP;
   \                     zha_project_ActiveEP:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          endPointDesc_t zha_project_epDesc;
   \                     zha_project_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    141          afAddrType_t zha_project_DstAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          static zAddrType_t simpleDescReqAddr;
   \                     simpleDescReqAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 ep[5];
   \                     ep:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 netState = 0;
   \                     netState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          zAddrType_t dstAddr;
   \                     dstAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    146          
    147          #if ZG_BUILD_ENDDEVICE_TYPE
    148          endPointDesc_t zclZHAtest_epDesc;
    149          endPointDesc_t zclZHAtest_epDesc1;
    150          endPointDesc_t zclZHAtest_epDesc2;
    151          endPointDesc_t zclZHAtest_epDesc3;
    152          endPointDesc_t zclZHAtest_epDesc4;
    153          endPointDesc_t zclZHAtest_epDesc5;
    154          endPointDesc_t zclZHAtest_epDesc6;
    155          endPointDesc_t zclZHAtest_epDesc7;
    156          endPointDesc_t zclZHAtest_epDesc8;
    157          endPointDesc_t zclZHAtest_epDesc9;
    158          endPointDesc_t zclZHAtest_epDesc10;
    159          endPointDesc_t zclZHAtest_epDesc11;
    160          endPointDesc_t zclZHAtest_epDesc12;
    161          endPointDesc_t zclZHAtest_epDesc14;
    162          #endif
    163          /*********************************************************************
    164           * GLOBAL FUNCTIONS
    165           */
    166          
    167          /*********************************************************************
    168           * LOCAL VARIABLES
    169           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          afAddrType_t zha_project_DstAddr;
   \                     zha_project_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    171          
    172          #ifdef ZCL_EZMODE
    173          static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    174          static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    175          
    176          
    177          // register EZ-Mode with task information (timeout events, callback, etc...)
    178          //static const zclEZMode_RegisterData_t zha_project_RegisterEZModeData =
    179          //{
    180          //  &zha_project_TaskID,
    181          //  SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    182          //  SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    183          //  &zha_projectSeqNum,
    184          //  zha_project_EZModeCB
    185          //};
    186          
    187          #else
    188          uint16 bindingInClusters[] =
    189          {
    190            ZCL_CLUSTER_ID_GEN_ON_OFF
    191          #ifdef ZCL_LEVEL_CTRL
    192            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    193          #endif
    194          };
    195          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    196          
    197          #endif  // ZCL_EZMODE
    198          
    199          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    200          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    201          {
    202            SAMPLELIGHT_ENDPOINT,
    203            &zha_project_TaskID,
    204            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    205            (afNetworkLatencyReq_t)0            // No Network Latency req
    206          };
    207          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    209          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    211          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    212          devStates_t zha_project_NwkState = DEV_INIT;
   \                     zha_project_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zha_project_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    213          
    214          #if ZCL_LEVEL_CTRL

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          uint8 zha_project_WithOnOff;       // set to TRUE if state machine should set light on/off
   \                     zha_project_WithOnOff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          uint8 zha_project_NewLevel;        // new level when done moving
   \                     zha_project_NewLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          bool  zha_project_NewLevelUp;      // is direction to new level up or down?
   \                     zha_project_NewLevelUp:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          int32 zha_project_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
   \                     zha_project_CurrentLevel32:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          int32 zha_project_Rate32;          // rate in units, fixed point (e.g. 16.123)
   \                     zha_project_Rate32:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          uint8 zha_project_LevelLastLevel;  // to save the Current Level before the light was turned OFF
   \                     zha_project_LevelLastLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    221          #endif
    222          
    223          /*********************************************************************
    224           * LOCAL FUNCTIONS
    225           */
    226          
    227          
    228          
    229          static void zha_project_HandleKeys( byte shift, byte keys );
    230          static void zha_project_BasicResetCB( void );
    231          static void zha_project_IdentifyCB( zclIdentify_t *pCmd );
    232          static void zha_project_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    233          static void zha_project_OnOffCB( uint8 cmd );
    234          static ZStatus_t zclZLL_ColorControl_MoveToColorTemperature(zclCCMoveToColorTemperature_t *pCmd);
    235          static void zclSS_ChangeNotification(zclZoneChangeNotif_t *pCmd);
    236          
    237          
    238          
    239          
    240          #ifdef ZCL_LEVEL_CTRL
    241          static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    242          //static void zha_project_LevelControlMoveCB( zclLCMove_t *pCmd );
    243          //static void zha_project_LevelControlStepCB( zclLCStep_t *pCmd );
    244          //static void zha_project_LevelControlStopCB( void );
    245          //static void zha_project_DefaultMove( void );
    246          //static uint32 zha_project_TimeRateHelper( uint8 newLevel );
    247          //static uint16 zha_project_GetTime ( uint8 level, uint16 time );
    248          //static void zha_project_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    249          //static void zha_project_MoveBasedOnTime( uint8 newLevel, uint16 time );
    250          //static void zha_project_AdjustLightLevel( void );
    251          #endif
    252          
    253          // app display functions
    254          static void zha_project_DisplayLight( void );
    255          
    256          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    257          void zha_project_UpdateLampLevel( uint8 level );
    258          #endif
    259          
    260          // Functions to process ZCL Foundation incoming Command/Response messages
    261          static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    262          #ifdef ZCL_READ
    263          static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    264          #endif
    265          #ifdef ZCL_WRITE
    266          static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    267          #endif
    268          #ifdef ZCL_REPORT
    269          static uint8 zha_project_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    270          #endif
    271          static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    272          #ifdef ZCL_DISCOVER
    273          static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    274          static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    275          static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    276          #endif
    277          
    278          /*********************************************************************
    279           * STATUS STRINGS
    280           */
    281          
    282          
    283          /*********************************************************************
    284           * ZCL General Profile Callback table
    285           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    286          static zclGeneral_AppCallbacks_t zha_project_CmdCallbacks =
   \                     zha_project_CmdCallbacks:
   \   000000                DS 40
   \   000028                REQUIRE `?<Initializer for zha_project_CmdCallbacks>`
   \   000028                REQUIRE __INIT_XDATA_I
    287          {
    288            zha_project_BasicResetCB,            // Basic Cluster Reset command
    289            zha_project_IdentifyCB,              // Identify command
    290          #ifdef ZCL_EZMODE
    291            NULL,                                   // Identify EZ-Mode Invoke command
    292            NULL,                                   // Identify Update Commission State command
    293          #endif
    294            NULL,                                   // Identify Trigger Effect command
    295            zha_project_IdentifyQueryRspCB,      // Identify Query Response command
    296            zha_project_OnOffCB,                 // On/Off cluster commands
    297            NULL,                                   // On/Off cluster enhanced command Off with Effect
    298            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    299            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    300          #ifdef ZCL_LEVEL_CTRL
    301            zha_project_LevelControlMoveToLevelCB, // Level Control Move to Level command
    302            NULL,        // Level Control Move command
    303            NULL,        // Level Control Step command
    304            NULL,        // Level Control Stop command
    305          #endif
    306          #ifdef ZCL_GROUPS
    307            NULL,                                   // Group Response commands
    308          #endif
    309          #ifdef ZCL_SCENES
    310            NULL,                                  // Scene Store Request command
    311            NULL,                                  // Scene Recall Request command
    312            NULL,                                  // Scene Response command
    313          #endif
    314          #ifdef ZCL_ALARMS
    315            NULL,                                  // Alarm (Response) commands
    316          #endif
    317          #ifdef SE_UK_EXT
    318            NULL,                                  // Get Event Log command
    319            NULL,                                  // Publish Event Log command
    320          #endif
    321            NULL,                                  // RSSI Location command
    322            NULL                                   // RSSI Location Response command
    323          };
    324          
    325          static zclLighting_AppCallbacks_t  zclZLLtest_CmdCallbacks =
    326          {
    327              NULL,
    328              NULL,
    329              NULL,
    330              NULL,
    331              NULL,
    332              NULL,
    333              NULL,
    334              NULL,
    335              NULL,
    336              NULL,
    337              zclZLL_ColorControl_MoveToColorTemperature,
    338          
    339          
    340          };
    341          
    342          static zclSS_AppCallbacks_t zclSStest_CmdCallbacks =
    343          {
    344              //zclSS_ChangeNotification,
    345              NULL,
    346              NULL,
    347              NULL,
    348              NULL,
    349              NULL,
    350              NULL,
    351              NULL,
    352              NULL,
    353              NULL,
    354              NULL,
    355              //zclSS_WD_StartWarning,
    356              //zclSS_WD_Squawk,
    357            
    358            
    359            
    360            
    361          };
    362          
    363          /*********************************************************************
    364           * @fn          zha_project_Init
    365           *
    366           * @brief       Initialization function for the zclGeneral layer.
    367           *
    368           * @param       none
    369           *
    370           * @return      none
    371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    372          void zha_project_Init( byte task_id )
   \                     zha_project_Init:
    373          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    374            uint8 devicetype;
    375            zha_project_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zha_project_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    376          
    377            // Set destination address to indirect
    378            zha_project_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zha_project_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    379            zha_project_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    380            zha_project_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zha_project_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    381          
    382            // This app is part of the Home Automation Profile
    383          #if ZG_BUILD_COORDINATOR_TYPE  
    384            zclHA_Init( &zha_project_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zha_project_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zha_project_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    385          #endif
    386            SerialApp_Init();
   \   00001F                ; Setup parameters for call to function SerialApp_Init
   \   00001F   12....       LCALL   `??SerialApp_Init::?relay`; Banked call to: SerialApp_Init
    387            AT_Init();
   \   000022                ; Setup parameters for call to function AT_Init
   \   000022   12....       LCALL   `??AT_Init::?relay`  ; Banked call to: AT_Init
    388            //osal_nv_item_init( ZCD_NV_DEVICE_TABLE,(uint16)(sizeof(NODE_INFO_t) * 6 ), NULL );
    389            Device_type_Init();
                   ^
Warning[Pe223]: function "Device_type_Init" declared implicitly

    uint8 devicetype;
          ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",374  Warning[Pe177]: 
          variable "devicetype" was declared but never referenced
   \   000025                ; Setup parameters for call to function Device_type_Init
   \   000025   12....       LCALL   `??Device_type_Init::?relay`; Banked call to: Device_type_Init
    390          #if ZG_BUILD_ENDDEVICE_TYPE
    391              osal_nv_read(ZCD_NV_DEVICE_TYPE,0, sizeof(uint8), &devicetype);
    392              ZDO_StartDevice(ZG_DEVICETYPE_ENDDEVICE,MODE_JOIN,15, 15);
    393              switch(devicetype)
    394              {
    395                  case light:
    396                      zclZHAtest_epDesc1.endPoint = 1;
    397                      zclZHAtest_epDesc1.task_id = &zha_project_TaskID;
    398                      zclZHAtest_epDesc1.simpleDesc
    399                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc1;
    400                      zclZHAtest_epDesc1.latencyReq = noLatencyReqs;
    401                      zclHA_Init(&zclZHAtest_SimpleDesc1);
    402                      afRegister( &zclZHAtest_epDesc1 );      
    403                    
    404                   break;
    405                  case level:
    406                       zclZHAtest_epDesc2.endPoint = 1;
    407                  zclZHAtest_epDesc2.task_id = &zha_project_TaskID;
    408                  zclZHAtest_epDesc2.simpleDesc
    409                          = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc2;
    410                  zclZHAtest_epDesc2.latencyReq = noLatencyReqs;    
    411                  zclHA_Init(&zclZHAtest_SimpleDesc2);
    412                  afRegister( &zclZHAtest_epDesc2 );
    413                  break;
    414           
    415                  case colortem:
    416                      zclZHAtest_epDesc3.endPoint = 1;
    417                      zclZHAtest_epDesc3.task_id = &zha_project_TaskID;
    418                      zclZHAtest_epDesc3.simpleDesc
    419                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc3;
    420                      zclZHAtest_epDesc3.latencyReq = noLatencyReqs;
    421                      zclHA_Init(&zclZHAtest_SimpleDesc3);
    422                      afRegister( &zclZHAtest_epDesc3 );
    423                    break;
    424                  case temp:
    425                      zclZHAtest_epDesc4.endPoint = 1;
    426                      zclZHAtest_epDesc4.task_id = &zha_project_TaskID;
    427                      zclZHAtest_epDesc4.simpleDesc
    428                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc4;
    429                      zclZHAtest_epDesc4.latencyReq = noLatencyReqs;
    430                      zclHA_Init(&zclZHAtest_SimpleDesc4);
    431                      afRegister( &zclZHAtest_epDesc4 );      
    432                    break;
    433                  case pir:
    434                      zclZHAtest_epDesc5.endPoint = 1;
    435                      zclZHAtest_epDesc5.task_id = &zha_project_TaskID;
    436                      zclZHAtest_epDesc5.simpleDesc
    437                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc5;
    438                      zclZHAtest_epDesc5.latencyReq = noLatencyReqs;
    439                      zclHA_Init(&zclZHAtest_SimpleDesc5);
    440                      afRegister( &zclZHAtest_epDesc5 );     
    441                      zha_project_Smoke_Type = 0x000d;
    442                    
    443                   break; 
    444                  case humility:
    445                      zclZHAtest_epDesc6.endPoint = 1;
    446                      zclZHAtest_epDesc6.task_id = &zha_project_TaskID;
    447                      zclZHAtest_epDesc6.simpleDesc
    448                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc6;
    449                      zclZHAtest_epDesc6.latencyReq = noLatencyReqs;
    450                      zclHA_Init(&zclZHAtest_SimpleDesc6);
    451                      afRegister( &zclZHAtest_epDesc6 );      
    452                    break;
    453                  case doorsen:
    454                      zclZHAtest_epDesc7.endPoint = 1;
    455                      zclZHAtest_epDesc7.task_id = &zha_project_TaskID;
    456                      zclZHAtest_epDesc7.simpleDesc
    457                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc7;
    458                      zclZHAtest_epDesc7.latencyReq = noLatencyReqs;
    459                      zclHA_Init(&zclZHAtest_SimpleDesc7);
    460                      afRegister( &zclZHAtest_epDesc7 );  
    461                      zha_project_Smoke_Type = 0x0015;
    462                    break;
    463                  case lumin:
    464                      zclZHAtest_epDesc8.endPoint = 1;
    465                      zclZHAtest_epDesc8.task_id = &zha_project_TaskID;
    466                      zclZHAtest_epDesc8.simpleDesc
    467                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc8;
    468                      zclZHAtest_epDesc8.latencyReq = noLatencyReqs;
    469                      zclHA_Init(&zclZHAtest_SimpleDesc8);
    470                      afRegister( &zclZHAtest_epDesc8 ); 
    471                  break;
    472                  case slsensor:
    473                      zclZHAtest_epDesc9.endPoint = 1;
    474                      zclZHAtest_epDesc9.task_id = &zha_project_TaskID;
    475                      zclZHAtest_epDesc9.simpleDesc
    476                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc9;
    477                      zclZHAtest_epDesc9.latencyReq = noLatencyReqs; 
    478                      zclHA_Init(&zclZHAtest_SimpleDesc9);
    479                      afRegister( &zclZHAtest_epDesc9 );
    480                      zha_project_Smoke_Type = 0x0225;      
    481                    break;
    482                  case smoke:
    483                      zclZHAtest_epDesc10.endPoint = 1;
    484                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    485                      zclZHAtest_epDesc10.simpleDesc
    486                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    487                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    488                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    489                      afRegister( &zclZHAtest_epDesc10 );          
    490                      zha_project_Smoke_Type = 0x0028;
    491                    break;
    492                  case watersen:
    493                      zclZHAtest_epDesc11.endPoint = 1;
    494                      zclZHAtest_epDesc11.task_id = &zha_project_TaskID;
    495                      zclZHAtest_epDesc11.simpleDesc
    496                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc11;
    497                      zclZHAtest_epDesc11.latencyReq = noLatencyReqs; 
    498                      zclHA_Init(&zclZHAtest_SimpleDesc11);
    499                      afRegister( &zclZHAtest_epDesc11 );
    500                      zha_project_Smoke_Type = 0x002a;
    501                    break;  
    502                  case cosensor:
    503                      zclZHAtest_epDesc10.endPoint = 1;
    504                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    505                      zclZHAtest_epDesc10.simpleDesc
    506                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    507                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    508                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    509                      afRegister( &zclZHAtest_epDesc10 );          
    510                      zha_project_Smoke_Type = 0x0227;
    511                      break; 
    512                  case gassensor:
    513                      zclZHAtest_epDesc10.endPoint = 1;
    514                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    515                      zclZHAtest_epDesc10.simpleDesc
    516                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    517                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    518                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    519                      afRegister( &zclZHAtest_epDesc10 );          
    520                      zha_project_Smoke_Type = 0x002B;
    521                      break;
    522                  case glasssen:
    523                      zclZHAtest_epDesc10.endPoint = 1;
    524                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    525                      zclZHAtest_epDesc10.simpleDesc
    526                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    527                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    528                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    529                      afRegister( &zclZHAtest_epDesc10 );          
    530                      zha_project_Smoke_Type = 0x0226;
    531                      break;
    532                  case zonectrl:
    533                      zclZHAtest_epDesc10.endPoint = 1;
    534                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    535                      zclZHAtest_epDesc10.simpleDesc
    536                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    537                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    538                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    539                      afRegister( &zclZHAtest_epDesc10 );          
    540                      zha_project_Smoke_Type = 0x0115;
    541                      break;
    542                  case lightswitch:
    543                      zclZHAtest_epDesc12.endPoint = 1;
    544                      zclZHAtest_epDesc12.task_id = &zha_project_TaskID;
    545                      zclZHAtest_epDesc12.simpleDesc
    546                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc12;
    547                      zclZHAtest_epDesc12.latencyReq = noLatencyReqs;    
    548                      zclHA_Init(&zclZHAtest_SimpleDesc12); 
    549                      afRegister( &zclZHAtest_epDesc12 );        
    550                      break;
    551                  case outlet:
    552                      zclZHAtest_epDesc14.endPoint = 1;
    553                      zclZHAtest_epDesc14.task_id = &zha_project_TaskID;
    554                      zclZHAtest_epDesc14.simpleDesc
    555                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc14;
    556                      zclZHAtest_epDesc14.latencyReq = noLatencyReqs;    
    557                      zclHA_Init(&zclZHAtest_SimpleDesc14); 
    558                      afRegister( &zclZHAtest_epDesc14 ); 
    559                      break;
    560                
    561                      
    562                  default:
    563                   break;    
    564              
    565              }
    566          #endif 
    567              // Register the ZCL General Cluster Library callback functions
    568            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zha_project_CmdCallbacks );
   \   000028                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000028   7A..         MOV     R2,#zha_project_CmdCallbacks & 0xff
   \   00002A   7B..         MOV     R3,#(zha_project_CmdCallbacks >> 8) & 0xff
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    569          
    570            // Register the application's attribute list
    571            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zha_project_NumAttributes, zha_project_Attrs );
   \   000031                ; Setup parameters for call to function zcl_registerAttrList
   \   000031   7C..         MOV     R4,#zha_project_Attrs & 0xff
   \   000033   7D..         MOV     R5,#(zha_project_Attrs >> 8) & 0xff
   \   000035   90....       MOV     DPTR,#zha_project_NumAttributes
   \   000038   E4           CLR     A
   \   000039   93           MOVC    A,@A+DPTR
   \   00003A   FA           MOV     R2,A
   \   00003B   7901         MOV     R1,#0x1
   \   00003D   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    572          
    573            // Register the Application to receive the unprocessed Foundation command/response messages
    574            zcl_registerForMsg( zha_project_TaskID );
   \   000040                ; Setup parameters for call to function zcl_registerForMsg
   \   000040   90....       MOV     DPTR,#zha_project_TaskID
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    575          
    576          #ifdef ZCL_DISCOVER
    577            // Register the application's command list
    578            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zha_project_Cmds );
    579          #endif
    580          
    581            // Register for all key events - This app will handle all key events
    582            RegisterForKeys( zha_project_TaskID );
   \   000048                ; Setup parameters for call to function RegisterForKeys
   \   000048   90....       MOV     DPTR,#zha_project_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    583          
    584            // Register for a test endpoint
    585            afRegister( &sampleLight_TestEp );
   \   000050                ; Setup parameters for call to function afRegister
   \   000050   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   000052   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   000054   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    586          
    587          #ifdef ZCL_EZMODE
    588            // Register EZ-Mode
    589            //zcl_RegisterEZMode( &zha_project_RegisterEZModeData );
    590          
    591            // Register with the ZDO to receive Match Descriptor Responses
    592              ZDO_RegisterForZDOMsg( task_id, End_Device_Bind_rsp );
   \   000057                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000057   7A20         MOV     R2,#0x20
   \   000059   7B80         MOV     R3,#-0x80
   \   00005B   EE           MOV     A,R6
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    593              ZDO_RegisterForZDOMsg( task_id, Match_Desc_rsp );
   \   000060                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000060   7A06         MOV     R2,#0x6
   \   000062   7B80         MOV     R3,#-0x80
   \   000064   EE           MOV     A,R6
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    594              ZDO_RegisterForZDOMsg( task_id, Active_EP_rsp );
   \   000069                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000069   7A05         MOV     R2,#0x5
   \   00006B   7B80         MOV     R3,#-0x80
   \   00006D   EE           MOV     A,R6
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    595              ZDO_RegisterForZDOMsg( task_id, Simple_Desc_rsp );
   \   000072                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000072   7A04         MOV     R2,#0x4
   \   000074   7B80         MOV     R3,#-0x80
   \   000076   EE           MOV     A,R6
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    596              ZDO_RegisterForZDOMsg( task_id, Device_annce );
   \   00007B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00007B   7A13         MOV     R2,#0x13
   \   00007D   7B00         MOV     R3,#0x0
   \   00007F   EE           MOV     A,R6
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    597          #endif
    598          
    599          
    600          #ifdef ZCL_DIAGNOSTIC
    601            // Register the application's callback function to read/write attribute data.
    602            // This is only required when the attribute data format is unknown to ZCL.
    603            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   000084                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   000084   7C00         MOV     R4,#0x0
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7A..         MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
   \   00008A   7B..         MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   00008C   7901         MOV     R1,#0x1
   \   00008E   12....       LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    604          
    605            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   000091                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   000091   12....       LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
    606            {
    607              // Here the user could start the timer to save Diagnostics to NV
    608            }
    609          #endif
    610          
    611          #ifdef LCD_SUPPORTED
    612            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    613          #endif  // LCD_SUPPORTED
    614          
    615            //osal_start_reload_timer(task_id,DEVICE_STATUS_EVT,8000);
    616          #if ZG_BUILD_ENDDEVICE_TYPE
    617            osal_start_reload_timer(task_id,SEND_REPORT_EVT,5000);
    618          #endif
    619            
    620          #ifdef ZGP_AUTO_TT
    621            zgpTranslationTable_RegisterEP ( &zha_project_SimpleDesc );
    622          #endif
    623          }
   \   000094   7F01         MOV     R7,#0x1
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA
    624          
    625          /*********************************************************************
    626           * @fn          zclSample_event_loop
    627           *
    628           * @brief       Event Loop Processor for zclGeneral.
    629           *
    630           * @param       none
    631           *
    632           * @return      none
    633           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          uint16 zha_project_event_loop( uint8 task_id, uint16 events )
   \                     zha_project_event_loop:
    635          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 53
   \   000005   74CB         MOV     A,#-0x35
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    636            afIncomingMSGPacket_t *MSGpkt;
    637          
    638            (void)task_id;  // Intentionally unreferenced parameter
    639          
    640              if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   6003         JZ      $+5
   \   000012   02....       LJMP    ??zha_project_event_loop_0 & 0xFFFF
    641              {
    642                  while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zha_project_TaskID )) )
    643                  {
    644                      switch ( MSGpkt->hdr.event )
    645                      {
    646                          #ifdef ZCL_EZMODE
    647                          case ZDO_CB_MSG:
    648                              zha_project_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    649                              break;
    650                          #endif
    651                          case ZCL_INCOMING_MSG:
    652                          // Incoming ZCL Foundation command/response messages
    653                              zha_project_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    654                              break;
    655          
    656                          case KEY_CHANGE:
    657                              zha_project_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    658                              break;
    659                          case AF_INCOMING_MSG_CMD:
    660                              zcl_ProcessMessageMSG(MSGpkt);
    661          
    662                              //ZHAtest_MessageMSGCB( MSGpkt );
    663                              break;    
    664                          
    665          
    666                          case ZDO_STATE_CHANGE:
    667                              zha_project_NwkState = (devStates_t)(MSGpkt->hdr.status);
    668                   
    669                              if(zha_project_NwkState == DEV_ZB_COORD)
    670                              {
    671                                  netState = 1;
    672                                  NLME_PermitJoiningRequest(0);
    673                              }
    674                          break;
    675          
    676                          default:
    677                              break;
    678                      }
    679          
    680                    // Release the memory
    681                    osal_msg_deallocate( (uint8 *)MSGpkt );
    682                  }
    683                  return (events ^ SYS_EVENT_MSG);
    684              }
    685              if ( events & ZHA_ATTRIBUTE_REQ_EVT )
   \   000015   EE           MOV     A,R6
   \   000016   5404         ANL     A,#0x4
   \   000018   607F         JZ      ??zha_project_event_loop_1
    686              {
    687                  uint8 i=0;
                               ^
Warning[Pe177]: variable "i" was declared but never referenced
    688                  afAddrType_t  dscReqAddr;
    689                  dscReqAddr.addrMode=afAddr16Bit;
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine4 & 0xFFFF
    690                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    691                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_0:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
    692                  zclReadCmd_t BasicAttrsList;
    693                  BasicAttrsList.numAttr = 6;
   \   000028   740C         MOV     A,#0xc
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7406         MOV     A,#0x6
   \   00002F   F0           MOVX    @DPTR,A
    694                  BasicAttrsList.attrID[0] = ATTRID_BASIC_ZCL_VERSION;
   \   000030   740D         MOV     A,#0xd
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
    695                  BasicAttrsList.attrID[1] = ATTRID_BASIC_HW_VERSION;
   \   000039   740F         MOV     A,#0xf
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?Subroutine29 & 0xFFFF
    696                  BasicAttrsList.attrID[2] = ATTRID_BASIC_MODEL_ID;
   \                     ??CrossCallReturnLabel_63:
   \   000043   7411         MOV     A,#0x11
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7405         MOV     A,#0x5
   \   00004A   12....       LCALL   ?Subroutine29 & 0xFFFF
    697                  BasicAttrsList.attrID[3] = ATTRID_BASIC_MANUFACTURER_NAME;
   \                     ??CrossCallReturnLabel_64:
   \   00004D   7413         MOV     A,#0x13
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?Subroutine29 & 0xFFFF
    698                  BasicAttrsList.attrID[5] = ATTRID_BASIC_SERIAL_NUMBER;
   \                     ??CrossCallReturnLabel_65:
   \   000057   7417         MOV     A,#0x17
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7409         MOV     A,#0x9
   \   00005E   12....       LCALL   ?Subroutine29 & 0xFFFF
    699                  BasicAttrsList.attrID[4] = ATTRID_BASIC_POWER_SOURCE;
   \                     ??CrossCallReturnLabel_66:
   \   000061   7415         MOV     A,#0x15
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   7407         MOV     A,#0x7
   \   000068   12....       LCALL   ?Subroutine5 & 0xFFFF
    700                  zcl_SendRead( 1, &dscReqAddr,ZCL_CLUSTER_ID_GEN_BASIC, &BasicAttrsList,
    701                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
    702                  
    703          //        BasicAttrsList.numAttr = 1;
    704          //        BasicAttrsList.attrID[0] = ATTRID_BASIC_SERIAL_NUMBER;        
    705          //        zcl_SendRead( 1, &dscReqAddr,ZCL_CLUSTER_ID_GEN_BASIC, &BasicAttrsList,
    706          //                    ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
    707                  //return ( events ^ ZHA_ATTRIBUTE_REQ_EVT );
    708              }  
   \                     ??CrossCallReturnLabel_3:
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000073   78..         MOV     R0,#?V0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   740F         MOV     A,#0xf
   \   00007A   12....       LCALL   ?XSTACK_DISP100_8
   \   00007D   88..         MOV     ?V0,R0
   \   00007F   89..         MOV     ?V1,R1
   \   000081   78..         MOV     R0,#?V0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   7C00         MOV     R4,#0x0
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   7405         MOV     A,#0x5
   \   00008C   12....       LCALL   ?XSTACK_DISP101_8
   \   00008F   7901         MOV     R1,#0x1
   \   000091   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   000094   7405         MOV     A,#0x5
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
    709            
    710              if(events & ZHA_ATTRIBUTE_POWER_EVT)
   \                     ??zha_project_event_loop_1:
   \   000099   EE           MOV     A,R6
   \   00009A   5480         ANL     A,#0x80
   \   00009C   6058         JZ      ??zha_project_event_loop_2
    711              {
    712                  afAddrType_t  dscReqAddr;
    713                  dscReqAddr.addrMode=afAddr16Bit;
   \   00009E   7408         MOV     A,#0x8
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL   ?Subroutine4 & 0xFFFF
    714                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    715                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_1:
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   7401         MOV     A,#0x1
   \   0000AB   F0           MOVX    @DPTR,A
    716                  zclReadCmd_t BasicAttrsList;
    717                  BasicAttrsList.numAttr = 2;
   \   0000AC   740C         MOV     A,#0xc
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   F0           MOVX    @DPTR,A
    718                  BasicAttrsList.attrID[0] = ATTRID_POWER_CFG_BATTERY_VOLTAGE;
   \   0000B4   740D         MOV     A,#0xd
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   7420         MOV     A,#0x20
   \   0000BB   12....       LCALL   ?Subroutine29 & 0xFFFF
    719                  BasicAttrsList.attrID[1] = 0x0021;
   \                     ??CrossCallReturnLabel_67:
   \   0000BE   740F         MOV     A,#0xf
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   7421         MOV     A,#0x21
   \   0000C5   12....       LCALL   ?Subroutine5 & 0xFFFF
    720                  zcl_SendRead( 1, &dscReqAddr,
    721                              ZCL_CLUSTER_ID_GEN_POWER_CFG, &BasicAttrsList,
    722                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
    723                  //return ( events ^ ZHA_ATTRIBUTE_POWER_EVT );    
    724              }
   \                     ??CrossCallReturnLabel_4:
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   78..         MOV     R0,#?V0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   78..         MOV     R0,#?V0
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D5   740F         MOV     A,#0xf
   \   0000D7   12....       LCALL   ?XSTACK_DISP100_8
   \   0000DA   88..         MOV     ?V0,R0
   \   0000DC   89..         MOV     ?V1,R1
   \   0000DE   78..         MOV     R0,#?V0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   7C01         MOV     R4,#0x1
   \   0000E5   7D00         MOV     R5,#0x0
   \   0000E7   7405         MOV     A,#0x5
   \   0000E9   12....       LCALL   ?XSTACK_DISP101_8
   \   0000EC   7901         MOV     R1,#0x1
   \   0000EE   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   0000F1   7405         MOV     A,#0x5
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
    725              if ( events & ZONE_TYPE_EVT )
   \                     ??zha_project_event_loop_2:
   \   0000F6   EE           MOV     A,R6
   \   0000F7   5420         ANL     A,#0x20
   \   0000F9   604D         JZ      ??zha_project_event_loop_3
    726              {
    727                  afAddrType_t  dscReqAddr;
    728                  dscReqAddr.addrMode=afAddr16Bit;
   \   0000FB   7408         MOV     A,#0x8
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   12....       LCALL   ?Subroutine4 & 0xFFFF
    729                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    730                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_2:
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   7401         MOV     A,#0x1
   \   000108   F0           MOVX    @DPTR,A
    731                  zclReadCmd_t BasicAttrsList;
    732                  BasicAttrsList.numAttr = 1;
   \   000109   740C         MOV     A,#0xc
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   7401         MOV     A,#0x1
   \   000110   F0           MOVX    @DPTR,A
    733                  BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
   \   000111   740D         MOV     A,#0xd
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   7401         MOV     A,#0x1
   \   000118   12....       LCALL   ?Subroutine5 & 0xFFFF
    734                  zcl_SendRead( 1, &dscReqAddr,
    735                              ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
    736                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
    737                  //return ( events ^ ZONE_TYPE_EVT );
    738              } 
   \                     ??CrossCallReturnLabel_5:
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011E   78..         MOV     R0,#?V0
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000123   78..         MOV     R0,#?V0
   \   000125   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000128   740F         MOV     A,#0xf
   \   00012A   12....       LCALL   ?XSTACK_DISP100_8
   \   00012D   88..         MOV     ?V0,R0
   \   00012F   89..         MOV     ?V1,R1
   \   000131   78..         MOV     R0,#?V0
   \   000133   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000136   7C00         MOV     R4,#0x0
   \   000138   7D05         MOV     R5,#0x5
   \   00013A   ED           MOV     A,R5
   \   00013B   12....       LCALL   ?XSTACK_DISP101_8
   \   00013E   7901         MOV     R1,#0x1
   \   000140   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   000143   7405         MOV     A,#0x5
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
    739              if ( events & ZHA_ACTIVE_EP_EVT )
   \                     ??zha_project_event_loop_3:
   \   000148   EE           MOV     A,R6
   \   000149   5408         ANL     A,#0x8
   \   00014B   6015         JZ      ??zha_project_event_loop_4
    740              {
    741                  ZDP_ActiveEPReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr, 0);
   \   00014D                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00014D   75..00       MOV     ?V0,#0x0
   \   000150   78..         MOV     R0,#?V0
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000155   7905         MOV     R1,#0x5
   \   000157   12....       LCALL   ?Subroutine16 & 0xFFFF
    742                  //return ( events ^ ZHA_ACTIVE_EP_EVT );
    743              }  
   \                     ??CrossCallReturnLabel_42:
   \   00015A   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00015D   7401         MOV     A,#0x1
   \   00015F   12....       LCALL   ?DEALLOC_XSTACK8
    744            
    745            // event to get simple descriptor of the newly joined device
    746              if ( events & SIMPLE_DESC_QUERY_EVT )
   \                     ??zha_project_event_loop_4:
   \   000162   EE           MOV     A,R6
   \   000163   5410         ANL     A,#0x10
   \   000165   7003         JNZ     $+5
   \   000167   02....       LJMP    ??zha_project_event_loop_5 & 0xFFFF
    747              {
    748                  uint8 i;
    749                  for(i=0;i<=zha_project_ActiveEP->cnt;i++)
   \   00016A   75..00       MOV     ?V0,#0x0
   \   00016D   02....       LJMP    ??zha_project_event_loop_6 & 0xFFFF
   \                     ??zha_project_event_loop_7:
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   90....       MOV     DPTR,#zha_project_NwkState
   \   000175   F0           MOVX    @DPTR,A
   \   000176   6409         XRL     A,#0x9
   \   000178   700B         JNZ     ??zha_project_event_loop_8
   \   00017A   90....       MOV     DPTR,#netState
   \   00017D   7401         MOV     A,#0x1
   \   00017F   F0           MOVX    @DPTR,A
   \   000180                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000180   7900         MOV     R1,#0x0
   \   000182   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \                     ??zha_project_event_loop_8:
   \   000185                ; Setup parameters for call to function osal_msg_deallocate
   \   000185   AA..         MOV     R2,?V0
   \   000187   AB..         MOV     R3,?V1
   \   000189   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zha_project_event_loop_0:
   \   00018C                ; Setup parameters for call to function osal_msg_receive
   \   00018C   90....       MOV     DPTR,#zha_project_TaskID
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F9           MOV     R1,A
   \   000191   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000194   8A..         MOV     ?V0,R2
   \   000196   8B..         MOV     ?V1,R3
   \   000198   EA           MOV     A,R2
   \   000199   45..         ORL     A,?V1
   \   00019B   7003         JNZ     $+5
   \   00019D   02....       LJMP    ??zha_project_event_loop_9 & 0xFFFF
   \   0001A0   8A82         MOV     DPL,R2
   \   0001A2   8B83         MOV     DPH,R3
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   24E6         ADD     A,#-0x1a
   \   0001A7   6072         JZ      ??zha_project_event_loop_10
   \   0001A9   24E6         ADD     A,#-0x1a
   \   0001AB   6011         JZ      ??zha_project_event_loop_11
   \   0001AD   2474         ADD     A,#0x74
   \   0001AF   6056         JZ      ??zha_project_event_loop_12
   \   0001B1   24EF         ADD     A,#-0x11
   \   0001B3   60BB         JZ      ??zha_project_event_loop_7
   \   0001B5   24FE         ADD     A,#-0x2
   \   0001B7   70CC         JNZ     ??zha_project_event_loop_8
   \   0001B9                ; Setup parameters for call to function zha_project_ProcessZDOMsgs
   \   0001B9   12....       LCALL   `??zha_project_ProcessZDOMsgs::?relay`; Banked call to: zha_project_ProcessZDOMsgs
   \   0001BC   80C7         SJMP    ??zha_project_event_loop_8
   \                     ??zha_project_event_loop_11:
   \   0001BE   EA           MOV     A,R2
   \   0001BF   2417         ADD     A,#0x17
   \   0001C1   F8           MOV     R0,A
   \   0001C2   E4           CLR     A
   \   0001C3   35..         ADDC    A,?V1
   \   0001C5   F9           MOV     R1,A
   \   0001C6   88..         MOV     ?V2,R0
   \   0001C8   89..         MOV     ?V3,R1
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   14           DEC     A
   \   0001D3   6024         JZ      ??zha_project_event_loop_13
   \   0001D5   24FD         ADD     A,#-0x3
   \   0001D7   6009         JZ      ??zha_project_event_loop_14
   \   0001D9   24FA         ADD     A,#-0x6
   \   0001DB   701F         JNZ     ??zha_project_event_loop_15
   \   0001DD                ; Setup parameters for call to function zha_project_ProcessInReportCmd
   \   0001DD   12....       LCALL   `??zha_project_ProcessInReportCmd::?relay`; Banked call to: zha_project_ProcessInReportCmd
   \   0001E0   801A         SJMP    ??zha_project_event_loop_15
   \                     ??zha_project_event_loop_14:
   \   0001E2   8882         MOV     DPL,R0
   \   0001E4   8983         MOV     DPH,R1
   \   0001E6   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0001E9   8882         MOV     DPL,R0
   \   0001EB   8983         MOV     DPH,R1
   \   0001ED   7800         MOV     R0,#0x0
   \                     ??zha_project_event_loop_16:
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F9           MOV     R1,A
   \   0001F1   E8           MOV     A,R0
   \   0001F2   C3           CLR     C
   \   0001F3   99           SUBB    A,R1
   \   0001F4   5006         JNC     ??zha_project_event_loop_15
   \   0001F6   08           INC     R0
   \   0001F7   80F6         SJMP    ??zha_project_event_loop_16
   \                     ??zha_project_event_loop_13:
   \   0001F9                ; Setup parameters for call to function zha_project_ProcessInReadRspCmd
   \   0001F9   12....       LCALL   `??zha_project_ProcessInReadRspCmd::?relay`; Banked call to: zha_project_ProcessInReadRspCmd
   \                     ??zha_project_event_loop_15:
   \   0001FC   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0001FF   6084         JZ      ??zha_project_event_loop_8
   \   000201                ; Setup parameters for call to function osal_mem_free
   \   000201   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000204   02....       LJMP    ??zha_project_event_loop_8 & 0xFFFF
   \                     ??zha_project_event_loop_12:
   \   000207                ; Setup parameters for call to function zha_project_HandleKeys
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   FA           MOV     R2,A
   \   00020C   85..82       MOV     DPL,?V0
   \   00020F   8B83         MOV     DPH,R3
   \   000211   A3           INC     DPTR
   \   000212   A3           INC     DPTR
   \   000213   E0           MOVX    A,@DPTR
   \   000214   F9           MOV     R1,A
   \   000215   12....       LCALL   `??zha_project_HandleKeys::?relay`; Banked call to: zha_project_HandleKeys
   \   000218   02....       LJMP    ??zha_project_event_loop_8 & 0xFFFF
   \                     ??zha_project_event_loop_10:
   \   00021B                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   00021B   12....       LCALL   `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
   \   00021E   02....       LJMP    ??zha_project_event_loop_8 & 0xFFFF
   \                     ??zha_project_event_loop_9:
   \   000221   EE           MOV     A,R6
   \   000222   FA           MOV     R2,A
   \   000223   EF           MOV     A,R7
   \   000224   6480         XRL     A,#0x80
   \   000226   02....       LJMP    ??zha_project_event_loop_17 & 0xFFFF
    750                  {
    751                      if(ep[i]!=0)
   \                     ??zha_project_event_loop_18:
   \   000229   A8..         MOV     R0,?V0
   \   00022B   74..         MOV     A,#ep & 0xff
   \   00022D   28           ADD     A,R0
   \   00022E   F582         MOV     DPL,A
   \   000230   E4           CLR     A
   \   000231   34..         ADDC    A,#(ep >> 8) & 0xff
   \   000233   F583         MOV     DPH,A
   \   000235   E0           MOVX    A,@DPTR
   \   000236   F9           MOV     R1,A
   \   000237   6013         JZ      ??zha_project_event_loop_19
    752                      {
    753                            ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,
    754                                      ep[i], 0);
   \   000239                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000239   75..00       MOV     ?V1,#0x0
   \   00023C   78..         MOV     R0,#?V1
   \   00023E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000241   12....       LCALL   ?Subroutine16 & 0xFFFF
    755                      }
    756                  }
   \                     ??CrossCallReturnLabel_43:
   \   000244   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   000247   7401         MOV     A,#0x1
   \   000249   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zha_project_event_loop_19:
   \   00024C   05..         INC     ?V0
   \                     ??zha_project_event_loop_6:
   \   00024E   90....       MOV     DPTR,#zha_project_ActiveEP
   \   000251   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000254   A3           INC     DPTR
   \   000255   A3           INC     DPTR
   \   000256   A3           INC     DPTR
   \   000257   E0           MOVX    A,@DPTR
   \   000258   C3           CLR     C
   \   000259   95..         SUBB    A,?V0
   \   00025B   50CC         JNC     ??zha_project_event_loop_18
    757                  osal_memset(ep,0,sizeof(ep));
   \   00025D                ; Setup parameters for call to function osal_memset
   \   00025D   7C05         MOV     R4,#0x5
   \   00025F   7D00         MOV     R5,#0x0
   \   000261   7900         MOV     R1,#0x0
   \   000263   7A..         MOV     R2,#ep & 0xff
   \   000265   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   000267   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    758                  //return ( events ^ SIMPLE_DESC_QUERY_EVT );
    759              }
    760          
    761            // handle processing of timeout event triggered by request fast polling command
    762          
    763              if ( events & SIMPLE_DESC_EVT )
   \                     ??zha_project_event_loop_5:
   \   00026A   EE           MOV     A,R6
   \   00026B   5440         ANL     A,#0x40
   \   00026D   6015         JZ      ??zha_project_event_loop_20
    764              {
    765                  ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,1, 0);
   \   00026F                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   00026F   75..00       MOV     ?V0,#0x0
   \   000272   78..         MOV     R0,#?V0
   \   000274   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000277   7901         MOV     R1,#0x1
   \   000279   12....       LCALL   ?Subroutine16 & 0xFFFF
    766                  //return ( events ^ SIMPLE_DESC_QUERY_EVT );
    767              }
   \                     ??CrossCallReturnLabel_44:
   \   00027C   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00027F   7401         MOV     A,#0x1
   \   000281   12....       LCALL   ?DEALLOC_XSTACK8
    768              if ( events & RESET_EVT )
   \                     ??zha_project_event_loop_20:
   \   000284   EF           MOV     A,R7
   \   000285   5402         ANL     A,#0x2
   \   000287   600A         JZ      ??zha_project_event_loop_21
    769              {
    770                  Onboard_soft_reset();
   \   000289                ; Setup parameters for call to function Onboard_soft_reset
   \   000289   12....       LCALL   Onboard_soft_reset & 0xFFFF
    771                  return ( events ^ RESET_EVT );
   \   00028C   EE           MOV     A,R6
   \   00028D   FA           MOV     R2,A
   \   00028E   EF           MOV     A,R7
   \   00028F   6402         XRL     A,#0x2
   \   000291   801C         SJMP    ??zha_project_event_loop_17
    772              }  
    773          #if ZG_BUILD_COORDINATOR_TYPE    
    774               if ( events & DEVICE_STATUS_EVT )
   \                     ??zha_project_event_loop_21:
   \   000293   EF           MOV     A,R7
   \   000294   5401         ANL     A,#0x1
   \   000296   600A         JZ      ??zha_project_event_loop_22
    775              {
    776                  CheckDeviceStatus();
                         ^
Warning[Pe223]: function "CheckDeviceStatus" declared implicitly
   \   000298                ; Setup parameters for call to function CheckDeviceStatus
   \   000298   12....       LCALL   `??CheckDeviceStatus::?relay`; Banked call to: CheckDeviceStatus
    777                  return ( events ^ DEVICE_STATUS_EVT ); 
   \   00029B   EE           MOV     A,R6
   \   00029C   FA           MOV     R2,A
   \   00029D   EF           MOV     A,R7
   \   00029E   6401         XRL     A,#0x1
   \   0002A0   800D         SJMP    ??zha_project_event_loop_17
    778              }
    779               if ( events & SET_DEVICE_STATE_EVT )
   \                     ??zha_project_event_loop_22:
   \   0002A2   EF           MOV     A,R7
   \   0002A3   5404         ANL     A,#0x4
   \   0002A5   600B         JZ      ??zha_project_event_loop_23
    780              {
    781                  SendCommond();
                         ^
Warning[Pe223]: function "SendCommond" declared implicitly
   \   0002A7                ; Setup parameters for call to function SendCommond
   \   0002A7   12....       LCALL   `??SendCommond::?relay`; Banked call to: SendCommond
    782                  return ( events ^ SET_DEVICE_STATE_EVT ); 
   \   0002AA   EE           MOV     A,R6
   \   0002AB   FA           MOV     R2,A
   \   0002AC   EF           MOV     A,R7
   \   0002AD   6404         XRL     A,#0x4
   \                     ??zha_project_event_loop_17:
   \   0002AF   FB           MOV     R3,A
   \   0002B0   8004         SJMP    ??zha_project_event_loop_24
    783              }
    784          #if ZG_BUILD_ENDDEVICE_TYPE    
    785              if ( events & SEND_REPORT_EVT )
    786              {
    787                  sendReport();
    788                  return ( events ^ SEND_REPORT_EVT );
    789              } 
    790          #endif
    791          
    792          #endif    
    793            // Discard unknown events
    794            return 0;
   \                     ??zha_project_event_loop_23:
   \   0002B2   7A00         MOV     R2,#0x0
   \   0002B4   7B00         MOV     R3,#0x0
   \                     ??zha_project_event_loop_24:
   \   0002B6   7435         MOV     A,#0x35
   \   0002B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002BB   7F04         MOV     R7,#0x4
   \   0002BD   02....       LJMP    ?BANKED_LEAVE_XDATA
    795          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine40_0
   \   000006                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV     DPTR,#simpleDescReqAddr
   \   000003   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000006   7A..         MOV     R2,#simpleDescReqAddr & 0xff
   \   000008   7B..         MOV     R3,#(simpleDescReqAddr >> 8) & 0xff
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003                ; Setup parameters for call to function zcl_SendRead
   \   000003                ; Setup parameters for call to function zcl_SendRead
   \   000003                ; Setup parameters for call to function zcl_SendRead
   \   000003   F5..         MOV     ?V0,A
   \   000005   78..         MOV     R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#simpleDescReqAddr
   \   000006   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   7409         MOV     A,#0x9
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    796          
    797          
    798          /*********************************************************************
    799           * @fn      zha_project_HandleKeys
    800           *
    801           * @brief   Handles all key events for this device.
    802           *
    803           * @param   shift - true if in shift/alt.
    804           * @param   keys - bit field for key events. Valid entries:
    805           *                 HAL_KEY_SW_5
    806           *                 HAL_KEY_SW_4
    807           *                 HAL_KEY_SW_2
    808           *                 HAL_KEY_SW_1
    809           *
    810           * @return  none
    811           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    812          static void zha_project_HandleKeys( byte shift, byte keys )
   \                     zha_project_HandleKeys:
    813          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    814            if ( keys & HAL_KEY_SW_1 )
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   501E         JNC     ??zha_project_HandleKeys_0
    815            {
    816              giLightScreenMode = LIGHT_MAINMODE;
   \   000012   90....       MOV     DPTR,#giLightScreenMode
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    817          
    818              // toggle local light immediately
    819              zha_project_OnOff = zha_project_OnOff ? LIGHT_OFF : LIGHT_ON;
   \   000017   90....       MOV     DPTR,#zha_project_OnOff
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6008         JZ      ??zha_project_HandleKeys_1
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   90....       MOV     DPTR,#zha_project_LevelCurrentLevel
   \   000022   04           INC     A
   \   000023   800A         SJMP    ??zha_project_HandleKeys_2
   \                     ??zha_project_HandleKeys_1:
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#zha_project_LevelOnLevel
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   90....       MOV     DPTR,#zha_project_LevelCurrentLevel
   \                     ??zha_project_HandleKeys_2:
   \   00002F   F0           MOVX    @DPTR,A
    820          #ifdef ZCL_LEVEL_CTRL
    821              zha_project_LevelCurrentLevel = zha_project_OnOff ? zha_project_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    822          #endif
    823            }
    824          
    825            if ( keys & HAL_KEY_SW_2 )
   \                     ??zha_project_HandleKeys_0:
   \   000030   EF           MOV     A,R7
   \   000031   A2E1         MOV     C,0xE0 /* A   */.1
   \   000033   505D         JNC     ??zha_project_HandleKeys_3
    826            {
    827          #if (defined HAL_BOARD_ZLIGHT)
    828          
    829              zha_project_BasicResetCB();
    830          
    831          #else
    832          
    833              giLightScreenMode = LIGHT_MAINMODE;
   \   000035   90....       MOV     DPTR,#giLightScreenMode
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    834          
    835          #ifdef ZCL_EZMODE
    836              {
    837                // Invoke EZ-Mode
    838                zclEZMode_InvokeData_t ezModeData;
    839          
    840                // Invoke EZ-Mode
    841                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   04           INC     A
   \   000041   F0           MOVX    @DPTR,A
    842                if ( (zha_project_NwkState == DEV_ZB_COORD) ||
    843                    (zha_project_NwkState == DEV_ROUTER)   ||
    844                      (zha_project_NwkState == DEV_END_DEVICE) )
   \   000042   90....       MOV     DPTR,#zha_project_NwkState
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6409         XRL     A,#0x9
   \   000048   600A         JZ      ??zha_project_HandleKeys_4
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6407         XRL     A,#0x7
   \   00004D   6005         JZ      ??zha_project_HandleKeys_4
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6406         XRL     A,#0x6
   \   000052   7009         JNZ     ??zha_project_HandleKeys_5
    845                {
    846                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zha_project_HandleKeys_4:
   \   000054   7401         MOV     A,#0x1
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   7401         MOV     A,#0x1
   \   00005B   8006         SJMP    ??zha_project_HandleKeys_6
    847                }
    848                else
    849                {
    850                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zha_project_HandleKeys_5:
   \   00005D   7401         MOV     A,#0x1
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E4           CLR     A
   \                     ??zha_project_HandleKeys_6:
   \   000063   F0           MOVX    @DPTR,A
    851                }
    852                ezModeData.initiator = FALSE;          // OnOffLight is a target
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    853                ezModeData.numActiveOutClusters = 0;
   \   00006B   7406         MOV     A,#0x6
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
    854                ezModeData.pActiveOutClusterIDs = NULL;
   \   000072   7407         MOV     A,#0x7
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   F0           MOVX    @DPTR,A
    855                ezModeData.numActiveInClusters = 0;
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
    856                ezModeData.pActiveOutClusterIDs = NULL;
   \   000082   7407         MOV     A,#0x7
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E4           CLR     A
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   F0           MOVX    @DPTR,A
    857                zcl_InvokeEZMode( &ezModeData );
   \   00008B                ; Setup parameters for call to function zcl_InvokeEZMode
   \   00008B   AA..         MOV     R2,?XSP + 0
   \   00008D   AB..         MOV     R3,?XSP + 1
   \   00008F   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    858              }
    859          
    860          #else // NOT EZ-Mode
    861              {
    862                zAddrType_t dstAddr;
    863                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    864          
    865                // Initiate an End Device Bind Request, this bind request will
    866                // only use a cluster list that is important to binding.
    867                dstAddr.addrMode = afAddr16Bit;
    868                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    869                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    870                                     SAMPLELIGHT_ENDPOINT,
    871                                     ZCL_HA_PROFILE_ID,
    872                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    873                                     0, NULL,   // No Outgoing clusters to bind
    874                                     TRUE );
    875              }
    876          #endif // ZCL_EZMODE
    877          #endif // HAL_BOARD_ZLIGHT
    878            }
    879          
    880            if ( keys & HAL_KEY_SW_3 )
   \                     ??zha_project_HandleKeys_3:
   \   000092   EF           MOV     A,R7
   \   000093   A2E4         MOV     C,0xE0 /* A   */.4
   \   000095   5023         JNC     ??zha_project_HandleKeys_7
    881            {
    882              NLME_SendNetworkStatus( zha_project_DstAddr.addr.shortAddr,
    883                                 NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
   \   000097                ; Setup parameters for call to function NLME_GetShortAddr
   \   000097   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00009A   8A..         MOV     ?V0,R2
   \   00009C   8B..         MOV     ?V1,R3
   \   00009E   AC..         MOV     R4,?V0
   \   0000A0   AD..         MOV     R5,?V1
   \   0000A2                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   0000A2   75..00       MOV     ?V0,#0x0
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   7902         MOV     R1,#0x2
   \   0000AC   90....       MOV     DPTR,#zha_project_DstAddr
   \   0000AF   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    884            }
   \                     ??CrossCallReturnLabel_89:
   \   0000B2   12....       LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
    885          
    886            if ( keys & HAL_KEY_SW_4 )
   \                     ??zha_project_HandleKeys_7:
   \   0000BA   EF           MOV     A,R7
   \   0000BB   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000BD   5041         JNC     ??zha_project_HandleKeys_8
    887            {
    888              giLightScreenMode = LIGHT_MAINMODE;
   \   0000BF   90....       MOV     DPTR,#giLightScreenMode
   \   0000C2   E4           CLR     A
   \   0000C3   F0           MOVX    @DPTR,A
    889          
    890              if ( ( zha_project_NwkState == DEV_ZB_COORD ) ||
    891                    ( zha_project_NwkState == DEV_ROUTER ) )
   \   0000C4   90....       MOV     DPTR,#zha_project_NwkState
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6409         XRL     A,#0x9
   \   0000CA   6005         JZ      ??zha_project_HandleKeys_9
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6407         XRL     A,#0x7
   \   0000CF   702F         JNZ     ??zha_project_HandleKeys_8
    892              {
    893                zAddrType_t tmpAddr;
    894          
    895                tmpAddr.addrMode = Addr16Bit;
   \                     ??zha_project_HandleKeys_9:
   \   0000D1   7408         MOV     A,#0x8
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   F0           MOVX    @DPTR,A
    896                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0000D9                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000D9   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000DC   85..82       MOV     DPL,?XSP + 0
   \   0000DF   85..83       MOV     DPH,?XSP + 1
   \   0000E2   EA           MOV     A,R2
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   EB           MOV     A,R3
   \   0000E6   F0           MOVX    @DPTR,A
    897          
    898                // toggle permit join
    899                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   0000E7   90....       MOV     DPTR,#gPermitDuration
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   6003         JZ      ??zha_project_HandleKeys_10
   \   0000ED   E4           CLR     A
   \   0000EE   8002         SJMP    ??zha_project_HandleKeys_11
   \                     ??zha_project_HandleKeys_10:
   \   0000F0   74FF         MOV     A,#-0x1
   \                     ??zha_project_HandleKeys_11:
   \   0000F2   F0           MOVX    @DPTR,A
    900          
    901                // Trust Center significance is always true
    902                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   0000F3                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   0000F3   7D00         MOV     R5,#0x0
   \   0000F5   7C01         MOV     R4,#0x1
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F9           MOV     R1,A
   \   0000F9   AA..         MOV     R2,?XSP + 0
   \   0000FB   AB..         MOV     R3,?XSP + 1
   \   0000FD   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    903              }
    904            }
    905          
    906            // Shift F5 does a Basic Reset (factory defaults)
    907            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zha_project_HandleKeys_8:
   \   000100   EE           MOV     A,R6
   \   000101   600A         JZ      ??zha_project_HandleKeys_12
   \   000103   EF           MOV     A,R7
   \   000104   A2E2         MOV     C,0xE0 /* A   */.2
   \   000106   5016         JNC     ??zha_project_HandleKeys_13
    908            {
    909              zha_project_BasicResetCB();
   \   000108                ; Setup parameters for call to function zha_project_BasicResetCB
   \   000108   12....       LCALL   `??zha_project_BasicResetCB::?relay`; Banked call to: zha_project_BasicResetCB
   \   00010B   8011         SJMP    ??zha_project_HandleKeys_13
    910            }
    911            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zha_project_HandleKeys_12:
   \   00010D   EF           MOV     A,R7
   \   00010E   A2E2         MOV     C,0xE0 /* A   */.2
   \   000110   500C         JNC     ??zha_project_HandleKeys_13
    912            {
    913              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
   \   000112   90....       MOV     DPTR,#giLightScreenMode
   \   000115   E0           MOVX    A,@DPTR
   \   000116   6003         JZ      ??zha_project_HandleKeys_14
   \   000118   E4           CLR     A
   \   000119   8002         SJMP    ??zha_project_HandleKeys_15
   \                     ??zha_project_HandleKeys_14:
   \   00011B   7401         MOV     A,#0x1
   \                     ??zha_project_HandleKeys_15:
   \   00011D   F0           MOVX    @DPTR,A
    914            }
    915          
    916            // update the display, including the light
    917            //zha_project_LcdDisplayUpdate();
    918          }
   \                     ??zha_project_HandleKeys_13:
   \   00011E   7409         MOV     A,#0x9
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
   \   000123                REQUIRE ?Subroutine0
   \   000123                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   22           RET
    919          
    920          
    921          /*********************************************************************
    922           * @fn      zha_project_DisplayLight
    923           *
    924           * @brief   Displays current state of light on LED and also on main display if supported.
    925           *
    926           * @param   none
    927           *
    928           * @return  none
    929           */
    930          static void zha_project_DisplayLight( void )
    931          {
    932            // set the LED1 based on light (on or off)
    933            if ( zha_project_OnOff == LIGHT_ON )
    934            {
    935              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    936            }
    937            else
    938            {
    939              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    940            }
    941          
    942          #ifdef LCD_SUPPORTED
    943            if (giLightScreenMode == LIGHT_MAINMODE)
    944            {
    945          #ifdef ZCL_LEVEL_CTRL
    946              // display current light level
    947              if ( ( zha_project_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    948                   ( zha_project_OnOff == LIGHT_OFF ) )
    949              {
    950                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    951              }
    952              else if ( ( zha_project_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    953                        ( zha_project_LevelCurrentLevel == zha_project_LevelOnLevel ) ||
    954                         ( ( zha_project_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    955                           ( zha_project_LevelCurrentLevel == zha_project_LevelLastLevel ) ) )
    956              {
    957                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    958              }
    959              else    // "    LEVEL ###"
    960              {
    961                zclHA_uint8toa( zha_project_LevelCurrentLevel, &sLightLevel[10] );
    962                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
    963              }
    964          #else
    965              if ( zha_project_OnOff )
    966              {
    967                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    968              }
    969              else
    970              {
    971                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    972              }
    973          #endif // ZCL_LEVEL_CTRL
    974            }
    975          #endif // LCD_SUPPORTED
    976          }
    977          
    978          /*********************************************************************
    979           * @fn      zha_project_BasicResetCB
    980           *
    981           * @brief   Callback from the ZCL General Cluster Library
    982           *          to set all the Basic Cluster attributes to default values.
    983           *
    984           * @param   none
    985           *
    986           * @return  none
    987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    988          static void zha_project_BasicResetCB( void )
   \                     zha_project_BasicResetCB:
    989          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    990            NLME_LeaveReq_t leaveReq;
    991            // Set every field to 0
    992            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    993          
    994            // This will enable the device to rejoin the network after reset.
    995            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    996          
    997            // Set the NV startup option to force a "new" join.
    998            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    999          
   1000            // Leave the network, and reset afterwards
   1001            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zha_project_BasicResetCB_0
   1002            {
   1003              // Couldn't send out leave; prepare to reset anyway
   1004              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   1005            }
   1006          }
   \                     ??zha_project_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1007          
   1008          /*********************************************************************
   1009           * @fn      zha_project_IdentifyCB
   1010           *
   1011           * @brief   Callback from the ZCL General Cluster Library when
   1012           *          it received an Identity Command for this application.
   1013           *
   1014           * @param   srcAddr - source address and endpoint of the response message
   1015           * @param   identifyTime - the number of seconds to identify yourself
   1016           *
   1017           * @return  none
   1018           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1019          static void zha_project_IdentifyCB( zclIdentify_t *pCmd )
   \                     zha_project_IdentifyCB:
   1020          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1021            zha_project_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00000D   90....       MOV     DPTR,#zha_project_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   1022          //zha_project_ProcessIdentifyTimeChange();
   1023          }
   \   000015   80..         SJMP    ??Subroutine41_0
   1024          
   1025          /*********************************************************************
   1026           * @fn      zha_project_IdentifyQueryRspCB
   1027           *
   1028           * @brief   Callback from the ZCL General Cluster Library when
   1029           *          it received an Identity Query Response Command for this application.
   1030           *
   1031           * @param   srcAddr - requestor's address
   1032           * @param   timeout - number of seconds to identify yourself (valid for query response)
   1033           *
   1034           * @return  none
   1035           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1036          static void zha_project_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zha_project_IdentifyQueryRspCB:
   1037          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1038            (void)pRsp;
   1039          #ifdef ZCL_EZMODE
   1040            {
   1041              zclEZMode_ActionData_t data;
   1042              data.pIdentifyQueryRsp = pRsp;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   1043              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
   \   000014                ; Setup parameters for call to function zcl_EZModeAction
   \   000014   AA..         MOV     R2,?XSP + 0
   \   000016   AB..         MOV     R3,?XSP + 1
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   1044            }
   1045          #endif
   1046          }
   \   00001D   7402         MOV     A,#0x2
   \   00001F   80..         SJMP    ?Subroutine1
   1047          
   1048          /*********************************************************************
   1049           * @fn      zha_project_OnOffCB
   1050           *
   1051           * @brief   Callback from the ZCL General Cluster Library when
   1052           *          it received an On/Off Command for this application.
   1053           *
   1054           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
   1055           *
   1056           * @return  none
   1057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1058          static void zha_project_OnOffCB( uint8 cmd )
   \                     zha_project_OnOffCB:
   1059          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1060            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   1061          
   1062            zha_project_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000017   F0           MOVX    @DPTR,A
   1063          
   1064          
   1065            // Turn on the light
   1066            if ( cmd == COMMAND_ON )
   \   000018   7401         MOV     A,#0x1
   \   00001A   6E           XRL     A,R6
   \   00001B   600E         JZ      ??zha_project_OnOffCB_0
   1067            {
   1068              zha_project_OnOff = LIGHT_ON;
   1069            }
   1070            // Turn off the light
   1071            else if ( cmd == COMMAND_OFF )
   \   00001D   EE           MOV     A,R6
   \   00001E   6013         JZ      ??zha_project_OnOffCB_1
   1072            {
   1073              zha_project_OnOff = LIGHT_OFF;
   1074            }
   1075            // Toggle the light
   1076            else if ( cmd == COMMAND_TOGGLE )
   \   000020   7402         MOV     A,#0x2
   \   000022   6E           XRL     A,R6
   \   000023   90....       MOV     DPTR,#zha_project_OnOff
   \   000026   701A         JNZ     ??zha_project_OnOffCB_2
   1077            {
   1078              if ( zha_project_OnOff == LIGHT_OFF )
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7008         JNZ     ??zha_project_OnOffCB_1
   1079              {
   1080                zha_project_OnOff = LIGHT_ON;
   \                     ??zha_project_OnOffCB_0:
   \   00002B   90....       MOV     DPTR,#zha_project_OnOff
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   8014         SJMP    ??zha_project_OnOffCB_3
   1081              }
   1082              else
   1083              {
   1084                zha_project_OnOff = LIGHT_OFF;
   \                     ??zha_project_OnOffCB_1:
   \   000033   90....       MOV     DPTR,#zha_project_OnOff
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   1085              }
   1086            }
   1087          
   1088              if ( zha_project_OnOff == LIGHT_ON )
   1089            {
   1090              HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   1091              //sprintf(buf,"+OK=light,%x\r\n",zclZHAtest_OnOff);
   1092              //HalUARTWrite(HAL_UART_PORT_0,buf,13);
   1093            }
   1094            else
   1095            {
   1096              HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zha_project_OnOffCB_4:
   \   000038                ; Setup parameters for call to function HalLedSet
   \   000038   7A00         MOV     R2,#0x0
   \                     ??zha_project_OnOffCB_5:
   \   00003A   7908         MOV     R1,#0x8
   \   00003C   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   1097              //sprintf(buf,"+OK=LIGHT,%x\r\n",zclZHAtest_OnOff);
   1098              //HalUARTWrite(HAL_UART_PORT_0,buf,13);
   1099             }
   1100            
   1101          #if ZCL_LEVEL_CTRL
   1102            //zha_project_DefaultMove( );
   1103          #endif
   1104          
   1105            // update the display
   1106            //zha_project_LcdDisplayUpdate( );
   1107          }
   \   00003F   02....       LJMP    ?Subroutine0 & 0xFFFF
   \                     ??zha_project_OnOffCB_2:
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6401         XRL     A,#0x1
   \   000045   70F1         JNZ     ??zha_project_OnOffCB_4
   \                     ??zha_project_OnOffCB_3:
   \   000047                ; Setup parameters for call to function HalLedSet
   \   000047   7A01         MOV     R2,#0x1
   \   000049   80EF         SJMP    ??zha_project_OnOffCB_5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   90....       MOV     DPTR,#zha_project_DstAddr
   \   000006   E8           MOV     A,R0
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   E9           MOV     A,R1
   \   00000A   22           RET
   1108          
   1109          
   1110          /******************************************************************************
   1111           *
   1112           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1113           *
   1114           *****************************************************************************/
   1115          
   1116          /*********************************************************************
   1117           * @fn      zha_project_ProcessIncomingMsg
   1118           *
   1119           * @brief   Process ZCL Foundation incoming message
   1120           *
   1121           * @param   pInMsg - pointer to the received message
   1122           *
   1123           * @return  none
   1124           */
   1125          static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1126          {
   1127            switch ( pInMsg->zclHdr.commandID )
   1128            {
   1129          #ifdef ZCL_READ
   1130              case ZCL_CMD_READ_RSP:
   1131                zha_project_ProcessInReadRspCmd( pInMsg );
   1132                break;
   1133          #endif
   1134          #ifdef ZCL_WRITE
   1135              case ZCL_CMD_WRITE_RSP:
   1136                zha_project_ProcessInWriteRspCmd( pInMsg );
   1137                break;
   1138          #endif
   1139          #ifdef ZCL_REPORT
   1140              // Attribute Reporting implementation should be added here
   1141              case ZCL_CMD_CONFIG_REPORT:
   1142                // zha_project_ProcessInConfigReportCmd( pInMsg );
   1143                break;
   1144          
   1145              case ZCL_CMD_CONFIG_REPORT_RSP:
   1146                // zha_project_ProcessInConfigReportRspCmd( pInMsg );
   1147                break;
   1148          
   1149              case ZCL_CMD_READ_REPORT_CFG:
   1150                // zha_project_ProcessInReadReportCfgCmd( pInMsg );
   1151                break;
   1152          
   1153              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1154                // zha_project_ProcessInReadReportCfgRspCmd( pInMsg );
   1155                break;
   1156          
   1157              case ZCL_CMD_REPORT:
   1158                zha_project_ProcessInReportCmd( pInMsg );
   1159                break;
   1160          #endif
   1161              case ZCL_CMD_DEFAULT_RSP:
   1162                zha_project_ProcessInDefaultRspCmd( pInMsg );
   1163                break;
   1164          #ifdef ZCL_DISCOVER
   1165              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1166                zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
   1167                break;
   1168          
   1169              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1170                zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
   1171                break;
   1172          
   1173              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1174                zha_project_ProcessInDiscAttrsRspCmd( pInMsg );
   1175                break;
   1176          
   1177              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1178                zha_project_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1179                break;
   1180          #endif
   1181              default:
   1182                break;
   1183            }
   1184          
   1185            if ( pInMsg->attrCmd )
   1186              osal_mem_free( pInMsg->attrCmd );
   1187          }
   1188          
   1189          #ifdef ZCL_READ
   1190          /*********************************************************************
   1191           * @fn      zha_project_ProcessInReadRspCmd
   1192           *
   1193           * @brief   Process the "Profile" Read Response Command
   1194           *
   1195           * @param   pInMsg - incoming message to process
   1196           *
   1197           * @return  none
   1198           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1199          static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zha_project_ProcessInReadRspCmd:
   1200          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 43
   \   000005   74D5         MOV     A,#-0x2b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
   1201            zclReadRspCmd_t *readRspCmd;
   1202              uint8 i,k;
   1203              uint8 *j;
   1204              uint16 *p;
   1205              readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd; 
   \                     ??CrossCallReturnLabel_57:
   \   00000D   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   1206              switch(pInMsg->clusterId)
   \                     ??CrossCallReturnLabel_116:
   \   000010   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000019   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_0`:
   \   00001C   0000         DW        0
   \   00001E   0A00         DW        10
   \   000020   0000         DW        0
   \   000022   ....         DW        ??zha_project_ProcessInReadRspCmd_0
   \   000024   0100         DW        1
   \   000026   ....         DW        ??zha_project_ProcessInReadRspCmd_1
   \   000028   0600         DW        6
   \   00002A   ....         DW        ??zha_project_ProcessInReadRspCmd_2
   \   00002C   0800         DW        8
   \   00002E   ....         DW        ??zha_project_ProcessInReadRspCmd_3
   \   000030   0003         DW        768
   \   000032   ....         DW        ??zha_project_ProcessInReadRspCmd_4
   \   000034   0004         DW        1024
   \   000036   ....         DW        ??zha_project_ProcessInReadRspCmd_5
   \   000038   0204         DW        1026
   \   00003A   ....         DW        ??zha_project_ProcessInReadRspCmd_6
   \   00003C   0504         DW        1029
   \   00003E   ....         DW        ??zha_project_ProcessInReadRspCmd_7
   \   000040   0005         DW        1280
   \   000042   ....         DW        ??zha_project_ProcessInReadRspCmd_8
   \   000044   0205         DW        1282
   \   000046   ....         DW        ??zha_project_ProcessInReadRspCmd_9
   \   000048   ....         DW        ??zha_project_ProcessInReadRspCmd_10
   1207              {
   1208          #if ZG_BUILD_COORDINATOR_TYPE      
   1209                case ZCL_CLUSTER_ID_GEN_BASIC:
   1210                  {
   1211                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_0:
   \   00004A   75..00       MOV     ?V0,#0x0
   \   00004D   8008         SJMP    ??zha_project_ProcessInReadRspCmd_11
   1212                    {
   1213                          zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1214                          j=statusRec->data;
   1215                          switch(statusRec->attrID)
   1216                          {
   1217                              case ATTRID_BASIC_POWER_SOURCE:
   1218                                  uint8 zha_project_PowerSource=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1219                                  break;
   1220          //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
   1221          //                        zha_project_BatteryVoltage=*j;
   1222          //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
   1223          //                        break;
   1224                              case ATTRID_BASIC_ZCL_VERSION:
   1225                                  break;
   1226                              case ATTRID_BASIC_MODEL_ID:
   1227                                  break;
   1228                              case ATTRID_BASIC_MANUFACTURER_NAME:
   1229                                  SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
                                         ^
Warning[Pe223]: function "SetTempDeviceManuName" declared implicitly
   1230                                  break;
   1231                              case ATTRID_BASIC_HW_VERSION:
   1232                                  uint8 zha_project_HWRevision = *j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1233                                  SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zha_project_HWRevision);
                                         ^
Warning[Pe223]: function "SetTempDeviceHW" declared implicitly
   1234                                  break;           
   1235                              case ATTRID_BASIC_SERIAL_NUMBER:
   1236                                SetTempDeviceSerial(pInMsg->srcAddr.addr.shortAddr,j);
                                       ^
Warning[Pe223]: function "SetTempDeviceSerial" declared implicitly

                          uint8 zha_project_PowerSource=*j;
                                ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1218  Warning[Pe177]: 
          variable "zha_project_PowerSource" was declared but never referenced

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1215  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zha_project_PowerSource" (declared at line 1218 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
            variable "zha_project_HWRevision" (declared at line 1232 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \                     ??zha_project_ProcessInReadRspCmd_12:
   \   00004F                ; Setup parameters for call to function SetTempDeviceSerial
   \   00004F   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000052   12....       LCALL   `??SetTempDeviceSerial::?relay`; Banked call to: SetTempDeviceSerial
   1237                                break;
   \                     ??zha_project_ProcessInReadRspCmd_13:
   \   000055   05..         INC     ?V0
   \                     ??zha_project_ProcessInReadRspCmd_11:
   \   000057   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00005A   502C         JNC     ??zha_project_ProcessInReadRspCmd_14
   \   00005C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00005F   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_1`:
   \   000062   0000         DW        0
   \   000064   0300         DW        3
   \   000066   0300         DW        3
   \   000068   ....         DW        ??zha_project_ProcessInReadRspCmd_15
   \   00006A   0400         DW        4
   \   00006C   ....         DW        ??zha_project_ProcessInReadRspCmd_16
   \   00006E   0900         DW        9
   \   000070   ....         DW        ??zha_project_ProcessInReadRspCmd_12
   \   000072   ....         DW        ??zha_project_ProcessInReadRspCmd_13
   \                     ??zha_project_ProcessInReadRspCmd_16:
   \   000074                ; Setup parameters for call to function SetTempDeviceManuName
   \   000074   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000077   12....       LCALL   `??SetTempDeviceManuName::?relay`; Banked call to: SetTempDeviceManuName
   \   00007A   80D9         SJMP    ??zha_project_ProcessInReadRspCmd_13
   \                     ??zha_project_ProcessInReadRspCmd_15:
   \   00007C                ; Setup parameters for call to function SetTempDeviceHW
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000083   12....       LCALL   `??SetTempDeviceHW::?relay`; Banked call to: SetTempDeviceHW
   \   000086   80CD         SJMP    ??zha_project_ProcessInReadRspCmd_13
   1238                              default:
   1239                                break;
   1240                          
   1241                          }
   1242          
   1243                    }
   1244                  }
   1245                  osal_set_event( zha_project_TaskID,ZHA_ATTRIBUTE_POWER_EVT);
   \                     ??zha_project_ProcessInReadRspCmd_14:
   \   000088                ; Setup parameters for call to function osal_set_event
   \   000088   7A80         MOV     R2,#-0x80
   \   00008A   8025         SJMP    ??zha_project_ProcessInReadRspCmd_17
   1246                  
   1247                  break;
   1248                  
   1249                case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1250                  {
   1251                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_1:
   \   00008C   75..00       MOV     ?V0,#0x0
   \   00008F   8019         SJMP    ??zha_project_ProcessInReadRspCmd_18
   1252                    {
   1253                          zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReadRspCmd_19:
   \   000091   12....       LCALL   ?Subroutine25 & 0xFFFF
   1254                          j=statusRec->data;
   1255                          switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_55:
   \   000094   E0           MOVX    A,@DPTR
   \   000095   6420         XRL     A,#0x20
   \   000097   7002         JNZ     ??zha_project_ProcessInReadRspCmd_20
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReadRspCmd_20:
   \   00009B   700B         JNZ     ??zha_project_ProcessInReadRspCmd_21
   1256                          {
   1257                              case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
   1258                                  uint8 zha_project_BatteryVoltage=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1259                                  SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
                                         ^
Warning[Pe223]: function "SetTempDeviceBAT" declared implicitly

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1255  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zha_project_BatteryVoltage" (declared at line 1258 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \   00009D                ; Setup parameters for call to function SetTempDeviceBAT
   \   00009D   8882         MOV     DPL,R0
   \   00009F   8983         MOV     DPH,R1
   \   0000A1   A3           INC     DPTR
   \   0000A2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000A5   12....       LCALL   `??SetTempDeviceBAT::?relay`; Banked call to: SetTempDeviceBAT
   1260                                  break;
   1261                              default:
   1262                                break;
   1263                          
   1264                          }
   1265          
   1266                    }
   \                     ??zha_project_ProcessInReadRspCmd_21:
   \   0000A8   05..         INC     ?V0
   \                     ??zha_project_ProcessInReadRspCmd_18:
   \   0000AA   12....       LCALL   ?Subroutine12 & 0xFFFF
   1267                
   1268                  }        
   \                     ??CrossCallReturnLabel_21:
   \   0000AD   40E2         JC      ??zha_project_ProcessInReadRspCmd_19
   1269                  
   1270                  
   1271                  osal_set_event( zha_project_TaskID, ZHA_ACTIVE_EP_EVT );
   \   0000AF                ; Setup parameters for call to function osal_set_event
   \   0000AF   7A08         MOV     R2,#0x8
   \                     ??zha_project_ProcessInReadRspCmd_17:
   \   0000B1   7B00         MOV     R3,#0x0
   \   0000B3   90....       MOV     DPTR,#zha_project_TaskID
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1272                  break;
   \   0000BB   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1273                case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1274                  {
   1275                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_2:
   \   0000BE   75..00       MOV     ?V0,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_22:
   \   0000C1   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000C4   4003         JC      $+5
   \   0000C6   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1276                    {
   1277                      zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0000C9   12....       LCALL   ?Subroutine9 & 0xFFFF
   1278                      j=statusRec->data;
   1279                      switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_15:
   \   0000CC   701A         JNZ     ??zha_project_ProcessInReadRspCmd_23
   1280                      {
   1281                          case ATTRID_ON_OFF:
   1282                              uint16 buf[3];
                                     ^
Warning[Pe1072]: a declaration cannot have a label
   1283                              osal_memset(buf,0,sizeof(buf));
   \   0000CE                ; Setup parameters for call to function osal_memset
   \   0000CE   7C06         MOV     R4,#0x6
   \   0000D0   7D00         MOV     R5,#0x0
   \   0000D2   7900         MOV     R1,#0x0
   \   0000D4   AA..         MOV     R2,?XSP + 0
   \   0000D6   AB..         MOV     R3,?XSP + 1
   \   0000D8   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1284                              buf[0] = *j;
   \   0000DB   8E82         MOV     DPL,R6
   \   0000DD   8F83         MOV     DPH,R7
   \   0000DF   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000E2   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   1285                              UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                     ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_142:
   \   0000E5   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1286                            break;
   1287                          default:
   1288                            break;
   1289                      }
   1290          
   1291                    }
   \                     ??zha_project_ProcessInReadRspCmd_23:
   \   0000E8   05..         INC     ?V0
   \   0000EA   80D5         SJMP    ??zha_project_ProcessInReadRspCmd_22
   1292                
   1293                  }
   1294                  break;
   1295                  case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
   1296                      {
   1297                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_4:
   \   0000EC   75..00       MOV     ?V0,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_24:
   \   0000EF   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000F2   4003         JC      $+5
   \   0000F4   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1298                          {
   1299                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0000F7   12....       LCALL   ?Subroutine25 & 0xFFFF
   1300                              p=(uint16 *)statusRec->data;
   \                     ??CrossCallReturnLabel_56:
   \   0000FA   12....       LCALL   ?Subroutine32 & 0xFFFF
   1301                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1302                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_69:
   \   0000FD   6407         XRL     A,#0x7
   \   0000FF   7002         JNZ     ??zha_project_ProcessInReadRspCmd_25
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReadRspCmd_25:
   \   000103   701F         JNZ     ??zha_project_ProcessInReadRspCmd_26
   1303                              {
   1304                                  case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
   1305                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1306                                      osal_memset(buf,0,sizeof(buf));
   \   000105                ; Setup parameters for call to function osal_memset
   \   000105   7C06         MOV     R4,#0x6
   \   000107   7D00         MOV     R5,#0x0
   \   000109   7900         MOV     R1,#0x0
   \   00010B   AA..         MOV     R2,?XSP + 0
   \   00010D   AB..         MOV     R3,?XSP + 1
   \   00010F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1307                                      buf[2] = *p;
   \   000112   8E82         MOV     DPL,R6
   \   000114   8F83         MOV     DPH,R7
   \   000116   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   1308                                      UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus3" declared implicitly
   \                     ??CrossCallReturnLabel_140:
   \   000121   12....       LCALL   `??UpdateDeviceStatus3::?relay`; Banked call to: UpdateDeviceStatus3
   1309                                  break;
   1310                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
   1311                                      //zha_project_HUE_Status = *p;
   1312                                    break;
   1313                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
   1314                                      //zha_project_Saturation = *p;                        
   1315                                    break;
   1316                                  default:
   1317                                  break;
   1318          
   1319                              }
   1320          
   1321                          }
   \                     ??zha_project_ProcessInReadRspCmd_26:
   \   000124   05..         INC     ?V0
   \   000126   80C7         SJMP    ??zha_project_ProcessInReadRspCmd_24
   1322          
   1323                       }
   1324              
   1325                  break;
   1326                  case ZCL_CLUSTER_ID_SS_IAS_ZONE:
   1327                 {        uint16 supportOD = 0;
   1328                          uint8 sensorType = 0;
   1329                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_8:
   \   000128   75..00       MOV     ?V0,#0x0
   \   00012B   02....       LJMP    ??zha_project_ProcessInReadRspCmd_27 & 0xFFFF
   1330                          {
   1331                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1332                              p=(uint16 *)statusRec->data;
   1333                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1334                              switch(statusRec->attrID)
   1335                              {
   1336                                  case ATTRID_SS_IAS_ZONE_STATUS:
   1337                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1338                                      osal_memset(buf,0,sizeof(buf));
   1339                                      buf[0] = *p;
   1340                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   1341                                  break;
   1342                                  case ATTRID_SS_IAS_ZONE_TYPE:
   1343                                      zAddrType_t addr;
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1344                                      uint8 address[8];
   1345                                      uint8 pValue[Z_EXTADDR_LEN];
   1346                                      addr.addrMode = Addr64Bit;
   \                     ??zha_project_ProcessInReadRspCmd_28:
   \   00012E   742A         MOV     A,#0x2a
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   7403         MOV     A,#0x3
   \   000135   F0           MOVX    @DPTR,A
   1347                                      osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
   \   000136                ; Setup parameters for call to function osal_nv_read
   \   000136   7412         MOV     A,#0x12
   \   000138   12....       LCALL   ?XSTACK_DISP100_8
   \   00013B   88..         MOV     ?V4,R0
   \   00013D   89..         MOV     ?V5,R1
   \   00013F   78..         MOV     R0,#?V4
   \   000141   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000144   75..08       MOV     ?V4,#0x8
   \   000147   75..00       MOV     ?V5,#0x0
   \   00014A   78..         MOV     R0,#?V4
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014F   7C00         MOV     R4,#0x0
   \   000151   7D00         MOV     R5,#0x0
   \   000153   7A01         MOV     R2,#0x1
   \   000155   7B00         MOV     R3,#0x0
   \   000157   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00015A   7404         MOV     A,#0x4
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   1348                                      //osal_memcpy(pValue,addr.addr.extAddr,8);
   1349                                      osal_memcpy(addr.addr.extAddr,pValue,8);
   \   00015F                ; Setup parameters for call to function osal_memcpy
   \   00015F   7412         MOV     A,#0x12
   \   000161   12....       LCALL   ?XSTACK_DISP100_8
   \   000164   88..         MOV     ?V4,R0
   \   000166   89..         MOV     ?V5,R1
   \   000168   75..00       MOV     ?V6,#0x0
   \   00016B   78..         MOV     R0,#?V4
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000170   7C08         MOV     R4,#0x8
   \   000172   7D00         MOV     R5,#0x0
   \   000174   7425         MOV     A,#0x25
   \   000176   12....       LCALL   ?XSTACK_DISP101_8
   \   000179   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00017C   7403         MOV     A,#0x3
   \   00017E   12....       LCALL   ?DEALLOC_XSTACK8
   1350                                      //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
   1351                                      APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
   \   000181                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000181   741A         MOV     A,#0x1a
   \   000183   12....       LCALL   ?XSTACK_DISP102_8
   \   000186   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000189   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   1352                                      ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
   1353                                                             1,
   1354                                                             0x0020,
   1355                                                             &addr,  pInMsg->endPoint,
   1356                                                              FALSE );
   \   00018C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00018C   75..00       MOV     ?V1,#0x0
   \   00018F   78..         MOV     R0,#?V1
   \   000191   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000194   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000197   F5..         MOV     ?V1,A
   \   000199   78..         MOV     R0,#?V1
   \   00019B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019E   7424         MOV     A,#0x24
   \   0001A0   12....       LCALL   ?XSTACK_DISP100_8
   \   0001A3   88..         MOV     ?V4,R0
   \   0001A5   89..         MOV     ?V5,R1
   \   0001A7   78..         MOV     R0,#?V4
   \   0001A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AC   75..20       MOV     ?V4,#0x20
   \   0001AF   75..00       MOV     ?V5,#0x0
   \   0001B2   78..         MOV     R0,#?V4
   \   0001B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B7   7420         MOV     A,#0x20
   \   0001B9   12....       LCALL   ?XSTACK_DISP100_8
   \   0001BC   88..         MOV     ?V4,R0
   \   0001BE   89..         MOV     ?V5,R1
   \   0001C0   78..         MOV     R0,#?V4
   \   0001C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C5   7901         MOV     R1,#0x1
   \   0001C7   7C..         MOV     R4,#dstAddr & 0xff
   \   0001C9   7D..         MOV     R5,#(dstAddr >> 8) & 0xff
   \   0001CB   7A21         MOV     R2,#0x21
   \   0001CD   7B00         MOV     R3,#0x0
   \   0001CF   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001D2   7408         MOV     A,#0x8
   \   0001D4   12....       LCALL   ?DEALLOC_XSTACK8
   1357                                      //zha_project_Smoke_Type = *p;
   1358                                      //uint16 buf[3];
   1359                                      osal_memset(buf,0,sizeof(buf));
   \   0001D7                ; Setup parameters for call to function osal_memset
   \   0001D7   7C06         MOV     R4,#0x6
   \   0001D9   7D00         MOV     R5,#0x0
   \   0001DB   7900         MOV     R1,#0x0
   \   0001DD   EC           MOV     A,R4
   \   0001DE   12....       LCALL   ?XSTACK_DISP101_8
   \   0001E1   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1360                                      buf[1] = *p;
   \   0001E4   8E82         MOV     DPL,R6
   \   0001E6   8F83         MOV     DPH,R7
   \   0001E8   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0001EB   7408         MOV     A,#0x8
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   12....       LCALL   ?Subroutine6 & 0xFFFF
   1361                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_6:
   \   0001F3   12....       LCALL   ?XSTACK_DISP102_8
   \   0001F6   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0001F9   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1362                                      //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zha_project_Smoke_Type,0,false,0);
   1363                                      SetTempDeviceType(pInMsg->srcAddr.addr.shortAddr,*p);
                                             ^
Warning[Pe223]: function "SetTempDeviceType" declared implicitly

         {        uint16 supportOD = 0;
                         ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1327  Warning[Pe177]: 
          variable "supportOD" was declared but never referenced

                  uint8 sensorType = 0;
                        ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1328  Warning[Pe177]: 
          variable "sensorType" was declared but never referenced
   \   0001FC                ; Setup parameters for call to function SetTempDeviceType
   \   0001FC   8E82         MOV     DPL,R6
   \   0001FE   8F83         MOV     DPH,R7
   \   000200   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000203   12....       LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
   1364                                   break;
   \                     ??zha_project_ProcessInReadRspCmd_29:
   \   000206   05..         INC     ?V0
   \                     ??zha_project_ProcessInReadRspCmd_27:
   \   000208   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00020B   4003         JC      $+5
   \   00020D   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   \   000210   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000213   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_2`:
   \   000216   0100         DW        1
   \   000218   01           DB        1
   \   000219   ....         DW        ??zha_project_ProcessInReadRspCmd_29
   \   00021B   ....         DW        ??zha_project_ProcessInReadRspCmd_28
   \   00021D   ....         DW        ??zha_project_ProcessInReadRspCmd_30
   \                     ??zha_project_ProcessInReadRspCmd_30:
   \   00021F                ; Setup parameters for call to function osal_memset
   \   00021F   7C06         MOV     R4,#0x6
   \   000221   7D00         MOV     R5,#0x0
   \   000223   7900         MOV     R1,#0x0
   \   000225   EC           MOV     A,R4
   \   000226   12....       LCALL   ?XSTACK_DISP101_8
   \   000229   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   00022C   8E82         MOV     DPL,R6
   \   00022E   8F83         MOV     DPH,R7
   \   000230   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000233   7406         MOV     A,#0x6
   \   000235   12....       LCALL   ?XSTACK_DISP0_8
   \   000238   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00023B   12....       LCALL   ?XSTACK_DISP102_8
   \   00023E   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000241   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   \   000244   80C0         SJMP    ??zha_project_ProcessInReadRspCmd_29
   1365                                
   1366                                  default:
   1367                                  break;
   1368          
   1369                              }
   1370          
   1371                          }
   1372          
   1373                       }
   1374                
   1375                break;
   1376                case ZCL_CLUSTER_ID_SS_IAS_WD:
   1377                      {
   1378                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_9:
   \   000246   75..00       MOV     ?V0,#0x0
   \   000249   8010         SJMP    ??zha_project_ProcessInReadRspCmd_31
   1379                          {
   1380                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1381                              j=statusRec->data;
   1382                              switch(statusRec->attrID)
   1383                              {
   1384                                  case COMMAND_SS_IAS_WD_START_WARNING:
   1385                                      //zha_project_Warning = *j;
   1386                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1387                                      osal_memset(buf,0,sizeof(buf));
   1388                                      //buf[0] = zha_project_Warning;
   1389                                      //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
   1390                                      break;
   1391                                  case COMMAND_SS_IAS_WD_SQUAWK:
   1392                                      //zha_project_WD_SQUAWK = *j;
   1393                                      //uint16 buf[3];
   1394                                      osal_memset(buf,0,sizeof(buf));
   \                     ??zha_project_ProcessInReadRspCmd_32:
   \   00024B                ; Setup parameters for call to function osal_memset
   \   00024B   7C06         MOV     R4,#0x6
   \   00024D   7D00         MOV     R5,#0x0
   \   00024F   7900         MOV     R1,#0x0
   \   000251   740C         MOV     A,#0xc
   \   000253   12....       LCALL   ?XSTACK_DISP101_8
   \   000256   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1395                                     // buf[1] = zha_project_WD_SQUAWK;
   1396                                      //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
   1397                                      break;
   1398          
   1399                                  default:
   1400                                      break;
   1401          
   1402                              }
   \                     ??zha_project_ProcessInReadRspCmd_33:
   \   000259   05..         INC     ?V0
   \                     ??zha_project_ProcessInReadRspCmd_31:
   \   00025B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00025E   4003         JC      $+5
   \   000260   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   \   000263   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000266   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   1403          
   1404                          }
   1405          
   1406                       }        
   \                     ??CrossCallReturnLabel_120:
   \   000269   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_3`:
   \   00026C   0000         DW        0
   \   00026E   01           DB        1
   \   00026F   ....         DW        ??zha_project_ProcessInReadRspCmd_33
   \   000271   ....         DW        ??zha_project_ProcessInReadRspCmd_32
   \   000273   ....         DW        ??zha_project_ProcessInReadRspCmd_32
   1407                  
   1408                  break;
   1409                
   1410                case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
   1411                 {
   1412                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_6:
   \   000275   75..00       MOV     ?V0,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_34:
   \   000278   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00027B   4003         JC      $+5
   \   00027D   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1413                          {
   1414                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   000280   12....       LCALL   ?Subroutine9 & 0xFFFF
   1415                              p=(uint16 *)statusRec->data;
   1416                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_16:
   \   000283   7017         JNZ     ??zha_project_ProcessInReadRspCmd_35
   1417                              {
   1418                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1419                                      //zha_project_Temperature_Value = *p;
   1420                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1421                                      osal_memset(buf,0,sizeof(buf));
   \   000285                ; Setup parameters for call to function osal_memset
   \   000285   7C06         MOV     R4,#0x6
   \   000287   7D00         MOV     R5,#0x0
   \   000289   7900         MOV     R1,#0x0
   \   00028B   AA..         MOV     R2,?XSP + 0
   \   00028D   AB..         MOV     R3,?XSP + 1
   \   00028F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1422                                      buf[0] = *p;
   \   000292   8E82         MOV     DPL,R6
   \   000294   8F83         MOV     DPH,R7
   \   000296   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1423                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_137:
   \   000299   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1424                                      
   1425                                  break;
   1426                                  default:
   1427                                  break;
   1428          
   1429                              }
   1430          
   1431                          }
   \                     ??zha_project_ProcessInReadRspCmd_35:
   \   00029C   05..         INC     ?V0
   \   00029E   80D8         SJMP    ??zha_project_ProcessInReadRspCmd_34
   1432          
   1433                       }
   1434                   break;
   1435                  case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1436                     {
   1437                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_3:
   \   0002A0   75..00       MOV     ?V0,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_36:
   \   0002A3   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0002A6   507B         JNC     ??zha_project_ProcessInReadRspCmd_10
   1438                          {
   1439                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0002A8   12....       LCALL   ?Subroutine9 & 0xFFFF
   1440                              j=statusRec->data;
   1441                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1442                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_17:
   \   0002AB   7022         JNZ     ??zha_project_ProcessInReadRspCmd_37
   1443                              {
   1444                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1445                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1446                                      osal_memset(buf,0,sizeof(buf));
   \   0002AD                ; Setup parameters for call to function osal_memset
   \   0002AD   7C06         MOV     R4,#0x6
   \   0002AF   7D00         MOV     R5,#0x0
   \   0002B1   7900         MOV     R1,#0x0
   \   0002B3   AA..         MOV     R2,?XSP + 0
   \   0002B5   AB..         MOV     R3,?XSP + 1
   \   0002B7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1447                                      //zha_project_Level_to_Level = *j;
   1448                                      buf[1] = *j;
   \   0002BA   8E82         MOV     DPL,R6
   \   0002BC   8F83         MOV     DPH,R7
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   F8           MOV     R0,A
   \   0002C0   7402         MOV     A,#0x2
   \   0002C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C5   E8           MOV     A,R0
   \   0002C6   F0           MOVX    @DPTR,A
   \   0002C7   A3           INC     DPTR
   \   0002C8   E4           CLR     A
   \   0002C9   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   1449                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_143:
   \   0002CC   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1450                                  break;
   1451                                  default:
   1452                                  break;
   1453          
   1454                              }
   1455          
   1456                          }
   \                     ??zha_project_ProcessInReadRspCmd_37:
   \   0002CF   05..         INC     ?V0
   \   0002D1   80D0         SJMP    ??zha_project_ProcessInReadRspCmd_36
   1457          
   1458                       }
   1459              
   1460                  break;
   1461                case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
   1462                     {
   1463                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_7:
   \   0002D3   75..00       MOV     ?V0,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_38:
   \   0002D6   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0002D9   5048         JNC     ??zha_project_ProcessInReadRspCmd_10
   1464                          {
   1465                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0002DB   12....       LCALL   ?Subroutine9 & 0xFFFF
   1466                              p=(uint16 *)statusRec->data;
   1467                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1468                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_18:
   \   0002DE   7017         JNZ     ??zha_project_ProcessInReadRspCmd_39
   1469                              {
   1470                                  case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
   1471                                      //zha_project_Humidity_Value = *p;
   1472                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1473                                      osal_memset(buf,0,sizeof(buf));
   \   0002E0                ; Setup parameters for call to function osal_memset
   \   0002E0   7C06         MOV     R4,#0x6
   \   0002E2   7D00         MOV     R5,#0x0
   \   0002E4   7900         MOV     R1,#0x0
   \   0002E6   AA..         MOV     R2,?XSP + 0
   \   0002E8   AB..         MOV     R3,?XSP + 1
   \   0002EA   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1474                                      buf[0] = *p;
   \   0002ED   8E82         MOV     DPL,R6
   \   0002EF   8F83         MOV     DPH,R7
   \   0002F1   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1475                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_138:
   \   0002F4   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1476                                      
   1477                                  break;
   1478                                  default:
   1479                                  break;
   1480          
   1481                              }
   1482          
   1483                          }
   \                     ??zha_project_ProcessInReadRspCmd_39:
   \   0002F7   05..         INC     ?V0
   \   0002F9   80DB         SJMP    ??zha_project_ProcessInReadRspCmd_38
   1484          
   1485                       }     
   1486                  
   1487                  
   1488                  break;   
   1489                case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
   1490                     {
   1491                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_5:
   \   0002FB   75..00       MOV     ?V0,#0x0
   \   0002FE   801E         SJMP    ??zha_project_ProcessInReadRspCmd_40
   1492                          {
   1493                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReadRspCmd_41:
   \   000300   12....       LCALL   ?Subroutine9 & 0xFFFF
   1494                              p=(uint16 *)statusRec->data;
   1495                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1496                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_19:
   \   000303   7017         JNZ     ??zha_project_ProcessInReadRspCmd_42
   1497                              {
   1498                                  case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
   1499                                      //zha_project_Illumiance_Value = *p;
   1500                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1501                                      osal_memset(buf,0,sizeof(buf));
   \   000305                ; Setup parameters for call to function osal_memset
   \   000305   7C06         MOV     R4,#0x6
   \   000307   7D00         MOV     R5,#0x0
   \   000309   7900         MOV     R1,#0x0
   \   00030B   AA..         MOV     R2,?XSP + 0
   \   00030D   AB..         MOV     R3,?XSP + 1
   \   00030F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1502                                      buf[0] = *p;
   \   000312   8E82         MOV     DPL,R6
   \   000314   8F83         MOV     DPH,R7
   \   000316   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1503                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly

      uint8 i,k;
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1202  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \                     ??CrossCallReturnLabel_139:
   \   000319   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1504                                      
   1505                                  break;
   1506                                  default:
   1507                                  break;
   1508          
   1509                              }
   1510          
   1511                          }
   \                     ??zha_project_ProcessInReadRspCmd_42:
   \   00031C   05..         INC     ?V0
   \                     ??zha_project_ProcessInReadRspCmd_40:
   \   00031E   12....       LCALL   ?Subroutine12 & 0xFFFF
   1512          
   1513                       }          
   1514                  
   1515                  
   1516                  break;
   1517                default:
   1518                  break;
   1519              //ReadRspStatus.attrID = readRspCmd->attrList;
   1520              // Notify the originator of the results of the original read attributes 
   1521              // attempt and, for each successfull request, the value of the requested 
   1522              // attribute
   1523          #endif
   1524            }
   \                     ??CrossCallReturnLabel_29:
   \   000321   40DD         JC      ??zha_project_ProcessInReadRspCmd_41
   1525          
   1526            
   1527            
   1528            return TRUE; 
   \                     ??zha_project_ProcessInReadRspCmd_10:
   \   000323                REQUIRE ?Subroutine2
   \   000323                ; // Fall through to label ?Subroutine2
   1529          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7901         MOV     R1,#0x1
   \   000002   742B         MOV     A,#0x2b
   \   000004   12....       LCALL   ?DEALLOC_XSTACK8
   \   000007   7F0C         MOV     R7,#0xc
   \   000009   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003   A882         MOV     R0,DPL
   \   000005   A983         MOV     R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E5..         MOV     A,?V0
   \   000002   75F006       MOV     B,#0x6
   \   000005   A4           MUL     AB
   \   000006   F8           MOV     R0,A
   \   000007   A9F0         MOV     R1,B
   \   000009   E5..         MOV     A,?V2
   \   00000B   28           ADD     A,R0
   \   00000C   F582         MOV     DPL,A
   \   00000E   E5..         MOV     A,?V3
   \   000010   39           ADDC    A,R1
   \   000011   F583         MOV     DPH,A
   \   000013   A3           INC     DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004                REQUIRE ??Subroutine42_0
   \   000004                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006                REQUIRE ??Subroutine43_0
   \   000006                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   E5..         MOV     A,?V0
   \   00000A   C3           CLR     C
   \   00000B   98           SUBB    A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000006   F8           MOV     R0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   49           ORL     A,R1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FE           MOV     R6,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FF           MOV     R7,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E5..         MOV     A,?V10
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V11
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8A..         MOV     ?V10,R2
   \   000002   8B..         MOV     ?V11,R3
   \   000004   EA           MOV     A,R2
   \   000005   2417         ADD     A,#0x17
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   35..         ADDC    A,?V11
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EA           MOV     A,R2
   \   000001   240A         ADD     A,#0xa
   \   000003   F5..         MOV     ?V8,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V11
   \   000008   F5..         MOV     ?V9,A
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   E4           CLR     A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FE           MOV     R6,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FF           MOV     R7,A
   \   00000C                REQUIRE ??Subroutine47_0
   \   00000C                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   78..         MOV     R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000006                REQUIRE ??Subroutine49_0
   \   000006                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   7D00         MOV     R5,#0x0
   \   000004   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000005                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000005                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000005                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000005   7406         MOV     A,#0x6
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine53_0
   \   000004                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus3
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus3
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET
   1530          #endif // ZCL_READ
   1531          
   1532          #ifdef ZCL_WRITE
   1533          /*********************************************************************
   1534           * @fn      zha_project_ProcessInWriteRspCmd
   1535           *
   1536           * @brief   Process the "Profile" Write Response Command
   1537           *
   1538           * @param   pInMsg - incoming message to process
   1539           *
   1540           * @return  none
   1541           */
   1542          static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1543          {
   1544            zclWriteRspCmd_t *writeRspCmd;
   1545            uint8 i;
   1546          
   1547            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1548            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1549            {
   1550              // Notify the device of the results of the its original write attributes
   1551              // command.
   1552            }
   1553          
   1554            return ( TRUE );
   1555          }
   1556          #endif // ZCL_WRITE
   1557          
   1558          
   1559          #ifdef ZCL_REPORT
   1560          /*********************************************************************
   1561           * @fn      zha_project_ProcessInReportCmd
   1562           *
   1563           * @brief   Process the "Profile" Read Response Command
   1564           *
   1565           * @param   pInMsg - incoming message to process
   1566           *
   1567           * @return  none
   1568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine44_0
   \   000006                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1569          static uint8 zha_project_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zha_project_ProcessInReportCmd:
   1570          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 43
   \   000005   74D5         MOV     A,#-0x2b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
   1571              zclReportCmd_t *reportRspCmd;
   1572              uint8 i,k;
   1573              uint8 *j;
   1574              uint16 *p;
   1575              reportRspCmd = (zclReportCmd_t *)pInMsg->attrCmd; 
   \                     ??CrossCallReturnLabel_58:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V1,A
   1576              switch(pInMsg->clusterId)
   \   000014   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000017   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00001A   78..         MOV     R0,#?V2
   \   00001C   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessInReportCmd_0`:
   \   00001F   0000         DW        0
   \   000021   0A00         DW        10
   \   000023   0000         DW        0
   \   000025   ....         DW        ??zha_project_ProcessInReportCmd_0
   \   000027   0100         DW        1
   \   000029   ....         DW        ??zha_project_ProcessInReportCmd_1
   \   00002B   0600         DW        6
   \   00002D   ....         DW        ??zha_project_ProcessInReportCmd_2
   \   00002F   0800         DW        8
   \   000031   ....         DW        ??zha_project_ProcessInReportCmd_3
   \   000033   0003         DW        768
   \   000035   ....         DW        ??zha_project_ProcessInReportCmd_4
   \   000037   0004         DW        1024
   \   000039   ....         DW        ??zha_project_ProcessInReportCmd_5
   \   00003B   0204         DW        1026
   \   00003D   ....         DW        ??zha_project_ProcessInReportCmd_6
   \   00003F   0504         DW        1029
   \   000041   ....         DW        ??zha_project_ProcessInReportCmd_7
   \   000043   0005         DW        1280
   \   000045   ....         DW        ??zha_project_ProcessInReportCmd_8
   \   000047   0205         DW        1282
   \   000049   ....         DW        ??zha_project_ProcessInReportCmd_9
   \   00004B   ....         DW        ??zha_project_ProcessInReportCmd_10
   1577              {
   1578          #if ZG_BUILD_COORDINATOR_TYPE      
   1579                case ZCL_CLUSTER_ID_GEN_BASIC:
   1580                  {
   1581                    for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_0:
   \   00004D   7E00         MOV     R6,#0x0
   \   00004F   800D         SJMP    ??zha_project_ProcessInReportCmd_11
   1582                    {
   1583                          zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   1584                          j=statusRec->attrData;
   1585                          switch(statusRec->attrID)
   1586                          {
   1587                              case ATTRID_BASIC_POWER_SOURCE:
   1588                                  uint8 zha_project_PowerSource=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1589                                  break;
   1590          //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
   1591          //                        zha_project_BatteryVoltage=*j;
   1592          //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
   1593          //                        break;
   1594                              case ATTRID_BASIC_ZCL_VERSION:
   1595                                  break;
   1596                              case ATTRID_BASIC_MODEL_ID:
   1597                                  break;
   1598                              case ATTRID_BASIC_MANUFACTURER_NAME:
   1599                                  SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
                                         ^
Warning[Pe223]: function "SetTempDeviceManuName" declared implicitly
   1600                                  break;
   1601                              case ATTRID_BASIC_HW_VERSION:
   1602                                  uint8 zha_project_HWRevision = *j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1603                                  SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zha_project_HWRevision);
                                         ^
Warning[Pe223]: function "SetTempDeviceHW" declared implicitly

                          uint8 zha_project_PowerSource=*j;
                                ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1588  Warning[Pe177]: 
          variable "zha_project_PowerSource" was declared but never referenced

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1585  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zha_project_PowerSource" (declared at line 1588 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
            variable "zha_project_HWRevision" (declared at line 1602 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \                     ??zha_project_ProcessInReportCmd_12:
   \   000051                ; Setup parameters for call to function SetTempDeviceHW
   \   000051   85..82       MOV     DPL,?V2
   \   000054   85..83       MOV     DPH,?V3
   \   000057   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00005A   12....       LCALL   `??SetTempDeviceHW::?relay`; Banked call to: SetTempDeviceHW
   1604                                  break;                        
   \                     ??zha_project_ProcessInReportCmd_13:
   \   00005D   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_11:
   \   00005E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000061   4003         JC      $+5
   \   000063   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   \   000066   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000069   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00006C   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReportCmd_1`:
   \   00006F   0300         DW        3
   \   000071   01           DB        1
   \   000072   ....         DW        ??zha_project_ProcessInReportCmd_13
   \   000074   ....         DW        ??zha_project_ProcessInReportCmd_12
   \   000076   ....         DW        ??zha_project_ProcessInReportCmd_14
   \                     ??zha_project_ProcessInReportCmd_14:
   \   000078                ; Setup parameters for call to function SetTempDeviceManuName
   \   000078   AC..         MOV     R4,?V2
   \   00007A   AD..         MOV     R5,?V3
   \   00007C   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00007F   12....       LCALL   `??SetTempDeviceManuName::?relay`; Banked call to: SetTempDeviceManuName
   \   000082   80D9         SJMP    ??zha_project_ProcessInReportCmd_13
   1605                              default:
   1606                                break;
   1607                          
   1608                          }
   1609          
   1610                    }
   1611                  }
   1612                  //osal_set_event( zha_project_TaskID,ZHA_ATTRIBUTE_POWER_EVT);
   1613                  
   1614                  break;
   1615                  
   1616                case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1617                  {
   1618                    for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_1:
   \   000084   7E00         MOV     R6,#0x0
   \   000086   801B         SJMP    ??zha_project_ProcessInReportCmd_15
   1619                    {
   1620                          zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReportCmd_16:
   \   000088   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00008B   A882         MOV     R0,DPL
   \   00008D   A983         MOV     R1,DPH
   1621                          j=statusRec->attrData;
   1622                          switch(statusRec->attrID)
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   6420         XRL     A,#0x20
   \   000092   7002         JNZ     ??zha_project_ProcessInReportCmd_17
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReportCmd_17:
   \   000096   700A         JNZ     ??zha_project_ProcessInReportCmd_18
   1623                          {
   1624                              case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
   1625                                  uint8 zha_project_BatteryVoltage=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1626                                  SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
                                         ^
Warning[Pe223]: function "SetTempDeviceBAT" declared implicitly

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1622  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zha_project_BatteryVoltage" (declared at line 1625 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \   000098                ; Setup parameters for call to function SetTempDeviceBAT
   \   000098   8882         MOV     DPL,R0
   \   00009A   8983         MOV     DPH,R1
   \   00009C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00009F   12....       LCALL   `??SetTempDeviceBAT::?relay`; Banked call to: SetTempDeviceBAT
   1627                                  break;
   1628                              default:
   1629                                break;
   1630                          
   1631                          }
   1632          
   1633                    }
   \                     ??zha_project_ProcessInReportCmd_18:
   \   0000A2   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_15:
   \   0000A3   12....       LCALL   ?Subroutine13 & 0xFFFF
   1634                
   1635                  }        
   \                     ??CrossCallReturnLabel_31:
   \   0000A6   40E0         JC      ??zha_project_ProcessInReportCmd_16
   1636                  
   1637                  
   1638                  osal_set_event( zha_project_TaskID, ZHA_ACTIVE_EP_EVT );
   \   0000A8                ; Setup parameters for call to function osal_set_event
   \   0000A8   7A08         MOV     R2,#0x8
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   90....       MOV     DPTR,#zha_project_TaskID
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1639                  break;
   \   0000B4   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   1640                case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1641                  {
   1642                    for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_2:
   \   0000B7   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_19:
   \   0000B9   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000BC   4003         JC      $+5
   \   0000BE   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   1643                    {
   1644                      zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   0000C1   12....       LCALL   ?Subroutine8 & 0xFFFF
   1645                      j=statusRec->attrData;
   1646                      switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_10:
   \   0000C4   701C         JNZ     ??zha_project_ProcessInReportCmd_20
   1647                      {
   1648                          case ATTRID_ON_OFF:
   1649                              uint16 buf[3];
                                     ^
Warning[Pe1072]: a declaration cannot have a label
   1650                              osal_memset(buf,0,sizeof(buf));
   \   0000C6                ; Setup parameters for call to function osal_memset
   \   0000C6   7C06         MOV     R4,#0x6
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7900         MOV     R1,#0x0
   \   0000CC   AA..         MOV     R2,?XSP + 0
   \   0000CE   AB..         MOV     R3,?XSP + 1
   \   0000D0   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1651                              buf[0] = *j;
   \   0000D3   85..82       MOV     DPL,?V2
   \   0000D6   85..83       MOV     DPH,?V3
   \   0000D9   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000DC   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   1652                              UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                     ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_144:
   \   0000DF   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1653                            break;
   1654                          default:
   1655                            break;
   1656                      }
   1657          
   1658                    }
   \                     ??zha_project_ProcessInReportCmd_20:
   \   0000E2   0E           INC     R6
   \   0000E3   80D4         SJMP    ??zha_project_ProcessInReportCmd_19
   1659                
   1660                  }
   1661                  break;
   1662                  case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
   1663                      {
   1664                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_4:
   \   0000E5   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_21:
   \   0000E7   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000EA   4003         JC      $+5
   \   0000EC   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   1665                          {
   1666                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   0000EF   12....       LCALL   ?Subroutine14 & 0xFFFF
   1667                              p=(uint16 *)statusRec->attrData;
   1668                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1669                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_114:
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   6407         XRL     A,#0x7
   \   0000F9   7002         JNZ     ??zha_project_ProcessInReportCmd_22
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReportCmd_22:
   \   0000FD   701B         JNZ     ??zha_project_ProcessInReportCmd_23
   1670                              {
   1671                                  case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
   1672                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1673                                      osal_memset(buf,0,sizeof(buf));
   \   0000FF                ; Setup parameters for call to function osal_memset
   \   0000FF   7C06         MOV     R4,#0x6
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7900         MOV     R1,#0x0
   \   000105   AA..         MOV     R2,?XSP + 0
   \   000107   AB..         MOV     R3,?XSP + 1
   \   000109   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1674                                      buf[2] = *p;
   \   00010C   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00010F   7404         MOV     A,#0x4
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   1675                                      UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus3" declared implicitly
   \                     ??CrossCallReturnLabel_141:
   \   000117   12....       LCALL   `??UpdateDeviceStatus3::?relay`; Banked call to: UpdateDeviceStatus3
   1676                                  break;
   1677                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
   1678                                      //zha_project_HUE_Status = *p;
   1679                                    break;
   1680                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
   1681                                      //zha_project_Saturation = *p;                        
   1682                                    break;
   1683                                  default:
   1684                                  break;
   1685          
   1686                              }
   1687          
   1688                          }
   \                     ??zha_project_ProcessInReportCmd_23:
   \   00011A   0E           INC     R6
   \   00011B   80CA         SJMP    ??zha_project_ProcessInReportCmd_21
   1689          
   1690                       }
   1691              
   1692                  break;
   1693                  case ZCL_CLUSTER_ID_SS_IAS_ZONE:
   1694                 {        uint16 supportOD = 0;
   1695                          uint8 sensorType = 0;
   1696                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_8:
   \   00011D   7E00         MOV     R6,#0x0
   \   00011F   02....       LJMP    ??zha_project_ProcessInReportCmd_24 & 0xFFFF
   1697                          {
   1698                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   1699                              p=(uint16 *)statusRec->attrData;
   1700                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1701                              switch(statusRec->attrID)
   1702                              {
   1703                                  case ATTRID_SS_IAS_ZONE_STATUS:
   1704                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1705                                      osal_memset(buf,0,sizeof(buf));
   1706                                      buf[0] = *p;
   1707                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   1708                                  break;
   1709                                  case ATTRID_SS_IAS_ZONE_TYPE:
   1710                                      zAddrType_t addr;
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1711                                      uint8 address[8];
   1712                                      uint8 pValue[Z_EXTADDR_LEN];
   1713                                      addr.addrMode = Addr64Bit;
   \                     ??zha_project_ProcessInReportCmd_25:
   \   000122   742A         MOV     A,#0x2a
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   7403         MOV     A,#0x3
   \   000129   F0           MOVX    @DPTR,A
   1714                                      osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
   \   00012A                ; Setup parameters for call to function osal_nv_read
   \   00012A   7412         MOV     A,#0x12
   \   00012C   12....       LCALL   ?XSTACK_DISP100_8
   \   00012F   88..         MOV     ?V4,R0
   \   000131   89..         MOV     ?V5,R1
   \   000133   78..         MOV     R0,#?V4
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000138   75..08       MOV     ?V4,#0x8
   \   00013B   75..00       MOV     ?V5,#0x0
   \   00013E   78..         MOV     R0,#?V4
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000143   7C00         MOV     R4,#0x0
   \   000145   7D00         MOV     R5,#0x0
   \   000147   7A01         MOV     R2,#0x1
   \   000149   7B00         MOV     R3,#0x0
   \   00014B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00014E   7404         MOV     A,#0x4
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
   1715                                      //osal_memcpy(pValue,addr.addr.extAddr,8);
   1716                                      osal_memcpy(addr.addr.extAddr,pValue,8);
   \   000153                ; Setup parameters for call to function osal_memcpy
   \   000153   7412         MOV     A,#0x12
   \   000155   12....       LCALL   ?XSTACK_DISP100_8
   \   000158   88..         MOV     ?V4,R0
   \   00015A   89..         MOV     ?V5,R1
   \   00015C   75..00       MOV     ?V6,#0x0
   \   00015F   78..         MOV     R0,#?V4
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000164   7C08         MOV     R4,#0x8
   \   000166   7D00         MOV     R5,#0x0
   \   000168   7425         MOV     A,#0x25
   \   00016A   12....       LCALL   ?XSTACK_DISP101_8
   \   00016D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000170   7403         MOV     A,#0x3
   \   000172   12....       LCALL   ?DEALLOC_XSTACK8
   1717                                      //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
   1718                                      APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
   \   000175                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000175   741A         MOV     A,#0x1a
   \   000177   12....       LCALL   ?XSTACK_DISP102_8
   \   00017A   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00017D   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   1719                                      ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
   1720                                                             1,
   1721                                                             0x0020,
   1722                                                             &addr,  pInMsg->endPoint,
   1723                                                              FALSE );
   \   000180                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000180   75..00       MOV     ?V4,#0x0
   \   000183   78..         MOV     R0,#?V4
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000188   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00018B   F5..         MOV     ?V4,A
   \   00018D   78..         MOV     R0,#?V4
   \   00018F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000192   7424         MOV     A,#0x24
   \   000194   12....       LCALL   ?XSTACK_DISP100_8
   \   000197   88..         MOV     ?V4,R0
   \   000199   89..         MOV     ?V5,R1
   \   00019B   78..         MOV     R0,#?V4
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A0   75..20       MOV     ?V4,#0x20
   \   0001A3   75..00       MOV     ?V5,#0x0
   \   0001A6   78..         MOV     R0,#?V4
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AB   7420         MOV     A,#0x20
   \   0001AD   12....       LCALL   ?XSTACK_DISP100_8
   \   0001B0   88..         MOV     ?V4,R0
   \   0001B2   89..         MOV     ?V5,R1
   \   0001B4   78..         MOV     R0,#?V4
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   7901         MOV     R1,#0x1
   \   0001BB   7C..         MOV     R4,#dstAddr & 0xff
   \   0001BD   7D..         MOV     R5,#(dstAddr >> 8) & 0xff
   \   0001BF   7A21         MOV     R2,#0x21
   \   0001C1   7B00         MOV     R3,#0x0
   \   0001C3   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001C6   7408         MOV     A,#0x8
   \   0001C8   12....       LCALL   ?DEALLOC_XSTACK8
   1724                                      //zha_project_Smoke_Type = *p;
   1725                                      //uint16 buf[3];
   1726                                      osal_memset(buf,0,sizeof(buf));
   \   0001CB                ; Setup parameters for call to function osal_memset
   \   0001CB   7C06         MOV     R4,#0x6
   \   0001CD   7D00         MOV     R5,#0x0
   \   0001CF   7900         MOV     R1,#0x0
   \   0001D1   EC           MOV     A,R4
   \   0001D2   12....       LCALL   ?XSTACK_DISP101_8
   \   0001D5   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1727                                      buf[1] = *p;
   \   0001D8   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0001DB   7408         MOV     A,#0x8
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   12....       LCALL   ?Subroutine6 & 0xFFFF
   1728                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_8:
   \   0001E3   12....       LCALL   ?XSTACK_DISP102_8
   \   0001E6   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0001E9   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1729                                      //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zha_project_Smoke_Type,0,false,0);
   1730                                      SetTempDeviceType(pInMsg->srcAddr.addr.shortAddr,*p);
                                             ^
Warning[Pe223]: function "SetTempDeviceType" declared implicitly

         {        uint16 supportOD = 0;
                         ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1694  Warning[Pe177]: 
          variable "supportOD" was declared but never referenced

                  uint8 sensorType = 0;
                        ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1695  Warning[Pe177]: 
          variable "sensorType" was declared but never referenced
   \   0001EC                ; Setup parameters for call to function SetTempDeviceType
   \   0001EC   85..82       MOV     DPL,?V2
   \   0001EF   85..83       MOV     DPH,?V3
   \   0001F2   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0001F5   12....       LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
   1731                                   break;
   \                     ??zha_project_ProcessInReportCmd_26:
   \   0001F8   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_24:
   \   0001F9   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001FC   4003         JC      $+5
   \   0001FE   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   \   000201   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000204   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000207   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReportCmd_2`:
   \   00020A   0100         DW        1
   \   00020C   01           DB        1
   \   00020D   ....         DW        ??zha_project_ProcessInReportCmd_26
   \   00020F   ....         DW        ??zha_project_ProcessInReportCmd_25
   \   000211   ....         DW        ??zha_project_ProcessInReportCmd_27
   \                     ??zha_project_ProcessInReportCmd_27:
   \   000213                ; Setup parameters for call to function osal_memset
   \   000213   7C06         MOV     R4,#0x6
   \   000215   7D00         MOV     R5,#0x0
   \   000217   7900         MOV     R1,#0x0
   \   000219   EC           MOV     A,R4
   \   00021A   12....       LCALL   ?XSTACK_DISP101_8
   \   00021D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000220   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000223   7406         MOV     A,#0x6
   \   000225   12....       LCALL   ?XSTACK_DISP0_8
   \   000228   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00022B   12....       LCALL   ?XSTACK_DISP102_8
   \   00022E   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000231   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   \   000234   80C2         SJMP    ??zha_project_ProcessInReportCmd_26
   1732                                
   1733                                  default:
   1734                                  break;
   1735          
   1736                              }
   1737          
   1738                          }
   1739          
   1740                       }
   1741                
   1742                break;
   1743                case ZCL_CLUSTER_ID_SS_IAS_WD:
   1744                      {
   1745                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_9:
   \   000236   7E00         MOV     R6,#0x0
   \   000238   800F         SJMP    ??zha_project_ProcessInReportCmd_28
   1746                          {
   1747                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   1748                              j=statusRec->attrData;
   1749                              switch(statusRec->attrID)
   1750                              {
   1751                                  case COMMAND_SS_IAS_WD_START_WARNING:
   1752                                      //zha_project_Warning = *j;
   1753                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1754                                      osal_memset(buf,0,sizeof(buf));
   1755                                      //buf[0] = zha_project_Warning;
   1756                                      //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
   1757                                      break;
   1758                                  case COMMAND_SS_IAS_WD_SQUAWK:
   1759                                      //zha_project_WD_SQUAWK = *j;
   1760                                      //uint16 buf[3];
   1761                                      osal_memset(buf,0,sizeof(buf));
   \                     ??zha_project_ProcessInReportCmd_29:
   \   00023A                ; Setup parameters for call to function osal_memset
   \   00023A   7C06         MOV     R4,#0x6
   \   00023C   7D00         MOV     R5,#0x0
   \   00023E   7900         MOV     R1,#0x0
   \   000240   740C         MOV     A,#0xc
   \   000242   12....       LCALL   ?XSTACK_DISP101_8
   \   000245   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1762                                     // buf[1] = zha_project_WD_SQUAWK;
   1763                                      //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
   1764                                      break;
   1765          
   1766                                  default:
   1767                                      break;
   1768          
   1769                              }
   \                     ??zha_project_ProcessInReportCmd_30:
   \   000248   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_28:
   \   000249   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00024C   4003         JC      $+5
   \   00024E   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   \   000251   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000254   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   1770          
   1771                          }
   1772          
   1773                       }        
   \                     ??CrossCallReturnLabel_121:
   \   000257   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReportCmd_3`:
   \   00025A   0000         DW        0
   \   00025C   01           DB        1
   \   00025D   ....         DW        ??zha_project_ProcessInReportCmd_30
   \   00025F   ....         DW        ??zha_project_ProcessInReportCmd_29
   \   000261   ....         DW        ??zha_project_ProcessInReportCmd_29
   1774                  
   1775                  break;
   1776                
   1777                case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
   1778                 {
   1779                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_6:
   \   000263   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_31:
   \   000265   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000268   4003         JC      $+5
   \   00026A   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   1780                          {
   1781                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   00026D   12....       LCALL   ?Subroutine8 & 0xFFFF
   1782                              p=(uint16 *)statusRec->attrData;
   1783                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_11:
   \   000270   7013         JNZ     ??zha_project_ProcessInReportCmd_32
   1784                              {
   1785                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1786                                      //zha_project_Temperature_Value = *p;
   1787                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1788                                      osal_memset(buf,0,sizeof(buf));
   \   000272                ; Setup parameters for call to function osal_memset
   \   000272   7C06         MOV     R4,#0x6
   \   000274   7D00         MOV     R5,#0x0
   \   000276   7900         MOV     R1,#0x0
   \   000278   AA..         MOV     R2,?XSP + 0
   \   00027A   AB..         MOV     R3,?XSP + 1
   \   00027C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1789                                      buf[0] = *p;
   \   00027F   12....       LCALL   ?Subroutine3 & 0xFFFF
   1790                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_134:
   \   000282   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1791                                      
   1792                                  break;
   1793                                  default:
   1794                                  break;
   1795          
   1796                              }
   1797          
   1798                          }
   \                     ??zha_project_ProcessInReportCmd_32:
   \   000285   0E           INC     R6
   \   000286   80DD         SJMP    ??zha_project_ProcessInReportCmd_31
   1799          
   1800                       }
   1801                   break;
   1802                  case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1803                     {
   1804                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_3:
   \   000288   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_33:
   \   00028A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00028D   5070         JNC     ??zha_project_ProcessInReportCmd_10
   1805                          {
   1806                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   00028F   12....       LCALL   ?Subroutine8 & 0xFFFF
   1807                              j=statusRec->attrData;
   1808                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1809                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_12:
   \   000292   7024         JNZ     ??zha_project_ProcessInReportCmd_34
   1810                              {
   1811                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1812                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1813                                      osal_memset(buf,0,sizeof(buf));
   \   000294                ; Setup parameters for call to function osal_memset
   \   000294   7C06         MOV     R4,#0x6
   \   000296   7D00         MOV     R5,#0x0
   \   000298   7900         MOV     R1,#0x0
   \   00029A   AA..         MOV     R2,?XSP + 0
   \   00029C   AB..         MOV     R3,?XSP + 1
   \   00029E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1814                                      //zha_project_Level_to_Level = *j;
   1815                                      buf[1] = *j;
   \   0002A1   85..82       MOV     DPL,?V2
   \   0002A4   85..83       MOV     DPH,?V3
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   F8           MOV     R0,A
   \   0002A9   7402         MOV     A,#0x2
   \   0002AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AE   E8           MOV     A,R0
   \   0002AF   F0           MOVX    @DPTR,A
   \   0002B0   A3           INC     DPTR
   \   0002B1   E4           CLR     A
   \   0002B2   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   1816                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_145:
   \   0002B5   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1817                                  break;
   1818                                  default:
   1819                                  break;
   1820          
   1821                              }
   1822          
   1823                          }
   \                     ??zha_project_ProcessInReportCmd_34:
   \   0002B8   0E           INC     R6
   \   0002B9   80CF         SJMP    ??zha_project_ProcessInReportCmd_33
   1824          
   1825                       }
   1826              
   1827                  break;
   1828                case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
   1829                     {
   1830                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_7:
   \   0002BB   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_35:
   \   0002BD   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0002C0   503D         JNC     ??zha_project_ProcessInReportCmd_10
   1831                          {
   1832                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   0002C2   12....       LCALL   ?Subroutine8 & 0xFFFF
   1833                              p=(uint16 *)statusRec->attrData;
   1834                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1835                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_13:
   \   0002C5   7013         JNZ     ??zha_project_ProcessInReportCmd_36
   1836                              {
   1837                                  case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
   1838                                      //zha_project_Humidity_Value = *p;
   1839                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1840                                      osal_memset(buf,0,sizeof(buf));
   \   0002C7                ; Setup parameters for call to function osal_memset
   \   0002C7   7C06         MOV     R4,#0x6
   \   0002C9   7D00         MOV     R5,#0x0
   \   0002CB   7900         MOV     R1,#0x0
   \   0002CD   AA..         MOV     R2,?XSP + 0
   \   0002CF   AB..         MOV     R3,?XSP + 1
   \   0002D1   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1841                                      buf[0] = *p;
   \   0002D4   12....       LCALL   ?Subroutine3 & 0xFFFF
   1842                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_135:
   \   0002D7   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1843                                      
   1844                                  break;
   1845                                  default:
   1846                                  break;
   1847          
   1848                              }
   1849          
   1850                          }
   \                     ??zha_project_ProcessInReportCmd_36:
   \   0002DA   0E           INC     R6
   \   0002DB   80E0         SJMP    ??zha_project_ProcessInReportCmd_35
   1851          
   1852                       }     
   1853                  
   1854                  
   1855                  break;   
   1856                case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
   1857                     {
   1858                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_5:
   \   0002DD   7E00         MOV     R6,#0x0
   \   0002DF   8019         SJMP    ??zha_project_ProcessInReportCmd_37
   1859                          {
   1860                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReportCmd_38:
   \   0002E1   12....       LCALL   ?Subroutine8 & 0xFFFF
   1861                              p=(uint16 *)statusRec->attrData;
   1862                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1863                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_14:
   \   0002E4   7013         JNZ     ??zha_project_ProcessInReportCmd_39
   1864                              {
   1865                                  case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
   1866                                      //zha_project_Illumiance_Value = *p;
   1867                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1868                                      osal_memset(buf,0,sizeof(buf));
   \   0002E6                ; Setup parameters for call to function osal_memset
   \   0002E6   7C06         MOV     R4,#0x6
   \   0002E8   7D00         MOV     R5,#0x0
   \   0002EA   7900         MOV     R1,#0x0
   \   0002EC   AA..         MOV     R2,?XSP + 0
   \   0002EE   AB..         MOV     R3,?XSP + 1
   \   0002F0   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1869                                      buf[0] = *p;
   \   0002F3   12....       LCALL   ?Subroutine3 & 0xFFFF
   1870                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly

      uint8 i,k;
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1572  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \                     ??CrossCallReturnLabel_136:
   \   0002F6   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1871                                      
   1872                                  break;
   1873                                  default:
   1874                                  break;
   1875          
   1876                              }
   1877          
   1878                          }
   \                     ??zha_project_ProcessInReportCmd_39:
   \   0002F9   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_37:
   \   0002FA   12....       LCALL   ?Subroutine13 & 0xFFFF
   1879          
   1880                       }          
   1881                  
   1882                  
   1883                  break;
   1884                default:
   1885                  break;
   1886              //ReadRspStatus.attrID = readRspCmd->attrList;
   1887              // Notify the originator of the results of the original read attributes 
   1888              // attempt and, for each successfull request, the value of the requested 
   1889              // attribute
   1890          #endif
   1891              }
   \                     ??CrossCallReturnLabel_39:
   \   0002FD   40E2         JC      ??zha_project_ProcessInReportCmd_38
   1892          
   1893            
   1894            
   1895            return TRUE; 
   \                     ??zha_project_ProcessInReportCmd_10:
   \   0002FF   02....       LJMP    ?Subroutine2 & 0xFFFF
   1896          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV     A,R6
   \   000001   75F005       MOV     B,#0x5
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0
   \   00000A   28           ADD     A,R0
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V1
   \   00000F   39           ADDC    A,R1
   \   000010   F583         MOV     DPH,A
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   EE           MOV     A,R6
   \   000009   C3           CLR     C
   \   00000A   98           SUBB    A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V3,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000014   E8           MOV     A,R0
   \   000015   49           ORL     A,R1
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   A882         MOV     R0,DPL
   \   000005   A983         MOV     R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine51_0
   \   000006                ; // Fall through to label ??Subroutine51_0
   1897          #endif
   1898          /*********************************************************************
   1899           * @fn      zha_project_ProcessInDefaultRspCmd
   1900           *
   1901           * @brief   Process the "Profile" Default Response Command
   1902           *
   1903           * @param   pInMsg - incoming message to process
   1904           *
   1905           * @return  none
   1906           */
   1907          static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1908          {
   1909            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1910          
   1911            // Device is notified of the Default Response command.
   1912            (void)pInMsg;
   1913          
   1914            return ( TRUE );
   1915          }
   1916          
   1917          #ifdef ZCL_DISCOVER
   1918          /*********************************************************************
   1919           * @fn      zha_project_ProcessInDiscCmdsRspCmd
   1920           *
   1921           * @brief   Process the Discover Commands Response Command
   1922           *
   1923           * @param   pInMsg - incoming message to process
   1924           *
   1925           * @return  none
   1926           */
   1927          static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1928          {
   1929            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1930            uint8 i;
   1931          
   1932            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1933            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1934            {
   1935              // Device is notified of the result of its attribute discovery command.
   1936            }
   1937          
   1938            return ( TRUE );
   1939          }
   1940          
   1941          /*********************************************************************
   1942           * @fn      zha_project_ProcessInDiscAttrsRspCmd
   1943           *
   1944           * @brief   Process the "Profile" Discover Attributes Response Command
   1945           *
   1946           * @param   pInMsg - incoming message to process
   1947           *
   1948           * @return  none
   1949           */
   1950          static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1951          {
   1952            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1953            uint8 i;
   1954          
   1955            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1956            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1957            {
   1958              // Device is notified of the result of its attribute discovery command.
   1959            }
   1960          
   1961            return ( TRUE );
   1962          }
   1963          
   1964          /*********************************************************************
   1965           * @fn      zha_project_ProcessInDiscAttrsExtRspCmd
   1966           *
   1967           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1968           *
   1969           * @param   pInMsg - incoming message to process
   1970           *
   1971           * @return  none
   1972           */
   1973          static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1974          {
   1975            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1976            uint8 i;
   1977          
   1978            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1979            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1980            {
   1981              // Device is notified of the result of its attribute discovery command.
   1982            }
   1983          
   1984            return ( TRUE );
   1985          }
   1986          #endif // ZCL_DISCOVER
   1987          
   1988          #if ZCL_EZMODE
   1989          /*********************************************************************
   1990           * @fn      zha_project_ProcessZDOMsgs
   1991           *
   1992           * @brief   Called when this node receives a ZDO/ZDP response.
   1993           *
   1994           * @param   none
   1995           *
   1996           * @return  status
   1997           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1998          static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   \                     zha_project_ProcessZDOMsgs:
   1999          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2000            zclEZMode_ActionData_t data;
   2001            ZDO_MatchDescRsp_t *pMatchDescRsp;
   2002          
   2003            // Let EZ-Mode know of the Simple Descriptor Response
   2004              ZDO_DeviceAnnce_t devAnnce;
   2005              zAddrType_t addr;
   2006              afAddrType_t destAddr;
   2007              uint8 *pData;
   2008              uint8 address[8];
   2009              uint8 i;
   2010              uint8 pValue[Z_EXTADDR_LEN];
   2011              uint8 pValue1[Z_EXTADDR_LEN];
   2012              switch ( pMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00001A   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessZDOMsgs>_0`:
   \   00001D   0000         DW        0
   \   00001F   0600         DW        6
   \   000021   1300         DW        19
   \   000023   ....         DW        ??zha_project_ProcessZDOMsgs_0
   \   000025   0480         DW        32772
   \   000027   ....         DW        ??zha_project_ProcessZDOMsgs_1
   \   000029   0580         DW        32773
   \   00002B   ....         DW        ??zha_project_ProcessZDOMsgs_2
   \   00002D   0680         DW        32774
   \   00002F   ....         DW        ??zha_project_ProcessZDOMsgs_3
   \   000031   2080         DW        32800
   \   000033   ....         DW        ??zha_project_ProcessZDOMsgs_4
   \   000035   2180         DW        32801
   \   000037   ....         DW        ??zha_project_ProcessZDOMsgs_5
   \   000039   ....         DW        ??zha_project_ProcessZDOMsgs_6
   2013              {
   2014                  case End_Device_Bind_rsp:
   2015                  {
   2016                      if ( ZDO_ParseBindRsp( pMsg ) == ZSuccess )
   \                     ??zha_project_ProcessZDOMsgs_4:
   \   00003B   EE           MOV     A,R6
   \   00003C   2413         ADD     A,#0x13
   \   00003E   F582         MOV     DPL,A
   \   000040   E4           CLR     A
   \   000041   3F           ADDC    A,R7
   \   000042   F583         MOV     DPH,A
   \   000044   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000047   E0           MOVX    A,@DPTR
   \   000048   7004         JNZ     ??zha_project_ProcessZDOMsgs_7
   2017                      {
   2018          
   2019                      // Light LED
   2020                      //HalUARTWrite(HAL_UART_PORT_0,"Bind established",sizeof("Bind established"));
   2021                          HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00004A                ; Setup parameters for call to function HalLedSet
   \   00004A   7A01         MOV     R2,#0x1
   \   00004C   8002         SJMP    ??zha_project_ProcessZDOMsgs_8
   2022                      }
   2023                      #if defined( BLINK_LEDS )
   2024                      else
   2025                      {
   2026                      // Flash LED to show failure
   2027                          HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??zha_project_ProcessZDOMsgs_7:
   \   00004E                ; Setup parameters for call to function HalLedSet
   \   00004E   7A04         MOV     R2,#0x4
   \                     ??zha_project_ProcessZDOMsgs_8:
   \   000050   7908         MOV     R1,#0x8
   \   000052   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000055   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   2028                      }
   2029                      #endif
   2030                      break;
   2031                  }
   2032                  case Match_Desc_rsp:
   2033                  {
   2034                      ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   \                     ??zha_project_ProcessZDOMsgs_3:
   \   000058                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000058   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00005B   8A..         MOV     ?V0,R2
   \   00005D   8B..         MOV     ?V1,R3
   \   00005F   AE..         MOV     R6,?V0
   \   000061   AF..         MOV     R7,?V1
   2035                      if ( pRsp )
   \   000063   EE           MOV     A,R6
   \   000064   4F           ORL     A,R7
   \   000065   7003         JNZ     $+5
   \   000067   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   2036                      {
   2037                          if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   7021         JNZ     ??zha_project_ProcessZDOMsgs_9
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   601B         JZ      ??zha_project_ProcessZDOMsgs_9
   2038                          {
   2039                              zha_project_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000077   90....       MOV     DPTR,#zha_project_DstAddr + 8
   \   00007A   12....       LCALL   ?Subroutine7 & 0xFFFF
   2040                              zha_project_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_151:
   \   00007D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000080   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   2041                              // Take the first endpoint, Can be changed to search through endpoints
   2042                              zha_project_DstAddr.endPoint = pRsp->epList[0];
   \                     ??CrossCallReturnLabel_153:
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   90....       MOV     DPTR,#zha_project_DstAddr + 9
   \   00008A   F0           MOVX    @DPTR,A
   2043          
   2044                              // Light LED
   2045                              HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00008B                ; Setup parameters for call to function HalLedSet
   \   00008B   7A01         MOV     R2,#0x1
   \   00008D   7908         MOV     R1,#0x8
   \   00008F   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2046                          }
   2047                          osal_mem_free( pRsp );
   \                     ??zha_project_ProcessZDOMsgs_9:
   \   000092                ; Setup parameters for call to function osal_mem_free
   \   000092   02....       LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
   2048                      }
   2049                      break;
   2050                  }
   2051                  case Device_annce:
   2052                  { 
   2053                      uint8 k=0;
   2054                      ZDO_ParseDeviceAnnce( pMsg, &devAnnce );
   \                     ??zha_project_ProcessZDOMsgs_0:
   \   000095                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000095   AC..         MOV     R4,?XSP + 0
   \   000097   AD..         MOV     R5,?XSP + 1
   \   000099   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2055                      
   2056          #if ZG_BUILD_COORDINATOR_TYPE            
   2057                      for(i=0;i<5;i++)
   \   00009C   7E00         MOV     R6,#0x0
   2058                      {
   2059          
   2060                          if(AssociatedDevList[i].shortAddr!=devAnnce.nwkAddr)
   \                     ??zha_project_ProcessZDOMsgs_11:
   \   00009E   EE           MOV     A,R6
   \   00009F   75F01C       MOV     B,#0x1c
   \   0000A2   A4           MUL     AB
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A9F0         MOV     R1,B
   \   0000A6   74..         MOV     A,#AssociatedDevList & 0xff
   \   0000A8   28           ADD     A,R0
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   74..         MOV     A,#(AssociatedDevList >> 8) & 0xff
   \   0000AD   39           ADDC    A,R1
   \   0000AE   F583         MOV     DPH,A
   \   0000B0   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   68           XRL     A,R0
   \   0000BB   7003         JNZ     ??zha_project_ProcessZDOMsgs_12
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   69           XRL     A,R1
   \                     ??zha_project_ProcessZDOMsgs_12:
   \   0000C0   6015         JZ      ??zha_project_ProcessZDOMsgs_13
   2061                          {
   2062                              SetTempDeviceSA(devAnnce.nwkAddr,devAnnce.extAddr);
                                     ^
Warning[Pe223]: function "SetTempDeviceSA" declared implicitly

              uint8 k=0;
                    ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2053  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \   0000C2                ; Setup parameters for call to function SetTempDeviceSA
   \   0000C2   7402         MOV     A,#0x2
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   AC82         MOV     R4,DPL
   \   0000C9   AD83         MOV     R5,DPH
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   2063                          }
   2064                      }
   \                     ??CrossCallReturnLabel_90:
   \   0000D4   12....       LCALL   `??SetTempDeviceSA::?relay`; Banked call to: SetTempDeviceSA
   \                     ??zha_project_ProcessZDOMsgs_13:
   \   0000D7   0E           INC     R6
   \   0000D8   EE           MOV     A,R6
   \   0000D9   C3           CLR     C
   \   0000DA   9405         SUBB    A,#0x5
   \   0000DC   40C0         JC      ??zha_project_ProcessZDOMsgs_11
   2065          #endif
   2066                      // set simple descriptor query event
   2067                      //DelayMS(50);
   2068                      simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000DE   90....       MOV     DPTR,#simpleDescReqAddr + 8
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   F0           MOVX    @DPTR,A
   2069                      simpleDescReqAddr.addr.shortAddr = devAnnce.nwkAddr;
   \   0000E4   85..82       MOV     DPL,?XSP + 0
   \   0000E7   85..83       MOV     DPH,?XSP + 1
   \   0000EA   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000ED   90....       MOV     DPTR,#simpleDescReqAddr
   \   0000F0   E8           MOV     A,R0
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E9           MOV     A,R1
   \   0000F4   F0           MOVX    @DPTR,A
   2070          //            afAddrType_t dstAddr;
   2071          //            dstAddr.addrMode=afAddr16Bit;
   2072          //            dstAddr.addr.shortAddr=devAnnce.nwkAddr;
   2073          //            dstAddr.endPoint=1;
   2074          //            zcl_SendCommand( 1, &dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, COMMAND_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, FALSE, 0, 0, 0, NULL );
   2075                      //osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT ,50);
   2076                      //osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_POWER_EVT,100);
   2077                      //osal_start_timerEx( zha_project_TaskID, ZHA_ACTIVE_EP_EVT,150);
   2078                      //osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT,200);
   2079                      osal_set_event( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT );
   \   0000F5                ; Setup parameters for call to function osal_set_event
   \   0000F5   7A04         MOV     R2,#0x4
   \   0000F7   7B00         MOV     R3,#0x0
   \   0000F9   90....       MOV     DPTR,#zha_project_TaskID
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F9           MOV     R1,A
   \   0000FE   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   2080                      break;
   \   000101   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   2081                  }
   2082          
   2083                  case Active_EP_rsp:
   2084                  {
   2085                      ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   \                     ??zha_project_ProcessZDOMsgs_2:
   \   000104                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000104   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000107   8A..         MOV     ?V0,R2
   \   000109   8B..         MOV     ?V1,R3
   \   00010B   AE..         MOV     R6,?V0
   \   00010D   AF..         MOV     R7,?V1
   2086                      *zha_project_ActiveEP = *pRsp;
   \   00010F   90....       MOV     DPTR,#zha_project_ActiveEP
   \   000112   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000115   8B83         MOV     DPH,R3
   \   000117   8A82         MOV     DPL,R2
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2087                      osal_memset(ep,0,sizeof(ep));
   \   00011E                ; Setup parameters for call to function osal_memset
   \   00011E   7C05         MOV     R4,#0x5
   \   000120   FD           MOV     R5,A
   \   000121   F9           MOV     R1,A
   \   000122   7A..         MOV     R2,#ep & 0xff
   \   000124   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   000126   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2088                      osal_memcpy(ep,pRsp->epList,pRsp->cnt);
   \   000129                ; Setup parameters for call to function osal_memcpy
   \   000129   EE           MOV     A,R6
   \   00012A   2404         ADD     A,#0x4
   \   00012C   F5..         MOV     ?V0,A
   \   00012E   E4           CLR     A
   \   00012F   3F           ADDC    A,R7
   \   000130   F5..         MOV     ?V1,A
   \   000132   75..00       MOV     ?V2,#0x0
   \   000135   78..         MOV     R0,#?V0
   \   000137   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00013A   8E82         MOV     DPL,R6
   \   00013C   8F83         MOV     DPH,R7
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   FC           MOV     R4,A
   \   000143   7D00         MOV     R5,#0x0
   \   000145   7A..         MOV     R2,#ep & 0xff
   \   000147   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   000149   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00014C   7403         MOV     A,#0x3
   \   00014E   12....       LCALL   ?DEALLOC_XSTACK8
   2089                      simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000151   90....       MOV     DPTR,#simpleDescReqAddr + 8
   \   000154   12....       LCALL   ?Subroutine7 & 0xFFFF
   2090                      simpleDescReqAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_152:
   \   000157   A882         MOV     R0,DPL
   \   000159   A983         MOV     R1,DPH
   \   00015B   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00015E   90....       MOV     DPTR,#simpleDescReqAddr
   \   000161   EA           MOV     A,R2
   \   000162   F0           MOVX    @DPTR,A
   \   000163   A3           INC     DPTR
   \   000164   EB           MOV     A,R3
   \   000165   F0           MOVX    @DPTR,A
   2091                      //HalUARTWrite(HAL_UART_PORT_0,ep,pRsp->cnt);
   2092                      //zha_project_ActiveEP.status = pRsp->status;
   2093                      //zha_project_ActiveEP.nwkAddr= pRsp->nwkAddr;
   2094                      //osal_memcpy(zha_project_ActiveEP.epList,pRsp->epList,sizeof(uint8));
   2095                      //zha_project_ActiveEP.epList[] = pRsp->epList[];
   2096                      //DelayMS(50);
   2097          #if ZG_BUILD_COORDINATOR_TYPE            
   2098                      SetTempDeviceEP(pRsp->nwkAddr , ep );
                             ^
Warning[Pe223]: function "SetTempDeviceEP" declared implicitly
   \   000166                ; Setup parameters for call to function SetTempDeviceEP
   \   000166   7C..         MOV     R4,#ep & 0xff
   \   000168   7D..         MOV     R5,#(ep >> 8) & 0xff
   \   00016A   8882         MOV     DPL,R0
   \   00016C   8983         MOV     DPH,R1
   \   00016E   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000171   12....       LCALL   `??SetTempDeviceEP::?relay`; Banked call to: SetTempDeviceEP
   2099          #endif
   2100                      osal_set_event( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT );
   \   000174                ; Setup parameters for call to function osal_set_event
   \   000174   7A10         MOV     R2,#0x10
   \   000176   7B00         MOV     R3,#0x0
   \   000178   90....       MOV     DPTR,#zha_project_TaskID
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F9           MOV     R1,A
   \   00017D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   2101                      osal_mem_free( pRsp ); 
   \   000180                ; Setup parameters for call to function osal_mem_free
   \                     ??zha_project_ProcessZDOMsgs_10:
   \   000180   EE           MOV     A,R6
   \   000181   FA           MOV     R2,A
   \   000182   EF           MOV     A,R7
   \   000183   FB           MOV     R3,A
   \   000184   02....       LJMP    ??zha_project_ProcessZDOMsgs_14 & 0xFFFF
   2102                      break;
   2103                  }
   2104                  case Simple_Desc_rsp:
   2105                  {
   2106                      uint8 k=0;
   2107                      ZDO_SimpleDescRsp_t *pSimpleDescRsp;   // pointer to received simple desc response
   2108                      pSimpleDescRsp = (ZDO_SimpleDescRsp_t *)osal_mem_alloc( sizeof( ZDO_SimpleDescRsp_t ) );
   \                     ??zha_project_ProcessZDOMsgs_1:
   \   000187                ; Setup parameters for call to function osal_mem_alloc
   \   000187   7A0F         MOV     R2,#0xf
   \   000189   7B00         MOV     R3,#0x0
   \   00018B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00018E   8A..         MOV     ?V0,R2
   \   000190   8B..         MOV     ?V1,R3
   2109          
   2110          
   2111                      if(pSimpleDescRsp)
   \   000192   EA           MOV     A,R2
   \   000193   45..         ORL     A,?V1
   \   000195   7003         JNZ     $+5
   \   000197   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   2112                      {
   2113                          pSimpleDescRsp->simpleDesc.pAppInClusterList = NULL;
   \   00019A   EA           MOV     A,R2
   \   00019B   240A         ADD     A,#0xa
   \   00019D   F5..         MOV     ?V4,A
   \   00019F   E4           CLR     A
   \   0001A0   35..         ADDC    A,?V1
   \   0001A2   F5..         MOV     ?V5,A
   \   0001A4   85..82       MOV     DPL,?V4
   \   0001A7   F583         MOV     DPH,A
   \   0001A9   E4           CLR     A
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   A3           INC     DPTR
   \   0001AC   F0           MOVX    @DPTR,A
   2114                          pSimpleDescRsp->simpleDesc.pAppOutClusterList = NULL;
   \   0001AD   EA           MOV     A,R2
   \   0001AE   240D         ADD     A,#0xd
   \   0001B0   F5..         MOV     ?V2,A
   \   0001B2   E4           CLR     A
   \   0001B3   35..         ADDC    A,?V1
   \   0001B5   F5..         MOV     ?V3,A
   \   0001B7   85..82       MOV     DPL,?V2
   \   0001BA   F583         MOV     DPH,A
   \   0001BC   E4           CLR     A
   \   0001BD   F0           MOVX    @DPTR,A
   \   0001BE   A3           INC     DPTR
   \   0001BF   F0           MOVX    @DPTR,A
   2115          
   2116                          ZDO_ParseSimpleDescRsp( pMsg, pSimpleDescRsp );
   \   0001C0                ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
   \   0001C0   AC..         MOV     R4,?V0
   \   0001C2   AD..         MOV     R5,?V1
   \   0001C4   EE           MOV     A,R6
   \   0001C5   FA           MOV     R2,A
   \   0001C6   EF           MOV     A,R7
   \   0001C7   FB           MOV     R3,A
   \   0001C8   12....       LCALL   `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
   2117          #if ZG_BUILD_COORDINATOR_TYPE
   2118                          if(pSimpleDescRsp->simpleDesc.AppDeviceId ==0x0402)
   \   0001CB   85..82       MOV     DPL,?V0
   \   0001CE   85..83       MOV     DPH,?V1
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0001DA   7402         MOV     A,#0x2
   \   0001DC   6C           XRL     A,R4
   \   0001DD   7003         JNZ     ??zha_project_ProcessZDOMsgs_15
   \   0001DF   7404         MOV     A,#0x4
   \   0001E1   6D           XRL     A,R5
   \                     ??zha_project_ProcessZDOMsgs_15:
   \   0001E2   7025         JNZ     ??zha_project_ProcessZDOMsgs_16
   2119                          {
   2120          //                    afAddrType_t  dscReqAddr;
   2121          //                    dscReqAddr.addrMode=afAddr16Bit;
   2122          //                    dscReqAddr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
   2123          //                    dscReqAddr.endPoint=1;
   2124          //                    zclReadCmd_t BasicAttrsList;
   2125          //                    BasicAttrsList.numAttr = 1;
   2126          //                    BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
   2127          //                    zcl_SendRead( 1, &dscReqAddr,
   2128          //                    ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
   2129          //                    ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
   2130                              osal_start_timerEx( zha_project_TaskID, ZONE_TYPE_EVT,200);
   \   0001E4                ; Setup parameters for call to function osal_start_timerEx
   \   0001E4   90....       MOV     DPTR,#__Constant_c8
   \   0001E7   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001EA   7A20         MOV     R2,#0x20
   \   0001EC   7B00         MOV     R3,#0x0
   \   0001EE   90....       MOV     DPTR,#zha_project_TaskID
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   F9           MOV     R1,A
   \   0001F3   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001F6   7404         MOV     A,#0x4
   \   0001F8   12....       LCALL   ?DEALLOC_XSTACK8
   2131                              osal_set_event( zha_project_TaskID, ZONE_TYPE_EVT );
   \   0001FB                ; Setup parameters for call to function osal_set_event
   \   0001FB   7A20         MOV     R2,#0x20
   \   0001FD   7B00         MOV     R3,#0x0
   \   0001FF   90....       MOV     DPTR,#zha_project_TaskID
   \   000202   E0           MOVX    A,@DPTR
   \   000203   F9           MOV     R1,A
   \   000204   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000207   800D         SJMP    ??zha_project_ProcessZDOMsgs_17
   2132                              //DelayMS(100);
   2133                              //zclSampleCIE_WriteIAS_CIE_Address(&destAddr); 
   2134                          }
   2135                          else
   2136                              SetTempDeviceType(pSimpleDescRsp->nwkAddr,pSimpleDescRsp->simpleDesc.AppDeviceId);
                                     ^
Warning[Pe223]: function "SetTempDeviceType" declared implicitly

              uint8 k=0;
                    ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2106  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \                     ??zha_project_ProcessZDOMsgs_16:
   \   000209                ; Setup parameters for call to function SetTempDeviceType
   \   000209   85..82       MOV     DPL,?V0
   \   00020C   85..83       MOV     DPH,?V1
   \   00020F   A3           INC     DPTR
   \   000210   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000213   12....       LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
   2137          #endif
   2138                          //osal_mem_free( pSimpleDescRsp );
   2139                          // free memory for InClusterList
   2140                          if (pSimpleDescRsp->simpleDesc.pAppInClusterList)
   \                     ??zha_project_ProcessZDOMsgs_17:
   \   000216   85..82       MOV     DPL,?V4
   \   000219   85..83       MOV     DPH,?V5
   \   00021C   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00021F   6003         JZ      ??zha_project_ProcessZDOMsgs_18
   2141                          {
   2142                              osal_mem_free(pSimpleDescRsp->simpleDesc.pAppInClusterList);
   \   000221                ; Setup parameters for call to function osal_mem_free
   \   000221   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2143                          }
   2144          
   2145                          // free memory for OutClusterList
   2146                          if (pSimpleDescRsp->simpleDesc.pAppOutClusterList)
   \                     ??zha_project_ProcessZDOMsgs_18:
   \   000224   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000227   6003         JZ      ??zha_project_ProcessZDOMsgs_19
   2147                          {
   2148                              osal_mem_free(pSimpleDescRsp->simpleDesc.pAppOutClusterList);
   \   000229                ; Setup parameters for call to function osal_mem_free
   \   000229   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2149                          }
   2150          
   2151                          osal_mem_free( pSimpleDescRsp );
   \                     ??zha_project_ProcessZDOMsgs_19:
   \   00022C                ; Setup parameters for call to function osal_mem_free
   \   00022C   AA..         MOV     R2,?V0
   \   00022E   AB..         MOV     R3,?V1
   \   000230   8003         SJMP    ??zha_project_ProcessZDOMsgs_14
   2152                      }
   2153                      break;
   2154                  }
   2155          
   2156                  case Bind_rsp:
   2157                      ZDO_MgmtBindRsp_t *Bind_pRsp =ZDO_ParseMgmtBindRsp( pMsg ) ;
                             ^
Warning[Pe1072]: a declaration cannot have a label
   \                     ??zha_project_ProcessZDOMsgs_5:
   \   000232                ; Setup parameters for call to function ZDO_ParseMgmtBindRsp
   \   000232   12....       LCALL   `??ZDO_ParseMgmtBindRsp::?relay`; Banked call to: ZDO_ParseMgmtBindRsp
   2158                      afAddrType_t  dscReqAddr;
                                           ^
Warning[Pe550]: variable "dscReqAddr" was set but never used

      switch ( pMsg->clusterID )
      ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2012  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "Bind_pRsp" (declared at line 2157 of "C:\Texas
                      Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")

    zclEZMode_ActionData_t data;
                           ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2000  Warning[Pe177]: 
          variable "data" was declared but never referenced

    ZDO_MatchDescRsp_t *pMatchDescRsp;
                        ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2001  Warning[Pe177]: 
          variable "pMatchDescRsp" was declared but never referenced

      zAddrType_t addr;
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2005  Warning[Pe177]: 
          variable "addr" was declared but never referenced

      afAddrType_t destAddr;
                   ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2006  Warning[Pe177]: 
          variable "destAddr" was declared but never referenced

      uint8 *pData;
             ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2007  Warning[Pe177]: 
          variable "pData" was declared but never referenced

      uint8 address[8];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2008  Warning[Pe177]: 
          variable "address" was declared but never referenced

      uint8 pValue[Z_EXTADDR_LEN];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2010  Warning[Pe177]: 
          variable "pValue" was declared but never referenced

      uint8 pValue1[Z_EXTADDR_LEN];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2011  Warning[Pe177]: 
          variable "pValue1" was declared but never referenced
   2159                      dscReqAddr.addrMode=afAddr16Bit;
   2160                      if ( Bind_pRsp )
   2161                      {
   2162                        //osal_memcpy(dstAddr.addr.extAddr,NWK_command.NWK_General_Frame.NWKCG_TargetAddress,8);
   2163                        //dstAddr.addr.shortAddr=Node_Info.uiNwk_Addr;
   2164                        dscReqAddr.addr.shortAddr=AssociatedDevList[0].shortAddr;
   2165                        dscReqAddr.endPoint=0x01;
   2166                        //zclSampleCIE_WriteIAS_CIE_Address(&dscReqAddr);   
   2167                      }
   2168                      osal_mem_free( Bind_pRsp );
   \   000235                ; Setup parameters for call to function osal_mem_free
   \                     ??zha_project_ProcessZDOMsgs_14:
   \   000235   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2169                      break;
   2170                  default:
   2171                      break;
   2172              }
   2173          }
   \                     ??zha_project_ProcessZDOMsgs_6:
   \   000238   740B         MOV     A,#0xb
   \   00023A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023D   7F06         MOV     R7,#0x6
   \   00023F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine54_0
   \   000002                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   2174          
   2175          /*********************************************************************
   2176           * @fn      zha_project_EZModeCB
   2177           *
   2178           * @brief   The Application is informed of events. This can be used to show on the UI what is
   2179          *           going on during EZ-Mode steering/finding/binding.
   2180           *
   2181           * @param   state - an
   2182           *
   2183           * @return  none
   2184           */
   2185          static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   2186          {
   2187          #ifdef LCD_SUPPORTED
   2188            char *pStr;
   2189            uint8 err;
   2190          #endif
   2191          
   2192            // time to go into identify mode
   2193            if ( state == EZMODE_STATE_IDENTIFYING )
   2194            {
   2195          #ifdef LCD_SUPPORTED
   2196              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   2197          #endif
   2198          
   2199              zha_project_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   2200              //zha_project_ProcessIdentifyTimeChange();
   2201            }
   2202          
   2203            // autoclosing, show what happened (success, cancelled, etc...)
   2204            if( state == EZMODE_STATE_AUTOCLOSE )
   2205            {
   2206          #ifdef LCD_SUPPORTED
   2207              pStr = NULL;
   2208              err = pData->sAutoClose.err;
   2209              if ( err == EZMODE_ERR_SUCCESS )
   2210              {
   2211                pStr = "EZMode: Success";
   2212              }
   2213              else if ( err == EZMODE_ERR_NOMATCH )
   2214              {
   2215                pStr = "EZMode: NoMatch"; // not a match made in heaven
   2216              }
   2217              if ( pStr )
   2218              {
   2219                if ( giLightScreenMode == LIGHT_MAINMODE )
   2220                {
   2221                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   2222                }
   2223              }
   2224          #endif
   2225            }
   2226          
   2227            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   2228            if( state == EZMODE_STATE_FINISH )
   2229            {
   2230              // turn off identify mode
   2231              zha_project_IdentifyTime = 0;
   2232              //zha_project_ProcessIdentifyTimeChange();
   2233          
   2234          #ifdef LCD_SUPPORTED
   2235              // if successful, inform user which nwkaddr/ep we bound to
   2236              pStr = NULL;
   2237              err = pData->sFinish.err;
   2238              if( err == EZMODE_ERR_SUCCESS )
   2239              {
   2240                // already stated on autoclose
   2241              }
   2242              else if ( err == EZMODE_ERR_CANCELLED )
   2243              {
   2244                pStr = "EZMode: Cancel";
   2245              }
   2246              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   2247              {
   2248                pStr = "EZMode: BadParm";
   2249              }
   2250              else if ( err == EZMODE_ERR_TIMEDOUT )
   2251              {
   2252                pStr = "EZMode: TimeOut";
   2253              }
   2254              if ( pStr )
   2255              {
   2256                if ( giLightScreenMode == LIGHT_MAINMODE )
   2257                {
   2258                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   2259                }
   2260              }
   2261          #endif
   2262              // show main UI screen 3 seconds after binding
   2263              //osal_start_timerEx( zha_project_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   2264            }
   2265          }
   2266          #endif // ZCL_EZMODE
   2267          
   2268          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2269          static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   \                     zha_project_LevelControlMoveToLevelCB:
   2270          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2271              zha_project_Level_to_Level=pCmd->level;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   90....       MOV     DPTR,#zha_project_Level_to_Level
   \   00000C   F0           MOVX    @DPTR,A
   2272          }
   \   00000D   02....       LJMP    ??Subroutine41_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   01           DB 1
   \   000001   ....         DW zha_project_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zha_project_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zha_project_CmdCallbacks>`:
   \   000000   ....         DW `??zha_project_BasicResetCB::?relay`
   \   000002   ....         DW `??zha_project_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??zha_project_IdentifyQueryRspCB::?relay`
   \   00000C   ....         DW `??zha_project_OnOffCB::?relay`
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   ....         DW `??zha_project_LevelControlMoveToLevelCB::?relay`
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_ProcessInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_ProcessInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_ProcessInReportCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_ProcessInReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_LevelControlMoveToLevelCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_LevelControlMoveToLevelCB
   2273          
   2274          
   2275          static ZStatus_t zclZLL_ColorControl_MoveToColorTemperature(zclCCMoveToColorTemperature_t *pCmd)
   2276          {
   2277                  zha_project_Light_Color_Status = pCmd->colorTemperature;
   2278          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "zclZLL_ColorControl_MoveToColorTemperature"

  static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2185  Warning[Pe177]: 
          function "zha_project_EZModeCB" was declared but never referenced
   2279          
   2280          static void zclSS_ChangeNotification(zclZoneChangeNotif_t *pCmd)
                             ^
Warning[Pe177]: function "zclSS_ChangeNotification" was declared but never
          referenced

  static void zha_project_DisplayLight( void )
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",930  Warning[Pe177]: 
          function "zha_project_DisplayLight" was declared but never referenced

  static zclLighting_AppCallbacks_t  zclZLLtest_CmdCallbacks =
                                     ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",325  Warning[Pe177]: 
          variable "zclZLLtest_CmdCallbacks" was declared but never referenced

  static zclSS_AppCallbacks_t zclSStest_CmdCallbacks =
                              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",342  Warning[Pe177]: 
          variable "zclSStest_CmdCallbacks" was declared but never referenced
   2281          {
   2282                  zha_project_Alarm_Status=pCmd->zoneStatus;
   2283          }
   2284          
   2285          
   2286          /****************************************************************************
   2287          ****************************************************************************/
   2288          
   2289          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   zha_project_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      0     85   zha_project_HandleKeys
        0     19   -> NLME_GetShortAddr
        0     20   -> NLME_SendNetworkStatus
        0     19   -> ZDP_MgmtPermitJoinReq
        0     19   -> zcl_InvokeEZMode
        0     19   -> zha_project_BasicResetCB
      2      0   zha_project_IdentifyCB
      2      2   zha_project_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0      9   zha_project_Init
        0      9   -> AT_Init
        0      9   -> Device_type_Init
        0      9   -> RegisterForKeys
        0      9   -> SerialApp_Init
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> zclDiagnostic_InitStats
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
        0      9   -> zcl_registerReadWriteCB
      2      0   zha_project_LevelControlMoveToLevelCB
      0     10   zha_project_OnOffCB
        0     10   -> HalLedSet
        0     10   -> zcl_getRawAFMsg
      0    136   zha_project_ProcessInReadRspCmd
        0     63   -> APSME_LookupExtAddr
        0     63   -> SetTempDeviceBAT
        0     63   -> SetTempDeviceHW
        0     63   -> SetTempDeviceManuName
        0     63   -> SetTempDeviceSerial
        0     63   -> SetTempDeviceType
        0     63   -> UpdateDeviceStatus1
        0     63   -> UpdateDeviceStatus2
        0     63   -> UpdateDeviceStatus3
        0     71   -> ZDP_BindUnbindReq
        0     66   -> osal_memcpy
        0     63   -> osal_memset
        0     67   -> osal_nv_read
        0     63   -> osal_set_event
      0    136   zha_project_ProcessInReportCmd
        0     63   -> APSME_LookupExtAddr
        0     63   -> SetTempDeviceBAT
        0     63   -> SetTempDeviceHW
        0     63   -> SetTempDeviceManuName
        0     63   -> SetTempDeviceType
        0     63   -> UpdateDeviceStatus1
        0     63   -> UpdateDeviceStatus2
        0     63   -> UpdateDeviceStatus3
        0     71   -> ZDP_BindUnbindReq
        0     66   -> osal_memcpy
        0     63   -> osal_memset
        0     67   -> osal_nv_read
        0     63   -> osal_set_event
      2     94   zha_project_ProcessZDOMsgs
        0     25   -> HalLedSet
        0     25   -> SetTempDeviceEP
        0     25   -> SetTempDeviceSA
        0     25   -> SetTempDeviceType
        0     25   -> ZDO_ParseDeviceAnnce
        0     25   -> ZDO_ParseEPListRsp
        0     25   -> ZDO_ParseMgmtBindRsp
        0     25   -> ZDO_ParseSimpleDescRsp
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     28   -> osal_memcpy
        0     25   -> osal_memset
        0     25   -> osal_set_event
        0     29   -> osal_start_timerEx
      0     70   zha_project_event_loop
        0     65   -> CheckDeviceStatus
        0     65   -> NLME_PermitJoiningRequest
        0     65   -> Onboard_soft_reset
        0     65   -> SendCommond
        0     66   -> ZDP_NWKAddrOfInterestReq
        0     66   -> ZDP_SimpleDescReq
        0     65   -> osal_mem_free
        0     65   -> osal_memset
        0     65   -> osal_msg_deallocate
        0     65   -> osal_msg_receive
        0     65   -> zcl_ProcessMessageMSG
        0     70   -> zcl_SendRead
        0     65   -> zha_project_HandleKeys
        0     65   -> zha_project_ProcessInReadRspCmd
        0     65   -> zha_project_ProcessInReportCmd
        0     65   -> zha_project_ProcessZDOMsgs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Initializer for sampleLight_TestEp>
      40  ?<Initializer for zha_project_CmdCallbacks>
       1  ?<Initializer for zha_project_NwkState>
       6  ??Subroutine40_0
       7  ??Subroutine41_0
       6  ??Subroutine42_0
       4  ??Subroutine43_0
       4  ??Subroutine44_0
       3  ??Subroutine45_0
       8  ??Subroutine46_0
       4  ??Subroutine47_0
      10  ??Subroutine48_0
       8  ??Subroutine49_0
       6  ??Subroutine50_0
       3  ??Subroutine51_0
       4  ??Subroutine52_0
       9  ??Subroutine53_0
       7  ??Subroutine54_0
       5  ?Subroutine0
       3  ?Subroutine1
       6  ?Subroutine10
      12  ?Subroutine11
      13  ?Subroutine12
      12  ?Subroutine13
       3  ?Subroutine14
       7  ?Subroutine15
      11  ?Subroutine16
      11  ?Subroutine17
       6  ?Subroutine18
       6  ?Subroutine19
      12  ?Subroutine2
       4  ?Subroutine20
      11  ?Subroutine21
      10  ?Subroutine22
       4  ?Subroutine23
      20  ?Subroutine24
       4  ?Subroutine25
      15  ?Subroutine26
       4  ?Subroutine27
      13  ?Subroutine28
       5  ?Subroutine29
       6  ?Subroutine3
       6  ?Subroutine30
      10  ?Subroutine31
      15  ?Subroutine32
       6  ?Subroutine33
       9  ?Subroutine34
       8  ?Subroutine35
       8  ?Subroutine36
       6  ?Subroutine37
      21  ?Subroutine38
      20  ?Subroutine39
      17  ?Subroutine4
       8  ?Subroutine5
       8  ?Subroutine6
       2  ?Subroutine7
      23  ?Subroutine8
      13  ?Subroutine9
       4  __Constant_c8
       9  dstAddr
       5  ep
       1  gPermitDuration
       1  giLightScreenMode
       1  netState
       6  sampleLight_TestEp
       9  simpleDescReqAddr
       1  zha_projectSeqNum
       2  zha_project_ActiveEP
      56  zha_project_BasicResetCB
       6  zha_project_BasicResetCB::?relay
      40  zha_project_CmdCallbacks
       4  zha_project_CurrentLevel32
      12  zha_project_DstAddr
     291  zha_project_HandleKeys
       6  zha_project_HandleKeys::?relay
      23  zha_project_IdentifyCB
       6  zha_project_IdentifyCB::?relay
      33  zha_project_IdentifyQueryRspCB
       6  zha_project_IdentifyQueryRspCB::?relay
     153  zha_project_Init
       6  zha_project_Init::?relay
      16  zha_project_LevelControlMoveToLevelCB
       6  zha_project_LevelControlMoveToLevelCB::?relay
       1  zha_project_LevelLastLevel
       1  zha_project_NewLevel
       1  zha_project_NewLevelUp
       1  zha_project_NwkState
      75  zha_project_OnOffCB
       6  zha_project_OnOffCB::?relay
     803  zha_project_ProcessInReadRspCmd
       6  zha_project_ProcessInReadRspCmd::?relay
     770  zha_project_ProcessInReportCmd
       6  zha_project_ProcessInReportCmd::?relay
     578  zha_project_ProcessZDOMsgs
       6  zha_project_ProcessZDOMsgs::?relay
       4  zha_project_Rate32
       1  zha_project_TaskID
       1  zha_project_WithOnOff
       6  zha_project_epDesc
     704  zha_project_event_loop
       6  zha_project_event_loop::?relay

 
 3 974 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    47 bytes in segment XDATA_I
    47 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
    60 bytes in segment XDATA_Z
 
 4 087 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
   107 bytes of XDATA memory

Errors: none
Warnings: 88
