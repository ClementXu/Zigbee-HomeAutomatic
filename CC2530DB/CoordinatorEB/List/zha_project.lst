###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                07/Sep/2016  21:43:58
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=10000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HOLD_AUTO_START -D xBUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -D ZCL_WD -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zha_project.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\zha_project.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
      1          /**************************************************************************************************
      2            Filename:       zha_project.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "nwk_util.h"
     75          
     76          #include "ZDObject.h"
     77          #include "ZDProfile.h"
     78          #include "zcl.h"
     79          #include "zcl_general.h"
     80          #include "zcl_ha.h"
     81          #include "zcl_ss.h"
     82          #include "zcl_ms.h"
     83          #include "zcl_ezmode.h"
     84          #include "zcl_diagnostic.h"
     85          #include "zcl_lighting.h"
     86          #include "zha_project.h"
     87          #include "SerialApp.h"
     88          #include "at_command.h"   
     89          #include "onboard.h"
     90          
     91          /* HAL */
     92          #include "hal_lcd.h"
     93          #include "hal_led.h"
     94          #include "hal_key.h"
     95          
     96          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     97                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     98          #include "zgp_translationtable.h"
     99            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
    100              #define ZGP_AUTO_TT
    101            #endif
    102          #endif
    103          
    104          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    105          #include "math.h"
    106          #include "hal_timer.h"
    107          #endif
    108          
    109          #include "NLMEDE.h"
    110          
    111          /*********************************************************************
    112           * MACROS
    113           */
    114          
    115          /*********************************************************************
    116           * CONSTANTS
    117           */
    118          #if (defined HAL_BOARD_ZLIGHT)
    119          #define LEVEL_MAX                 0xFE
    120          #define LEVEL_MIN                 0x0
    121          #define GAMMA_VALUE               2
    122          #define PWM_FULL_DUTY_CYCLE       1000
    123          #elif (defined HAL_PWM)
    124          #define LEVEL_MAX                 0xFE
    125          #define LEVEL_MIN                 0x0
    126          #define GAMMA_VALUE               2
    127          #define PWM_FULL_DUTY_CYCLE       100
    128          #endif
    129          
    130          /*********************************************************************
    131           * TYPEDEFS
    132           */
    133          
    134          /*********************************************************************
    135           * GLOBAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          byte zha_project_TaskID;
   \                     zha_project_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 zha_projectSeqNum;
   \                     zha_projectSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          ZDO_ActiveEndpointRsp_t   *zha_project_ActiveEP;
   \                     zha_project_ActiveEP:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          endPointDesc_t zha_project_epDesc;
   \                     zha_project_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    141          afAddrType_t zha_project_DstAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          static zAddrType_t simpleDescReqAddr;
   \                     simpleDescReqAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 ep[5];
   \                     ep:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 netState = 0;
   \                     netState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          zAddrType_t dstAddr;
   \                     dstAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    146          
    147          #if ZG_BUILD_ENDDEVICE_TYPE
    148          endPointDesc_t zclZHAtest_epDesc;
    149          endPointDesc_t zclZHAtest_epDesc1;
    150          endPointDesc_t zclZHAtest_epDesc2;
    151          endPointDesc_t zclZHAtest_epDesc3;
    152          endPointDesc_t zclZHAtest_epDesc4;
    153          endPointDesc_t zclZHAtest_epDesc5;
    154          endPointDesc_t zclZHAtest_epDesc6;
    155          endPointDesc_t zclZHAtest_epDesc7;
    156          endPointDesc_t zclZHAtest_epDesc8;
    157          endPointDesc_t zclZHAtest_epDesc9;
    158          endPointDesc_t zclZHAtest_epDesc10;
    159          endPointDesc_t zclZHAtest_epDesc11;
    160          endPointDesc_t zclZHAtest_epDesc12;
    161          endPointDesc_t zclZHAtest_epDesc14;
    162          #endif
    163          /*********************************************************************
    164           * GLOBAL FUNCTIONS
    165           */
    166          
    167          /*********************************************************************
    168           * LOCAL VARIABLES
    169           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          afAddrType_t zha_project_DstAddr;
   \                     zha_project_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    171          
    172          #ifdef ZCL_EZMODE
    173          static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    174          static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    175          
    176          
    177          // register EZ-Mode with task information (timeout events, callback, etc...)
    178          //static const zclEZMode_RegisterData_t zha_project_RegisterEZModeData =
    179          //{
    180          //  &zha_project_TaskID,
    181          //  SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    182          //  SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    183          //  &zha_projectSeqNum,
    184          //  zha_project_EZModeCB
    185          //};
    186          
    187          #else
    188          uint16 bindingInClusters[] =
    189          {
    190            ZCL_CLUSTER_ID_GEN_ON_OFF
    191          #ifdef ZCL_LEVEL_CTRL
    192            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    193          #endif
    194          };
    195          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    196          
    197          #endif  // ZCL_EZMODE
    198          
    199          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    200          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    201          {
    202            SAMPLELIGHT_ENDPOINT,
    203            &zha_project_TaskID,
    204            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    205            (afNetworkLatencyReq_t)0            // No Network Latency req
    206          };
    207          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    209          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    211          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    212          devStates_t zha_project_NwkState = DEV_INIT;
   \                     zha_project_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zha_project_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    213          
    214          #if ZCL_LEVEL_CTRL

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          uint8 zha_project_WithOnOff;       // set to TRUE if state machine should set light on/off
   \                     zha_project_WithOnOff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          uint8 zha_project_NewLevel;        // new level when done moving
   \                     zha_project_NewLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          bool  zha_project_NewLevelUp;      // is direction to new level up or down?
   \                     zha_project_NewLevelUp:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          int32 zha_project_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
   \                     zha_project_CurrentLevel32:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          int32 zha_project_Rate32;          // rate in units, fixed point (e.g. 16.123)
   \                     zha_project_Rate32:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          uint8 zha_project_LevelLastLevel;  // to save the Current Level before the light was turned OFF
   \                     zha_project_LevelLastLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    221          #endif
    222          
    223          /*********************************************************************
    224           * LOCAL FUNCTIONS
    225           */
    226          
    227          
    228          
    229          static void zha_project_HandleKeys( byte shift, byte keys );
    230          static void zha_project_BasicResetCB( void );
    231          static void zha_project_IdentifyCB( zclIdentify_t *pCmd );
    232          static void zha_project_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    233          static void zha_project_OnOffCB( uint8 cmd );
    234          static ZStatus_t zclZLL_ColorControl_MoveToColorTemperature(zclCCMoveToColorTemperature_t *pCmd);
    235          static void zclSS_ChangeNotification(zclZoneChangeNotif_t *pCmd);
    236          
    237          
    238          
    239          
    240          #ifdef ZCL_LEVEL_CTRL
    241          static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    242          //static void zha_project_LevelControlMoveCB( zclLCMove_t *pCmd );
    243          //static void zha_project_LevelControlStepCB( zclLCStep_t *pCmd );
    244          //static void zha_project_LevelControlStopCB( void );
    245          //static void zha_project_DefaultMove( void );
    246          //static uint32 zha_project_TimeRateHelper( uint8 newLevel );
    247          //static uint16 zha_project_GetTime ( uint8 level, uint16 time );
    248          //static void zha_project_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    249          //static void zha_project_MoveBasedOnTime( uint8 newLevel, uint16 time );
    250          //static void zha_project_AdjustLightLevel( void );
    251          #endif
    252          
    253          // app display functions
    254          static void zha_project_DisplayLight( void );
    255          
    256          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    257          void zha_project_UpdateLampLevel( uint8 level );
    258          #endif
    259          
    260          // Functions to process ZCL Foundation incoming Command/Response messages
    261          static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    262          #ifdef ZCL_READ
    263          static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    264          #endif
    265          #ifdef ZCL_WRITE
    266          static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    267          #endif
    268          #ifdef ZCL_REPORT
    269          static uint8 zha_project_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    270          #endif
    271          static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    272          #ifdef ZCL_DISCOVER
    273          static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    274          static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    275          static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    276          #endif
    277          
    278          /*********************************************************************
    279           * STATUS STRINGS
    280           */
    281          
    282          
    283          /*********************************************************************
    284           * ZCL General Profile Callback table
    285           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    286          static zclGeneral_AppCallbacks_t zha_project_CmdCallbacks =
   \                     zha_project_CmdCallbacks:
   \   000000                DS 40
   \   000028                REQUIRE `?<Initializer for zha_project_CmdCallbacks>`
   \   000028                REQUIRE __INIT_XDATA_I
    287          {
    288            zha_project_BasicResetCB,            // Basic Cluster Reset command
    289            zha_project_IdentifyCB,              // Identify command
    290          #ifdef ZCL_EZMODE
    291            NULL,                                   // Identify EZ-Mode Invoke command
    292            NULL,                                   // Identify Update Commission State command
    293          #endif
    294            NULL,                                   // Identify Trigger Effect command
    295            zha_project_IdentifyQueryRspCB,      // Identify Query Response command
    296            zha_project_OnOffCB,                 // On/Off cluster commands
    297            NULL,                                   // On/Off cluster enhanced command Off with Effect
    298            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    299            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    300          #ifdef ZCL_LEVEL_CTRL
    301            zha_project_LevelControlMoveToLevelCB, // Level Control Move to Level command
    302            NULL,        // Level Control Move command
    303            NULL,        // Level Control Step command
    304            NULL,        // Level Control Stop command
    305          #endif
    306          #ifdef ZCL_GROUPS
    307            NULL,                                   // Group Response commands
    308          #endif
    309          #ifdef ZCL_SCENES
    310            NULL,                                  // Scene Store Request command
    311            NULL,                                  // Scene Recall Request command
    312            NULL,                                  // Scene Response command
    313          #endif
    314          #ifdef ZCL_ALARMS
    315            NULL,                                  // Alarm (Response) commands
    316          #endif
    317          #ifdef SE_UK_EXT
    318            NULL,                                  // Get Event Log command
    319            NULL,                                  // Publish Event Log command
    320          #endif
    321            NULL,                                  // RSSI Location command
    322            NULL                                   // RSSI Location Response command
    323          };
    324          
    325          static zclLighting_AppCallbacks_t  zclZLLtest_CmdCallbacks =
    326          {
    327              NULL,
    328              NULL,
    329              NULL,
    330              NULL,
    331              NULL,
    332              NULL,
    333              NULL,
    334              NULL,
    335              NULL,
    336              NULL,
    337              zclZLL_ColorControl_MoveToColorTemperature,
    338          
    339          
    340          };
    341          
    342          static zclSS_AppCallbacks_t zclSStest_CmdCallbacks =
    343          {
    344              //zclSS_ChangeNotification,
    345              NULL,
    346              NULL,
    347              NULL,
    348              NULL,
    349              NULL,
    350              NULL,
    351              NULL,
    352              NULL,
    353              NULL,
    354              NULL,
    355              //zclSS_WD_StartWarning,
    356              //zclSS_WD_Squawk,
    357            
    358            
    359            
    360            
    361          };
    362          
    363          /*********************************************************************
    364           * @fn          zha_project_Init
    365           *
    366           * @brief       Initialization function for the zclGeneral layer.
    367           *
    368           * @param       none
    369           *
    370           * @return      none
    371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    372          void zha_project_Init( byte task_id )
   \                     zha_project_Init:
    373          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    374            uint8 devicetype;
    375            zha_project_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zha_project_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    376          
    377            // Set destination address to indirect
    378            zha_project_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zha_project_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    379            zha_project_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    380            zha_project_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zha_project_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    381          
    382            // This app is part of the Home Automation Profile
    383          #if ZG_BUILD_COORDINATOR_TYPE  
    384            zclHA_Init( &zha_project_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zha_project_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zha_project_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    385          #endif
    386            SerialApp_Init();
   \   00001F                ; Setup parameters for call to function SerialApp_Init
   \   00001F   12....       LCALL   `??SerialApp_Init::?relay`; Banked call to: SerialApp_Init
    387            AT_Init();
   \   000022                ; Setup parameters for call to function AT_Init
   \   000022   12....       LCALL   `??AT_Init::?relay`  ; Banked call to: AT_Init
    388            //osal_nv_item_init( ZCD_NV_DEVICE_TABLE,(uint16)(sizeof(NODE_INFO_t) * 6 ), NULL );
    389            Device_type_Init();
                   ^
Warning[Pe223]: function "Device_type_Init" declared implicitly

    uint8 devicetype;
          ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",374  Warning[Pe177]: 
          variable "devicetype" was declared but never referenced
   \   000025                ; Setup parameters for call to function Device_type_Init
   \   000025   12....       LCALL   `??Device_type_Init::?relay`; Banked call to: Device_type_Init
    390          #if ZG_BUILD_ENDDEVICE_TYPE
    391              osal_nv_read(ZCD_NV_DEVICE_TYPE,0, sizeof(uint8), &devicetype);
    392              ZDO_StartDevice(ZG_DEVICETYPE_ENDDEVICE,MODE_JOIN,15, 15);
    393              switch(devicetype)
    394              {
    395                  case light:
    396                      zclZHAtest_epDesc1.endPoint = 1;
    397                      zclZHAtest_epDesc1.task_id = &zha_project_TaskID;
    398                      zclZHAtest_epDesc1.simpleDesc
    399                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc1;
    400                      zclZHAtest_epDesc1.latencyReq = noLatencyReqs;
    401                      zclHA_Init(&zclZHAtest_SimpleDesc1);
    402                      afRegister( &zclZHAtest_epDesc1 );      
    403                    
    404                   break;
    405                  case level:
    406                       zclZHAtest_epDesc2.endPoint = 1;
    407                  zclZHAtest_epDesc2.task_id = &zha_project_TaskID;
    408                  zclZHAtest_epDesc2.simpleDesc
    409                          = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc2;
    410                  zclZHAtest_epDesc2.latencyReq = noLatencyReqs;    
    411                  zclHA_Init(&zclZHAtest_SimpleDesc2);
    412                  afRegister( &zclZHAtest_epDesc2 );
    413                  break;
    414           
    415                  case colortem:
    416                      zclZHAtest_epDesc3.endPoint = 1;
    417                      zclZHAtest_epDesc3.task_id = &zha_project_TaskID;
    418                      zclZHAtest_epDesc3.simpleDesc
    419                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc3;
    420                      zclZHAtest_epDesc3.latencyReq = noLatencyReqs;
    421                      zclHA_Init(&zclZHAtest_SimpleDesc3);
    422                      afRegister( &zclZHAtest_epDesc3 );
    423                    break;
    424                  case temp:
    425                      zclZHAtest_epDesc4.endPoint = 1;
    426                      zclZHAtest_epDesc4.task_id = &zha_project_TaskID;
    427                      zclZHAtest_epDesc4.simpleDesc
    428                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc4;
    429                      zclZHAtest_epDesc4.latencyReq = noLatencyReqs;
    430                      zclHA_Init(&zclZHAtest_SimpleDesc4);
    431                      afRegister( &zclZHAtest_epDesc4 );      
    432                    break;
    433                  case pir:
    434                      zclZHAtest_epDesc5.endPoint = 1;
    435                      zclZHAtest_epDesc5.task_id = &zha_project_TaskID;
    436                      zclZHAtest_epDesc5.simpleDesc
    437                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc5;
    438                      zclZHAtest_epDesc5.latencyReq = noLatencyReqs;
    439                      zclHA_Init(&zclZHAtest_SimpleDesc5);
    440                      afRegister( &zclZHAtest_epDesc5 );     
    441                      zha_project_Smoke_Type = 0x000d;
    442                    
    443                   break; 
    444                  case humility:
    445                      zclZHAtest_epDesc6.endPoint = 1;
    446                      zclZHAtest_epDesc6.task_id = &zha_project_TaskID;
    447                      zclZHAtest_epDesc6.simpleDesc
    448                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc6;
    449                      zclZHAtest_epDesc6.latencyReq = noLatencyReqs;
    450                      zclHA_Init(&zclZHAtest_SimpleDesc6);
    451                      afRegister( &zclZHAtest_epDesc6 );      
    452                    break;
    453                  case doorsen:
    454                      zclZHAtest_epDesc7.endPoint = 1;
    455                      zclZHAtest_epDesc7.task_id = &zha_project_TaskID;
    456                      zclZHAtest_epDesc7.simpleDesc
    457                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc7;
    458                      zclZHAtest_epDesc7.latencyReq = noLatencyReqs;
    459                      zclHA_Init(&zclZHAtest_SimpleDesc7);
    460                      afRegister( &zclZHAtest_epDesc7 );  
    461                      zha_project_Smoke_Type = 0x0015;
    462                    break;
    463                  case lumin:
    464                      zclZHAtest_epDesc8.endPoint = 1;
    465                      zclZHAtest_epDesc8.task_id = &zha_project_TaskID;
    466                      zclZHAtest_epDesc8.simpleDesc
    467                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc8;
    468                      zclZHAtest_epDesc8.latencyReq = noLatencyReqs;
    469                      zclHA_Init(&zclZHAtest_SimpleDesc8);
    470                      afRegister( &zclZHAtest_epDesc8 ); 
    471                  break;
    472                  case slsensor:
    473                      zclZHAtest_epDesc9.endPoint = 1;
    474                      zclZHAtest_epDesc9.task_id = &zha_project_TaskID;
    475                      zclZHAtest_epDesc9.simpleDesc
    476                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc9;
    477                      zclZHAtest_epDesc9.latencyReq = noLatencyReqs; 
    478                      zclHA_Init(&zclZHAtest_SimpleDesc9);
    479                      afRegister( &zclZHAtest_epDesc9 );
    480                      zha_project_Smoke_Type = 0x0225;      
    481                    break;
    482                  case smoke:
    483                      zclZHAtest_epDesc10.endPoint = 1;
    484                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    485                      zclZHAtest_epDesc10.simpleDesc
    486                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    487                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    488                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    489                      afRegister( &zclZHAtest_epDesc10 );          
    490                      zha_project_Smoke_Type = 0x0028;
    491                    break;
    492                  case watersen:
    493                      zclZHAtest_epDesc11.endPoint = 1;
    494                      zclZHAtest_epDesc11.task_id = &zha_project_TaskID;
    495                      zclZHAtest_epDesc11.simpleDesc
    496                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc11;
    497                      zclZHAtest_epDesc11.latencyReq = noLatencyReqs; 
    498                      zclHA_Init(&zclZHAtest_SimpleDesc11);
    499                      afRegister( &zclZHAtest_epDesc11 );
    500                      zha_project_Smoke_Type = 0x002a;
    501                    break;  
    502                  case cosensor:
    503                      zclZHAtest_epDesc10.endPoint = 1;
    504                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    505                      zclZHAtest_epDesc10.simpleDesc
    506                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    507                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    508                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    509                      afRegister( &zclZHAtest_epDesc10 );          
    510                      zha_project_Smoke_Type = 0x0227;
    511                      break; 
    512                  case gassensor:
    513                      zclZHAtest_epDesc10.endPoint = 1;
    514                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    515                      zclZHAtest_epDesc10.simpleDesc
    516                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    517                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    518                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    519                      afRegister( &zclZHAtest_epDesc10 );          
    520                      zha_project_Smoke_Type = 0x002B;
    521                      break;
    522                  case glasssen:
    523                      zclZHAtest_epDesc10.endPoint = 1;
    524                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    525                      zclZHAtest_epDesc10.simpleDesc
    526                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    527                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    528                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    529                      afRegister( &zclZHAtest_epDesc10 );          
    530                      zha_project_Smoke_Type = 0x0226;
    531                      break;
    532                  case zonectrl:
    533                      zclZHAtest_epDesc10.endPoint = 1;
    534                      zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
    535                      zclZHAtest_epDesc10.simpleDesc
    536                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
    537                      zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
    538                      zclHA_Init(&zclZHAtest_SimpleDesc10); 
    539                      afRegister( &zclZHAtest_epDesc10 );          
    540                      zha_project_Smoke_Type = 0x0115;
    541                      break;
    542                  case lightswitch:
    543                      zclZHAtest_epDesc12.endPoint = 1;
    544                      zclZHAtest_epDesc12.task_id = &zha_project_TaskID;
    545                      zclZHAtest_epDesc12.simpleDesc
    546                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc12;
    547                      zclZHAtest_epDesc12.latencyReq = noLatencyReqs;    
    548                      zclHA_Init(&zclZHAtest_SimpleDesc12); 
    549                      afRegister( &zclZHAtest_epDesc12 );        
    550                      break;
    551                  case outlet:
    552                      zclZHAtest_epDesc14.endPoint = 1;
    553                      zclZHAtest_epDesc14.task_id = &zha_project_TaskID;
    554                      zclZHAtest_epDesc14.simpleDesc
    555                              = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc14;
    556                      zclZHAtest_epDesc14.latencyReq = noLatencyReqs;    
    557                      zclHA_Init(&zclZHAtest_SimpleDesc14); 
    558                      afRegister( &zclZHAtest_epDesc14 ); 
    559                      break;
    560                
    561                      
    562                  default:
    563                   break;    
    564              
    565              }
    566          #endif 
    567              // Register the ZCL General Cluster Library callback functions
    568            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zha_project_CmdCallbacks );
   \   000028                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000028   7A..         MOV     R2,#zha_project_CmdCallbacks & 0xff
   \   00002A   7B..         MOV     R3,#(zha_project_CmdCallbacks >> 8) & 0xff
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    569          
    570            // Register the application's attribute list
    571            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zha_project_NumAttributes, zha_project_Attrs );
   \   000031                ; Setup parameters for call to function zcl_registerAttrList
   \   000031   7C..         MOV     R4,#zha_project_Attrs & 0xff
   \   000033   7D..         MOV     R5,#(zha_project_Attrs >> 8) & 0xff
   \   000035   90....       MOV     DPTR,#zha_project_NumAttributes
   \   000038   E4           CLR     A
   \   000039   93           MOVC    A,@A+DPTR
   \   00003A   FA           MOV     R2,A
   \   00003B   7901         MOV     R1,#0x1
   \   00003D   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    572          
    573            // Register the Application to receive the unprocessed Foundation command/response messages
    574            zcl_registerForMsg( zha_project_TaskID );
   \   000040                ; Setup parameters for call to function zcl_registerForMsg
   \   000040   90....       MOV     DPTR,#zha_project_TaskID
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    575          
    576          #ifdef ZCL_DISCOVER
    577            // Register the application's command list
    578            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zha_project_Cmds );
    579          #endif
    580          
    581            // Register for all key events - This app will handle all key events
    582            RegisterForKeys( zha_project_TaskID );
   \   000048                ; Setup parameters for call to function RegisterForKeys
   \   000048   90....       MOV     DPTR,#zha_project_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    583          
    584            // Register for a test endpoint
    585            afRegister( &sampleLight_TestEp );
   \   000050                ; Setup parameters for call to function afRegister
   \   000050   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   000052   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   000054   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    586          
    587          #ifdef ZCL_EZMODE
    588            // Register EZ-Mode
    589            //zcl_RegisterEZMode( &zha_project_RegisterEZModeData );
    590          
    591            // Register with the ZDO to receive Match Descriptor Responses
    592              ZDO_RegisterForZDOMsg( task_id, End_Device_Bind_rsp );
   \   000057                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000057   7A20         MOV     R2,#0x20
   \   000059   7B80         MOV     R3,#-0x80
   \   00005B   EE           MOV     A,R6
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    593              ZDO_RegisterForZDOMsg( task_id, Match_Desc_rsp );
   \   000060                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000060   7A06         MOV     R2,#0x6
   \   000062   7B80         MOV     R3,#-0x80
   \   000064   EE           MOV     A,R6
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    594              ZDO_RegisterForZDOMsg( task_id, Active_EP_rsp );
   \   000069                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000069   7A05         MOV     R2,#0x5
   \   00006B   7B80         MOV     R3,#-0x80
   \   00006D   EE           MOV     A,R6
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    595              ZDO_RegisterForZDOMsg( task_id, Simple_Desc_rsp );
   \   000072                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000072   7A04         MOV     R2,#0x4
   \   000074   7B80         MOV     R3,#-0x80
   \   000076   EE           MOV     A,R6
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    596              ZDO_RegisterForZDOMsg( task_id, Device_annce );
   \   00007B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00007B   7A13         MOV     R2,#0x13
   \   00007D   7B00         MOV     R3,#0x0
   \   00007F   EE           MOV     A,R6
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    597          #endif
    598          
    599          
    600          #ifdef ZCL_DIAGNOSTIC
    601            // Register the application's callback function to read/write attribute data.
    602            // This is only required when the attribute data format is unknown to ZCL.
    603            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   000084                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   000084   7C00         MOV     R4,#0x0
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7A..         MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
   \   00008A   7B..         MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   00008C   7901         MOV     R1,#0x1
   \   00008E   12....       LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    604          
    605            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   000091                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   000091   12....       LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
    606            {
    607              // Here the user could start the timer to save Diagnostics to NV
    608            }
    609          #endif
    610          
    611          #ifdef LCD_SUPPORTED
    612            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    613          #endif  // LCD_SUPPORTED
    614          
    615            //osal_start_reload_timer(task_id,DEVICE_STATUS_EVT,8000);
    616          #if ZG_BUILD_ENDDEVICE_TYPE
    617            osal_start_reload_timer(task_id,SEND_REPORT_EVT,5000);
    618          #endif
    619            
    620          #ifdef ZGP_AUTO_TT
    621            zgpTranslationTable_RegisterEP ( &zha_project_SimpleDesc );
    622          #endif
    623          }
   \   000094   7F01         MOV     R7,#0x1
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA
    624          
    625          /*********************************************************************
    626           * @fn          zclSample_event_loop
    627           *
    628           * @brief       Event Loop Processor for zclGeneral.
    629           *
    630           * @param       none
    631           *
    632           * @return      none
    633           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          uint16 zha_project_event_loop( uint8 task_id, uint16 events )
   \                     zha_project_event_loop:
    635          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 53
   \   000005   74CB         MOV     A,#-0x35
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    636            afIncomingMSGPacket_t *MSGpkt;
    637          
    638            (void)task_id;  // Intentionally unreferenced parameter
    639          
    640              if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   6003         JZ      $+5
   \   000012   02....       LJMP    ??zha_project_event_loop_0 & 0xFFFF
    641              {
    642                  while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zha_project_TaskID )) )
    643                  {
    644                      switch ( MSGpkt->hdr.event )
    645                      {
    646                          #ifdef ZCL_EZMODE
    647                          case ZDO_CB_MSG:
    648                              zha_project_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    649                              break;
    650                          #endif
    651                          case ZCL_INCOMING_MSG:
    652                          // Incoming ZCL Foundation command/response messages
    653                              zha_project_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    654                              break;
    655          
    656                          case KEY_CHANGE:
    657                              zha_project_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    658                              break;
    659                          case AF_INCOMING_MSG_CMD:
    660                              zcl_ProcessMessageMSG(MSGpkt);
    661          
    662                              //ZHAtest_MessageMSGCB( MSGpkt );
    663                              break;    
    664                          
    665          
    666                          case ZDO_STATE_CHANGE:
    667                              zha_project_NwkState = (devStates_t)(MSGpkt->hdr.status);
    668                   
    669                              if(zha_project_NwkState == DEV_ZB_COORD)
    670                              {
    671                                  netState = 1;
    672                                  NLME_PermitJoiningRequest(0);
    673                              }
    674                          break;
    675          
    676                          default:
    677                              break;
    678                      }
    679          
    680                    // Release the memory
    681                    osal_msg_deallocate( (uint8 *)MSGpkt );
    682                  }
    683                  return (events ^ SYS_EVENT_MSG);
    684              }
    685              if ( events & ZHA_ATTRIBUTE_REQ_EVT )
   \   000015   EE           MOV     A,R6
   \   000016   5404         ANL     A,#0x4
   \   000018   6078         JZ      ??zha_project_event_loop_1
    686              {
    687                  uint8 i=0;
                               ^
Warning[Pe177]: variable "i" was declared but never referenced
    688                  afAddrType_t  dscReqAddr;
    689                  dscReqAddr.addrMode=afAddr16Bit;
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine4 & 0xFFFF
    690                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    691                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_0:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
    692                  zclReadCmd_t BasicAttrsList;
    693                  BasicAttrsList.numAttr = 5;
   \   000028   740C         MOV     A,#0xc
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7405         MOV     A,#0x5
   \   00002F   F0           MOVX    @DPTR,A
    694                  BasicAttrsList.attrID[0] = ATTRID_BASIC_ZCL_VERSION;
   \   000030   740D         MOV     A,#0xd
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
    695                  BasicAttrsList.attrID[1] = ATTRID_BASIC_HW_VERSION;
   \   000039   740F         MOV     A,#0xf
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7403         MOV     A,#0x3
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
    696                  BasicAttrsList.attrID[2] = ATTRID_BASIC_MODEL_ID;
   \   000044   7411         MOV     A,#0x11
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7405         MOV     A,#0x5
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
    697                  BasicAttrsList.attrID[3] = ATTRID_BASIC_MANUFACTURER_NAME;
   \   00004F   7413         MOV     A,#0x13
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7404         MOV     A,#0x4
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
    698                  //BasicAttrsList.attrID[5] = ATTRID_BASIC_DATE_CODE;
    699                  BasicAttrsList.attrID[4] = ATTRID_BASIC_POWER_SOURCE;
   \   00005A   7415         MOV     A,#0x15
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   7407         MOV     A,#0x7
   \   000061   12....       LCALL   ?Subroutine5 & 0xFFFF
    700                  zcl_SendRead( 1, &dscReqAddr,ZCL_CLUSTER_ID_GEN_BASIC, &BasicAttrsList,
    701                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
    702                  
    703                  //return ( events ^ ZHA_ATTRIBUTE_REQ_EVT );
    704              }  
   \                     ??CrossCallReturnLabel_3:
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000067   78..         MOV     R0,#?V0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   740F         MOV     A,#0xf
   \   000073   12....       LCALL   ?XSTACK_DISP100_8
   \   000076   88..         MOV     ?V0,R0
   \   000078   89..         MOV     ?V1,R1
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   7C00         MOV     R4,#0x0
   \   000081   7D00         MOV     R5,#0x0
   \   000083   7405         MOV     A,#0x5
   \   000085   12....       LCALL   ?XSTACK_DISP101_8
   \   000088   7901         MOV     R1,#0x1
   \   00008A   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   00008D   7405         MOV     A,#0x5
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    705            
    706              if(events & ZHA_ATTRIBUTE_POWER_EVT)
   \                     ??zha_project_event_loop_1:
   \   000092   EE           MOV     A,R6
   \   000093   5480         ANL     A,#0x80
   \   000095   6059         JZ      ??zha_project_event_loop_2
    707              {
    708                  afAddrType_t  dscReqAddr;
    709                  dscReqAddr.addrMode=afAddr16Bit;
   \   000097   7408         MOV     A,#0x8
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   12....       LCALL   ?Subroutine4 & 0xFFFF
    710                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    711                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_1:
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   7401         MOV     A,#0x1
   \   0000A4   F0           MOVX    @DPTR,A
    712                  zclReadCmd_t BasicAttrsList;
    713                  BasicAttrsList.numAttr = 2;
   \   0000A5   740C         MOV     A,#0xc
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   F0           MOVX    @DPTR,A
    714                  BasicAttrsList.attrID[0] = ATTRID_POWER_CFG_BATTERY_VOLTAGE;
   \   0000AD   740D         MOV     A,#0xd
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   7420         MOV     A,#0x20
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E4           CLR     A
   \   0000B7   F0           MOVX    @DPTR,A
    715                  BasicAttrsList.attrID[1] = 0x0021;
   \   0000B8   740F         MOV     A,#0xf
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   7421         MOV     A,#0x21
   \   0000BF   12....       LCALL   ?Subroutine5 & 0xFFFF
    716                  zcl_SendRead( 1, &dscReqAddr,
    717                              ZCL_CLUSTER_ID_GEN_POWER_CFG, &BasicAttrsList,
    718                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
    719                  //return ( events ^ ZHA_ATTRIBUTE_POWER_EVT );    
    720              }
   \                     ??CrossCallReturnLabel_4:
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C5   78..         MOV     R0,#?V0
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   78..         MOV     R0,#?V0
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CF   740F         MOV     A,#0xf
   \   0000D1   12....       LCALL   ?XSTACK_DISP100_8
   \   0000D4   88..         MOV     ?V0,R0
   \   0000D6   89..         MOV     ?V1,R1
   \   0000D8   78..         MOV     R0,#?V0
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DD   7C01         MOV     R4,#0x1
   \   0000DF   7D00         MOV     R5,#0x0
   \   0000E1   7405         MOV     A,#0x5
   \   0000E3   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E6   7901         MOV     R1,#0x1
   \   0000E8   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   0000EB   7405         MOV     A,#0x5
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
    721              if ( events & ZONE_TYPE_EVT )
   \                     ??zha_project_event_loop_2:
   \   0000F0   EE           MOV     A,R6
   \   0000F1   5420         ANL     A,#0x20
   \   0000F3   604D         JZ      ??zha_project_event_loop_3
    722              {
    723                  afAddrType_t  dscReqAddr;
    724                  dscReqAddr.addrMode=afAddr16Bit;
   \   0000F5   7408         MOV     A,#0x8
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL   ?Subroutine4 & 0xFFFF
    725                  dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
    726                  dscReqAddr.endPoint=1;
   \                     ??CrossCallReturnLabel_2:
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   7401         MOV     A,#0x1
   \   000102   F0           MOVX    @DPTR,A
    727                  zclReadCmd_t BasicAttrsList;
    728                  BasicAttrsList.numAttr = 1;
   \   000103   740C         MOV     A,#0xc
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   7401         MOV     A,#0x1
   \   00010A   F0           MOVX    @DPTR,A
    729                  BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
   \   00010B   740D         MOV     A,#0xd
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   7401         MOV     A,#0x1
   \   000112   12....       LCALL   ?Subroutine5 & 0xFFFF
    730                  zcl_SendRead( 1, &dscReqAddr,
    731                              ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
    732                              ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
    733                  //return ( events ^ ZONE_TYPE_EVT );
    734              } 
   \                     ??CrossCallReturnLabel_5:
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000118   78..         MOV     R0,#?V0
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011D   78..         MOV     R0,#?V0
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000122   740F         MOV     A,#0xf
   \   000124   12....       LCALL   ?XSTACK_DISP100_8
   \   000127   88..         MOV     ?V0,R0
   \   000129   89..         MOV     ?V1,R1
   \   00012B   78..         MOV     R0,#?V0
   \   00012D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000130   7C00         MOV     R4,#0x0
   \   000132   7D05         MOV     R5,#0x5
   \   000134   ED           MOV     A,R5
   \   000135   12....       LCALL   ?XSTACK_DISP101_8
   \   000138   7901         MOV     R1,#0x1
   \   00013A   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   00013D   7405         MOV     A,#0x5
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
    735              if ( events & ZHA_ACTIVE_EP_EVT )
   \                     ??zha_project_event_loop_3:
   \   000142   EE           MOV     A,R6
   \   000143   5408         ANL     A,#0x8
   \   000145   6015         JZ      ??zha_project_event_loop_4
    736              {
    737                  ZDP_ActiveEPReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr, 0);
   \   000147                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000147   75..00       MOV     ?V0,#0x0
   \   00014A   78..         MOV     R0,#?V0
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014F   7905         MOV     R1,#0x5
   \   000151   12....       LCALL   ?Subroutine14 & 0xFFFF
    738                  //return ( events ^ ZHA_ACTIVE_EP_EVT );
    739              }  
   \                     ??CrossCallReturnLabel_34:
   \   000154   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000157   7401         MOV     A,#0x1
   \   000159   12....       LCALL   ?DEALLOC_XSTACK8
    740            
    741            // event to get simple descriptor of the newly joined device
    742              if ( events & SIMPLE_DESC_QUERY_EVT )
   \                     ??zha_project_event_loop_4:
   \   00015C   EE           MOV     A,R6
   \   00015D   5410         ANL     A,#0x10
   \   00015F   7003         JNZ     $+5
   \   000161   02....       LJMP    ??zha_project_event_loop_5 & 0xFFFF
    743              {
    744                  uint8 i;
    745                  for(i=0;i<=zha_project_ActiveEP->cnt;i++)
   \   000164   75..00       MOV     ?V0,#0x0
   \   000167   02....       LJMP    ??zha_project_event_loop_6 & 0xFFFF
   \                     ??zha_project_event_loop_7:
   \   00016A   A3           INC     DPTR
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   90....       MOV     DPTR,#zha_project_NwkState
   \   00016F   F0           MOVX    @DPTR,A
   \   000170   6409         XRL     A,#0x9
   \   000172   700B         JNZ     ??zha_project_event_loop_8
   \   000174   90....       MOV     DPTR,#netState
   \   000177   7401         MOV     A,#0x1
   \   000179   F0           MOVX    @DPTR,A
   \   00017A                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00017A   7900         MOV     R1,#0x0
   \   00017C   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \                     ??zha_project_event_loop_8:
   \   00017F                ; Setup parameters for call to function osal_msg_deallocate
   \   00017F   AA..         MOV     R2,?V0
   \   000181   AB..         MOV     R3,?V1
   \   000183   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zha_project_event_loop_0:
   \   000186                ; Setup parameters for call to function osal_msg_receive
   \   000186   90....       MOV     DPTR,#zha_project_TaskID
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F9           MOV     R1,A
   \   00018B   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00018E   8A..         MOV     ?V0,R2
   \   000190   8B..         MOV     ?V1,R3
   \   000192   EA           MOV     A,R2
   \   000193   45..         ORL     A,?V1
   \   000195   7003         JNZ     $+5
   \   000197   02....       LJMP    ??zha_project_event_loop_9 & 0xFFFF
   \   00019A   8A82         MOV     DPL,R2
   \   00019C   8B83         MOV     DPH,R3
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   24E6         ADD     A,#-0x1a
   \   0001A1   6072         JZ      ??zha_project_event_loop_10
   \   0001A3   24E6         ADD     A,#-0x1a
   \   0001A5   6011         JZ      ??zha_project_event_loop_11
   \   0001A7   2474         ADD     A,#0x74
   \   0001A9   6056         JZ      ??zha_project_event_loop_12
   \   0001AB   24EF         ADD     A,#-0x11
   \   0001AD   60BB         JZ      ??zha_project_event_loop_7
   \   0001AF   24FE         ADD     A,#-0x2
   \   0001B1   70CC         JNZ     ??zha_project_event_loop_8
   \   0001B3                ; Setup parameters for call to function zha_project_ProcessZDOMsgs
   \   0001B3   12....       LCALL   `??zha_project_ProcessZDOMsgs::?relay`; Banked call to: zha_project_ProcessZDOMsgs
   \   0001B6   80C7         SJMP    ??zha_project_event_loop_8
   \                     ??zha_project_event_loop_11:
   \   0001B8   EA           MOV     A,R2
   \   0001B9   2417         ADD     A,#0x17
   \   0001BB   F8           MOV     R0,A
   \   0001BC   E4           CLR     A
   \   0001BD   35..         ADDC    A,?V1
   \   0001BF   F9           MOV     R1,A
   \   0001C0   88..         MOV     ?V2,R0
   \   0001C2   89..         MOV     ?V3,R1
   \   0001C4   A3           INC     DPTR
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   14           DEC     A
   \   0001CD   6024         JZ      ??zha_project_event_loop_13
   \   0001CF   24FD         ADD     A,#-0x3
   \   0001D1   6009         JZ      ??zha_project_event_loop_14
   \   0001D3   24FA         ADD     A,#-0x6
   \   0001D5   701F         JNZ     ??zha_project_event_loop_15
   \   0001D7                ; Setup parameters for call to function zha_project_ProcessInReportCmd
   \   0001D7   12....       LCALL   `??zha_project_ProcessInReportCmd::?relay`; Banked call to: zha_project_ProcessInReportCmd
   \   0001DA   801A         SJMP    ??zha_project_event_loop_15
   \                     ??zha_project_event_loop_14:
   \   0001DC   8882         MOV     DPL,R0
   \   0001DE   8983         MOV     DPH,R1
   \   0001E0   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0001E3   8882         MOV     DPL,R0
   \   0001E5   8983         MOV     DPH,R1
   \   0001E7   7800         MOV     R0,#0x0
   \                     ??zha_project_event_loop_16:
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   F9           MOV     R1,A
   \   0001EB   E8           MOV     A,R0
   \   0001EC   C3           CLR     C
   \   0001ED   99           SUBB    A,R1
   \   0001EE   5006         JNC     ??zha_project_event_loop_15
   \   0001F0   08           INC     R0
   \   0001F1   80F6         SJMP    ??zha_project_event_loop_16
   \                     ??zha_project_event_loop_13:
   \   0001F3                ; Setup parameters for call to function zha_project_ProcessInReadRspCmd
   \   0001F3   12....       LCALL   `??zha_project_ProcessInReadRspCmd::?relay`; Banked call to: zha_project_ProcessInReadRspCmd
   \                     ??zha_project_event_loop_15:
   \   0001F6   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0001F9   6084         JZ      ??zha_project_event_loop_8
   \   0001FB                ; Setup parameters for call to function osal_mem_free
   \   0001FB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001FE   02....       LJMP    ??zha_project_event_loop_8 & 0xFFFF
   \                     ??zha_project_event_loop_12:
   \   000201                ; Setup parameters for call to function zha_project_HandleKeys
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   E0           MOVX    A,@DPTR
   \   000205   FA           MOV     R2,A
   \   000206   85..82       MOV     DPL,?V0
   \   000209   8B83         MOV     DPH,R3
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   F9           MOV     R1,A
   \   00020F   12....       LCALL   `??zha_project_HandleKeys::?relay`; Banked call to: zha_project_HandleKeys
   \   000212   02....       LJMP    ??zha_project_event_loop_8 & 0xFFFF
   \                     ??zha_project_event_loop_10:
   \   000215                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000215   12....       LCALL   `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
   \   000218   02....       LJMP    ??zha_project_event_loop_8 & 0xFFFF
   \                     ??zha_project_event_loop_9:
   \   00021B   EE           MOV     A,R6
   \   00021C   FA           MOV     R2,A
   \   00021D   EF           MOV     A,R7
   \   00021E   6480         XRL     A,#0x80
   \   000220   02....       LJMP    ??zha_project_event_loop_17 & 0xFFFF
    746                  {
    747                      if(ep[i]!=0)
   \                     ??zha_project_event_loop_18:
   \   000223   A8..         MOV     R0,?V0
   \   000225   74..         MOV     A,#ep & 0xff
   \   000227   28           ADD     A,R0
   \   000228   F582         MOV     DPL,A
   \   00022A   E4           CLR     A
   \   00022B   34..         ADDC    A,#(ep >> 8) & 0xff
   \   00022D   F583         MOV     DPH,A
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   F9           MOV     R1,A
   \   000231   6013         JZ      ??zha_project_event_loop_19
    748                      {
    749                            ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,
    750                                      ep[i], 0);
   \   000233                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000233   75..00       MOV     ?V1,#0x0
   \   000236   78..         MOV     R0,#?V1
   \   000238   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023B   12....       LCALL   ?Subroutine14 & 0xFFFF
    751                      }
    752                  }
   \                     ??CrossCallReturnLabel_35:
   \   00023E   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   000241   7401         MOV     A,#0x1
   \   000243   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zha_project_event_loop_19:
   \   000246   05..         INC     ?V0
   \                     ??zha_project_event_loop_6:
   \   000248   90....       MOV     DPTR,#zha_project_ActiveEP
   \   00024B   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   E0           MOVX    A,@DPTR
   \   000252   C3           CLR     C
   \   000253   95..         SUBB    A,?V0
   \   000255   50CC         JNC     ??zha_project_event_loop_18
    753                  osal_memset(ep,0,sizeof(ep));
   \   000257                ; Setup parameters for call to function osal_memset
   \   000257   7C05         MOV     R4,#0x5
   \   000259   7D00         MOV     R5,#0x0
   \   00025B   7900         MOV     R1,#0x0
   \   00025D   7A..         MOV     R2,#ep & 0xff
   \   00025F   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   000261   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    754                  //return ( events ^ SIMPLE_DESC_QUERY_EVT );
    755              }
    756          
    757            // handle processing of timeout event triggered by request fast polling command
    758          
    759              if ( events & SIMPLE_DESC_EVT )
   \                     ??zha_project_event_loop_5:
   \   000264   EE           MOV     A,R6
   \   000265   5440         ANL     A,#0x40
   \   000267   6015         JZ      ??zha_project_event_loop_20
    760              {
    761                  ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,1, 0);
   \   000269                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000269   75..00       MOV     ?V0,#0x0
   \   00026C   78..         MOV     R0,#?V0
   \   00026E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000271   7901         MOV     R1,#0x1
   \   000273   12....       LCALL   ?Subroutine14 & 0xFFFF
    762                  //return ( events ^ SIMPLE_DESC_QUERY_EVT );
    763              }
   \                     ??CrossCallReturnLabel_36:
   \   000276   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   000279   7401         MOV     A,#0x1
   \   00027B   12....       LCALL   ?DEALLOC_XSTACK8
    764              if ( events & RESET_EVT )
   \                     ??zha_project_event_loop_20:
   \   00027E   EF           MOV     A,R7
   \   00027F   5402         ANL     A,#0x2
   \   000281   600A         JZ      ??zha_project_event_loop_21
    765              {
    766                  Onboard_soft_reset();
   \   000283                ; Setup parameters for call to function Onboard_soft_reset
   \   000283   12....       LCALL   Onboard_soft_reset & 0xFFFF
    767                  return ( events ^ RESET_EVT );
   \   000286   EE           MOV     A,R6
   \   000287   FA           MOV     R2,A
   \   000288   EF           MOV     A,R7
   \   000289   6402         XRL     A,#0x2
   \   00028B   801C         SJMP    ??zha_project_event_loop_17
    768              }  
    769          #if ZG_BUILD_COORDINATOR_TYPE    
    770               if ( events & DEVICE_STATUS_EVT )
   \                     ??zha_project_event_loop_21:
   \   00028D   EF           MOV     A,R7
   \   00028E   5401         ANL     A,#0x1
   \   000290   600A         JZ      ??zha_project_event_loop_22
    771              {
    772                  CheckDeviceStatus();
                         ^
Warning[Pe223]: function "CheckDeviceStatus" declared implicitly
   \   000292                ; Setup parameters for call to function CheckDeviceStatus
   \   000292   12....       LCALL   `??CheckDeviceStatus::?relay`; Banked call to: CheckDeviceStatus
    773                  return ( events ^ DEVICE_STATUS_EVT ); 
   \   000295   EE           MOV     A,R6
   \   000296   FA           MOV     R2,A
   \   000297   EF           MOV     A,R7
   \   000298   6401         XRL     A,#0x1
   \   00029A   800D         SJMP    ??zha_project_event_loop_17
    774              }
    775               if ( events & SET_DEVICE_STATE_EVT )
   \                     ??zha_project_event_loop_22:
   \   00029C   EF           MOV     A,R7
   \   00029D   5404         ANL     A,#0x4
   \   00029F   600B         JZ      ??zha_project_event_loop_23
    776              {
    777                  SendCommond();
                         ^
Warning[Pe223]: function "SendCommond" declared implicitly
   \   0002A1                ; Setup parameters for call to function SendCommond
   \   0002A1   12....       LCALL   `??SendCommond::?relay`; Banked call to: SendCommond
    778                  return ( events ^ SET_DEVICE_STATE_EVT ); 
   \   0002A4   EE           MOV     A,R6
   \   0002A5   FA           MOV     R2,A
   \   0002A6   EF           MOV     A,R7
   \   0002A7   6404         XRL     A,#0x4
   \                     ??zha_project_event_loop_17:
   \   0002A9   FB           MOV     R3,A
   \   0002AA   8004         SJMP    ??zha_project_event_loop_24
    779              }
    780          #if ZG_BUILD_ENDDEVICE_TYPE    
    781              if ( events & SEND_REPORT_EVT )
    782              {
    783                  sendReport();
    784                  return ( events ^ SEND_REPORT_EVT );
    785              } 
    786          #endif
    787          
    788          #endif    
    789            // Discard unknown events
    790            return 0;
   \                     ??zha_project_event_loop_23:
   \   0002AC   7A00         MOV     R2,#0x0
   \   0002AE   7B00         MOV     R3,#0x0
   \                     ??zha_project_event_loop_24:
   \   0002B0   7435         MOV     A,#0x35
   \   0002B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B5   7F04         MOV     R7,#0x4
   \   0002B7   02....       LJMP    ?BANKED_LEAVE_XDATA
    791          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine35_0
   \   000006                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#simpleDescReqAddr
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000006   7A..         MOV     R2,#simpleDescReqAddr & 0xff
   \   000008   7B..         MOV     R3,#(simpleDescReqAddr >> 8) & 0xff
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function zcl_SendRead
   \   000004                ; Setup parameters for call to function zcl_SendRead
   \   000004                ; Setup parameters for call to function zcl_SendRead
   \   000004   F5..         MOV     ?V0,A
   \   000006   78..         MOV     R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#simpleDescReqAddr
   \   000006   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   7409         MOV     A,#0x9
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    792          
    793          
    794          /*********************************************************************
    795           * @fn      zha_project_HandleKeys
    796           *
    797           * @brief   Handles all key events for this device.
    798           *
    799           * @param   shift - true if in shift/alt.
    800           * @param   keys - bit field for key events. Valid entries:
    801           *                 HAL_KEY_SW_5
    802           *                 HAL_KEY_SW_4
    803           *                 HAL_KEY_SW_2
    804           *                 HAL_KEY_SW_1
    805           *
    806           * @return  none
    807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    808          static void zha_project_HandleKeys( byte shift, byte keys )
   \                     zha_project_HandleKeys:
    809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    810            if ( keys & HAL_KEY_SW_1 )
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   501E         JNC     ??zha_project_HandleKeys_0
    811            {
    812              giLightScreenMode = LIGHT_MAINMODE;
   \   000012   90....       MOV     DPTR,#giLightScreenMode
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    813          
    814              // toggle local light immediately
    815              zha_project_OnOff = zha_project_OnOff ? LIGHT_OFF : LIGHT_ON;
   \   000017   90....       MOV     DPTR,#zha_project_OnOff
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6008         JZ      ??zha_project_HandleKeys_1
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   90....       MOV     DPTR,#zha_project_LevelCurrentLevel
   \   000022   04           INC     A
   \   000023   800A         SJMP    ??zha_project_HandleKeys_2
   \                     ??zha_project_HandleKeys_1:
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#zha_project_LevelOnLevel
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   90....       MOV     DPTR,#zha_project_LevelCurrentLevel
   \                     ??zha_project_HandleKeys_2:
   \   00002F   F0           MOVX    @DPTR,A
    816          #ifdef ZCL_LEVEL_CTRL
    817              zha_project_LevelCurrentLevel = zha_project_OnOff ? zha_project_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    818          #endif
    819            }
    820          
    821            if ( keys & HAL_KEY_SW_2 )
   \                     ??zha_project_HandleKeys_0:
   \   000030   EF           MOV     A,R7
   \   000031   A2E1         MOV     C,0xE0 /* A   */.1
   \   000033   505D         JNC     ??zha_project_HandleKeys_3
    822            {
    823          #if (defined HAL_BOARD_ZLIGHT)
    824          
    825              zha_project_BasicResetCB();
    826          
    827          #else
    828          
    829              giLightScreenMode = LIGHT_MAINMODE;
   \   000035   90....       MOV     DPTR,#giLightScreenMode
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    830          
    831          #ifdef ZCL_EZMODE
    832              {
    833                // Invoke EZ-Mode
    834                zclEZMode_InvokeData_t ezModeData;
    835          
    836                // Invoke EZ-Mode
    837                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   04           INC     A
   \   000041   F0           MOVX    @DPTR,A
    838                if ( (zha_project_NwkState == DEV_ZB_COORD) ||
    839                    (zha_project_NwkState == DEV_ROUTER)   ||
    840                      (zha_project_NwkState == DEV_END_DEVICE) )
   \   000042   90....       MOV     DPTR,#zha_project_NwkState
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6409         XRL     A,#0x9
   \   000048   600A         JZ      ??zha_project_HandleKeys_4
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6407         XRL     A,#0x7
   \   00004D   6005         JZ      ??zha_project_HandleKeys_4
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6406         XRL     A,#0x6
   \   000052   7009         JNZ     ??zha_project_HandleKeys_5
    841                {
    842                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zha_project_HandleKeys_4:
   \   000054   7401         MOV     A,#0x1
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   7401         MOV     A,#0x1
   \   00005B   8006         SJMP    ??zha_project_HandleKeys_6
    843                }
    844                else
    845                {
    846                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zha_project_HandleKeys_5:
   \   00005D   7401         MOV     A,#0x1
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E4           CLR     A
   \                     ??zha_project_HandleKeys_6:
   \   000063   F0           MOVX    @DPTR,A
    847                }
    848                ezModeData.initiator = FALSE;          // OnOffLight is a target
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    849                ezModeData.numActiveOutClusters = 0;
   \   00006B   7406         MOV     A,#0x6
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
    850                ezModeData.pActiveOutClusterIDs = NULL;
   \   000072   7407         MOV     A,#0x7
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   F0           MOVX    @DPTR,A
    851                ezModeData.numActiveInClusters = 0;
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
    852                ezModeData.pActiveOutClusterIDs = NULL;
   \   000082   7407         MOV     A,#0x7
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E4           CLR     A
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   F0           MOVX    @DPTR,A
    853                zcl_InvokeEZMode( &ezModeData );
   \   00008B                ; Setup parameters for call to function zcl_InvokeEZMode
   \   00008B   AA..         MOV     R2,?XSP + 0
   \   00008D   AB..         MOV     R3,?XSP + 1
   \   00008F   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    854              }
    855          
    856          #else // NOT EZ-Mode
    857              {
    858                zAddrType_t dstAddr;
    859                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    860          
    861                // Initiate an End Device Bind Request, this bind request will
    862                // only use a cluster list that is important to binding.
    863                dstAddr.addrMode = afAddr16Bit;
    864                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    865                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    866                                     SAMPLELIGHT_ENDPOINT,
    867                                     ZCL_HA_PROFILE_ID,
    868                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    869                                     0, NULL,   // No Outgoing clusters to bind
    870                                     TRUE );
    871              }
    872          #endif // ZCL_EZMODE
    873          #endif // HAL_BOARD_ZLIGHT
    874            }
    875          
    876            if ( keys & HAL_KEY_SW_3 )
   \                     ??zha_project_HandleKeys_3:
   \   000092   EF           MOV     A,R7
   \   000093   A2E4         MOV     C,0xE0 /* A   */.4
   \   000095   5023         JNC     ??zha_project_HandleKeys_7
    877            {
    878              NLME_SendNetworkStatus( zha_project_DstAddr.addr.shortAddr,
    879                                 NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
   \   000097                ; Setup parameters for call to function NLME_GetShortAddr
   \   000097   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00009A   8A..         MOV     ?V0,R2
   \   00009C   8B..         MOV     ?V1,R3
   \   00009E   AC..         MOV     R4,?V0
   \   0000A0   AD..         MOV     R5,?V1
   \   0000A2                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   0000A2   75..00       MOV     ?V0,#0x0
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   7902         MOV     R1,#0x2
   \   0000AC   90....       MOV     DPTR,#zha_project_DstAddr
   \   0000AF   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    880            }
   \                     ??CrossCallReturnLabel_64:
   \   0000B2   12....       LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
    881          
    882            if ( keys & HAL_KEY_SW_4 )
   \                     ??zha_project_HandleKeys_7:
   \   0000BA   EF           MOV     A,R7
   \   0000BB   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000BD   5041         JNC     ??zha_project_HandleKeys_8
    883            {
    884              giLightScreenMode = LIGHT_MAINMODE;
   \   0000BF   90....       MOV     DPTR,#giLightScreenMode
   \   0000C2   E4           CLR     A
   \   0000C3   F0           MOVX    @DPTR,A
    885          
    886              if ( ( zha_project_NwkState == DEV_ZB_COORD ) ||
    887                    ( zha_project_NwkState == DEV_ROUTER ) )
   \   0000C4   90....       MOV     DPTR,#zha_project_NwkState
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6409         XRL     A,#0x9
   \   0000CA   6005         JZ      ??zha_project_HandleKeys_9
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6407         XRL     A,#0x7
   \   0000CF   702F         JNZ     ??zha_project_HandleKeys_8
    888              {
    889                zAddrType_t tmpAddr;
    890          
    891                tmpAddr.addrMode = Addr16Bit;
   \                     ??zha_project_HandleKeys_9:
   \   0000D1   7408         MOV     A,#0x8
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   F0           MOVX    @DPTR,A
    892                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0000D9                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000D9   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000DC   85..82       MOV     DPL,?XSP + 0
   \   0000DF   85..83       MOV     DPH,?XSP + 1
   \   0000E2   EA           MOV     A,R2
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   EB           MOV     A,R3
   \   0000E6   F0           MOVX    @DPTR,A
    893          
    894                // toggle permit join
    895                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   0000E7   90....       MOV     DPTR,#gPermitDuration
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   6003         JZ      ??zha_project_HandleKeys_10
   \   0000ED   E4           CLR     A
   \   0000EE   8002         SJMP    ??zha_project_HandleKeys_11
   \                     ??zha_project_HandleKeys_10:
   \   0000F0   74FF         MOV     A,#-0x1
   \                     ??zha_project_HandleKeys_11:
   \   0000F2   F0           MOVX    @DPTR,A
    896          
    897                // Trust Center significance is always true
    898                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   0000F3                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   0000F3   7D00         MOV     R5,#0x0
   \   0000F5   7C01         MOV     R4,#0x1
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F9           MOV     R1,A
   \   0000F9   AA..         MOV     R2,?XSP + 0
   \   0000FB   AB..         MOV     R3,?XSP + 1
   \   0000FD   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    899              }
    900            }
    901          
    902            // Shift F5 does a Basic Reset (factory defaults)
    903            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zha_project_HandleKeys_8:
   \   000100   EE           MOV     A,R6
   \   000101   600A         JZ      ??zha_project_HandleKeys_12
   \   000103   EF           MOV     A,R7
   \   000104   A2E2         MOV     C,0xE0 /* A   */.2
   \   000106   5016         JNC     ??zha_project_HandleKeys_13
    904            {
    905              zha_project_BasicResetCB();
   \   000108                ; Setup parameters for call to function zha_project_BasicResetCB
   \   000108   12....       LCALL   `??zha_project_BasicResetCB::?relay`; Banked call to: zha_project_BasicResetCB
   \   00010B   8011         SJMP    ??zha_project_HandleKeys_13
    906            }
    907            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zha_project_HandleKeys_12:
   \   00010D   EF           MOV     A,R7
   \   00010E   A2E2         MOV     C,0xE0 /* A   */.2
   \   000110   500C         JNC     ??zha_project_HandleKeys_13
    908            {
    909              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
   \   000112   90....       MOV     DPTR,#giLightScreenMode
   \   000115   E0           MOVX    A,@DPTR
   \   000116   6003         JZ      ??zha_project_HandleKeys_14
   \   000118   E4           CLR     A
   \   000119   8002         SJMP    ??zha_project_HandleKeys_15
   \                     ??zha_project_HandleKeys_14:
   \   00011B   7401         MOV     A,#0x1
   \                     ??zha_project_HandleKeys_15:
   \   00011D   F0           MOVX    @DPTR,A
    910            }
    911          
    912            // update the display, including the light
    913            //zha_project_LcdDisplayUpdate();
    914          }
   \                     ??zha_project_HandleKeys_13:
   \   00011E   7409         MOV     A,#0x9
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
   \   000123                REQUIRE ?Subroutine0
   \   000123                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   22           RET
    915          
    916          
    917          /*********************************************************************
    918           * @fn      zha_project_DisplayLight
    919           *
    920           * @brief   Displays current state of light on LED and also on main display if supported.
    921           *
    922           * @param   none
    923           *
    924           * @return  none
    925           */
    926          static void zha_project_DisplayLight( void )
    927          {
    928            // set the LED1 based on light (on or off)
    929            if ( zha_project_OnOff == LIGHT_ON )
    930            {
    931              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    932            }
    933            else
    934            {
    935              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    936            }
    937          
    938          #ifdef LCD_SUPPORTED
    939            if (giLightScreenMode == LIGHT_MAINMODE)
    940            {
    941          #ifdef ZCL_LEVEL_CTRL
    942              // display current light level
    943              if ( ( zha_project_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    944                   ( zha_project_OnOff == LIGHT_OFF ) )
    945              {
    946                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    947              }
    948              else if ( ( zha_project_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    949                        ( zha_project_LevelCurrentLevel == zha_project_LevelOnLevel ) ||
    950                         ( ( zha_project_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    951                           ( zha_project_LevelCurrentLevel == zha_project_LevelLastLevel ) ) )
    952              {
    953                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    954              }
    955              else    // "    LEVEL ###"
    956              {
    957                zclHA_uint8toa( zha_project_LevelCurrentLevel, &sLightLevel[10] );
    958                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
    959              }
    960          #else
    961              if ( zha_project_OnOff )
    962              {
    963                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    964              }
    965              else
    966              {
    967                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    968              }
    969          #endif // ZCL_LEVEL_CTRL
    970            }
    971          #endif // LCD_SUPPORTED
    972          }
    973          
    974          /*********************************************************************
    975           * @fn      zha_project_BasicResetCB
    976           *
    977           * @brief   Callback from the ZCL General Cluster Library
    978           *          to set all the Basic Cluster attributes to default values.
    979           *
    980           * @param   none
    981           *
    982           * @return  none
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          static void zha_project_BasicResetCB( void )
   \                     zha_project_BasicResetCB:
    985          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    986            NLME_LeaveReq_t leaveReq;
    987            // Set every field to 0
    988            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    989          
    990            // This will enable the device to rejoin the network after reset.
    991            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    992          
    993            // Set the NV startup option to force a "new" join.
    994            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    995          
    996            // Leave the network, and reset afterwards
    997            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zha_project_BasicResetCB_0
    998            {
    999              // Couldn't send out leave; prepare to reset anyway
   1000              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   1001            }
   1002          }
   \                     ??zha_project_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1003          
   1004          /*********************************************************************
   1005           * @fn      zha_project_IdentifyCB
   1006           *
   1007           * @brief   Callback from the ZCL General Cluster Library when
   1008           *          it received an Identity Command for this application.
   1009           *
   1010           * @param   srcAddr - source address and endpoint of the response message
   1011           * @param   identifyTime - the number of seconds to identify yourself
   1012           *
   1013           * @return  none
   1014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1015          static void zha_project_IdentifyCB( zclIdentify_t *pCmd )
   \                     zha_project_IdentifyCB:
   1016          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1017            zha_project_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00000D   90....       MOV     DPTR,#zha_project_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   1018          //zha_project_ProcessIdentifyTimeChange();
   1019          }
   \   000015   80..         SJMP    ??Subroutine36_0
   1020          
   1021          /*********************************************************************
   1022           * @fn      zha_project_IdentifyQueryRspCB
   1023           *
   1024           * @brief   Callback from the ZCL General Cluster Library when
   1025           *          it received an Identity Query Response Command for this application.
   1026           *
   1027           * @param   srcAddr - requestor's address
   1028           * @param   timeout - number of seconds to identify yourself (valid for query response)
   1029           *
   1030           * @return  none
   1031           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1032          static void zha_project_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zha_project_IdentifyQueryRspCB:
   1033          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1034            (void)pRsp;
   1035          #ifdef ZCL_EZMODE
   1036            {
   1037              zclEZMode_ActionData_t data;
   1038              data.pIdentifyQueryRsp = pRsp;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   1039              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
   \   000014                ; Setup parameters for call to function zcl_EZModeAction
   \   000014   AA..         MOV     R2,?XSP + 0
   \   000016   AB..         MOV     R3,?XSP + 1
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   1040            }
   1041          #endif
   1042          }
   \   00001D   7402         MOV     A,#0x2
   \   00001F   80..         SJMP    ?Subroutine1
   1043          
   1044          /*********************************************************************
   1045           * @fn      zha_project_OnOffCB
   1046           *
   1047           * @brief   Callback from the ZCL General Cluster Library when
   1048           *          it received an On/Off Command for this application.
   1049           *
   1050           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
   1051           *
   1052           * @return  none
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          static void zha_project_OnOffCB( uint8 cmd )
   \                     zha_project_OnOffCB:
   1055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1056            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   1057          
   1058            zha_project_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000017   F0           MOVX    @DPTR,A
   1059          
   1060          
   1061            // Turn on the light
   1062            if ( cmd == COMMAND_ON )
   \   000018   7401         MOV     A,#0x1
   \   00001A   6E           XRL     A,R6
   \   00001B   600E         JZ      ??zha_project_OnOffCB_0
   1063            {
   1064              zha_project_OnOff = LIGHT_ON;
   1065            }
   1066            // Turn off the light
   1067            else if ( cmd == COMMAND_OFF )
   \   00001D   EE           MOV     A,R6
   \   00001E   6012         JZ      ??zha_project_OnOffCB_1
   1068            {
   1069              zha_project_OnOff = LIGHT_OFF;
   1070            }
   1071            // Toggle the light
   1072            else if ( cmd == COMMAND_TOGGLE )
   \   000020   7402         MOV     A,#0x2
   \   000022   6E           XRL     A,R6
   \   000023   7012         JNZ     ??zha_project_OnOffCB_2
   1073            {
   1074              if ( zha_project_OnOff == LIGHT_OFF )
   \   000025   90....       MOV     DPTR,#zha_project_OnOff
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7007         JNZ     ??zha_project_OnOffCB_1
   1075              {
   1076                zha_project_OnOff = LIGHT_ON;
   \                     ??zha_project_OnOffCB_0:
   \   00002B   90....       MOV     DPTR,#zha_project_OnOff
   \   00002E   7401         MOV     A,#0x1
   \   000030   8004         SJMP    ??zha_project_OnOffCB_3
   1077              }
   1078              else
   1079              {
   1080                zha_project_OnOff = LIGHT_OFF;
   \                     ??zha_project_OnOffCB_1:
   \   000032   90....       MOV     DPTR,#zha_project_OnOff
   \   000035   E4           CLR     A
   \                     ??zha_project_OnOffCB_3:
   \   000036   F0           MOVX    @DPTR,A
   1081              }
   1082            }
   1083          
   1084          #if ZCL_LEVEL_CTRL
   1085            //zha_project_DefaultMove( );
   1086          #endif
   1087          
   1088            // update the display
   1089            //zha_project_LcdDisplayUpdate( );
   1090          }
   \                     ??zha_project_OnOffCB_2:
   \   000037   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#zha_project_DstAddr
   \   000008   E8           MOV     A,R0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   22           RET
   1091          
   1092          
   1093          /******************************************************************************
   1094           *
   1095           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1096           *
   1097           *****************************************************************************/
   1098          
   1099          /*********************************************************************
   1100           * @fn      zha_project_ProcessIncomingMsg
   1101           *
   1102           * @brief   Process ZCL Foundation incoming message
   1103           *
   1104           * @param   pInMsg - pointer to the received message
   1105           *
   1106           * @return  none
   1107           */
   1108          static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1109          {
   1110            switch ( pInMsg->zclHdr.commandID )
   1111            {
   1112          #ifdef ZCL_READ
   1113              case ZCL_CMD_READ_RSP:
   1114                zha_project_ProcessInReadRspCmd( pInMsg );
   1115                break;
   1116          #endif
   1117          #ifdef ZCL_WRITE
   1118              case ZCL_CMD_WRITE_RSP:
   1119                zha_project_ProcessInWriteRspCmd( pInMsg );
   1120                break;
   1121          #endif
   1122          #ifdef ZCL_REPORT
   1123              // Attribute Reporting implementation should be added here
   1124              case ZCL_CMD_CONFIG_REPORT:
   1125                // zha_project_ProcessInConfigReportCmd( pInMsg );
   1126                break;
   1127          
   1128              case ZCL_CMD_CONFIG_REPORT_RSP:
   1129                // zha_project_ProcessInConfigReportRspCmd( pInMsg );
   1130                break;
   1131          
   1132              case ZCL_CMD_READ_REPORT_CFG:
   1133                // zha_project_ProcessInReadReportCfgCmd( pInMsg );
   1134                break;
   1135          
   1136              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1137                // zha_project_ProcessInReadReportCfgRspCmd( pInMsg );
   1138                break;
   1139          
   1140              case ZCL_CMD_REPORT:
   1141                zha_project_ProcessInReportCmd( pInMsg );
   1142                break;
   1143          #endif
   1144              case ZCL_CMD_DEFAULT_RSP:
   1145                zha_project_ProcessInDefaultRspCmd( pInMsg );
   1146                break;
   1147          #ifdef ZCL_DISCOVER
   1148              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1149                zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
   1150                break;
   1151          
   1152              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1153                zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
   1154                break;
   1155          
   1156              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1157                zha_project_ProcessInDiscAttrsRspCmd( pInMsg );
   1158                break;
   1159          
   1160              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1161                zha_project_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1162                break;
   1163          #endif
   1164              default:
   1165                break;
   1166            }
   1167          
   1168            if ( pInMsg->attrCmd )
   1169              osal_mem_free( pInMsg->attrCmd );
   1170          }
   1171          
   1172          #ifdef ZCL_READ
   1173          /*********************************************************************
   1174           * @fn      zha_project_ProcessInReadRspCmd
   1175           *
   1176           * @brief   Process the "Profile" Read Response Command
   1177           *
   1178           * @param   pInMsg - incoming message to process
   1179           *
   1180           * @return  none
   1181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1182          static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zha_project_ProcessInReadRspCmd:
   1183          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 43
   \   000005   74D5         MOV     A,#-0x2b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   1184            zclReadRspCmd_t *readRspCmd;
   1185              uint8 i,k;
   1186              uint8 *j;
   1187              uint16 *p;
   1188              readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd; 
   1189              switch(pInMsg->clusterId)
   \                     ??CrossCallReturnLabel_30:
   \   00000D   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_0`:
   \   000010   0000         DW        0
   \   000012   0A00         DW        10
   \   000014   0000         DW        0
   \   000016   ....         DW        ??zha_project_ProcessInReadRspCmd_0
   \   000018   0100         DW        1
   \   00001A   ....         DW        ??zha_project_ProcessInReadRspCmd_1
   \   00001C   0600         DW        6
   \   00001E   ....         DW        ??zha_project_ProcessInReadRspCmd_2
   \   000020   0800         DW        8
   \   000022   ....         DW        ??zha_project_ProcessInReadRspCmd_3
   \   000024   0003         DW        768
   \   000026   ....         DW        ??zha_project_ProcessInReadRspCmd_4
   \   000028   0004         DW        1024
   \   00002A   ....         DW        ??zha_project_ProcessInReadRspCmd_5
   \   00002C   0204         DW        1026
   \   00002E   ....         DW        ??zha_project_ProcessInReadRspCmd_6
   \   000030   0504         DW        1029
   \   000032   ....         DW        ??zha_project_ProcessInReadRspCmd_7
   \   000034   0005         DW        1280
   \   000036   ....         DW        ??zha_project_ProcessInReadRspCmd_8
   \   000038   0205         DW        1282
   \   00003A   ....         DW        ??zha_project_ProcessInReadRspCmd_9
   \   00003C   ....         DW        ??zha_project_ProcessInReadRspCmd_10
   1190              {
   1191          #if ZG_BUILD_COORDINATOR_TYPE      
   1192                case ZCL_CLUSTER_ID_GEN_BASIC:
   1193                  {
   1194                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_0:
   \   00003E   7E00         MOV     R6,#0x0
   \   000040   800D         SJMP    ??zha_project_ProcessInReadRspCmd_11
   1195                    {
   1196                          zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1197                          j=statusRec->data;
   1198                          switch(statusRec->attrID)
   1199                          {
   1200                              case ATTRID_BASIC_POWER_SOURCE:
   1201                                  uint8 zha_project_PowerSource=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1202                                  break;
   1203          //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
   1204          //                        zha_project_BatteryVoltage=*j;
   1205          //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
   1206          //                        break;
   1207                              case ATTRID_BASIC_ZCL_VERSION:
   1208                                  break;
   1209                              case ATTRID_BASIC_MODEL_ID:
   1210                                  break;
   1211                              case ATTRID_BASIC_MANUFACTURER_NAME:
   1212                                  SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
                                         ^
Warning[Pe223]: function "SetTempDeviceManuName" declared implicitly
   1213                                  break;
   1214                              case ATTRID_BASIC_HW_VERSION:
   1215                                  uint8 zha_project_HWRevision = *j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1216                                  SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zha_project_HWRevision);
                                         ^
Warning[Pe223]: function "SetTempDeviceHW" declared implicitly

                          uint8 zha_project_PowerSource=*j;
                                ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1201  Warning[Pe177]: 
          variable "zha_project_PowerSource" was declared but never referenced

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1198  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zha_project_PowerSource" (declared at line 1201 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
            variable "zha_project_HWRevision" (declared at line 1215 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \                     ??zha_project_ProcessInReadRspCmd_12:
   \   000042                ; Setup parameters for call to function SetTempDeviceHW
   \   000042   85..82       MOV     DPL,?V2
   \   000045   85..83       MOV     DPH,?V3
   \   000048   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00004B   12....       LCALL   `??SetTempDeviceHW::?relay`; Banked call to: SetTempDeviceHW
   1217                                  break;                        
   \                     ??zha_project_ProcessInReadRspCmd_13:
   \   00004E   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_11:
   \   00004F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000052   5017         JNC     ??zha_project_ProcessInReadRspCmd_14
   \   000054   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000057   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_1`:
   \   00005A   0300         DW        3
   \   00005C   01           DB        1
   \   00005D   ....         DW        ??zha_project_ProcessInReadRspCmd_13
   \   00005F   ....         DW        ??zha_project_ProcessInReadRspCmd_12
   \   000061   ....         DW        ??zha_project_ProcessInReadRspCmd_15
   \                     ??zha_project_ProcessInReadRspCmd_15:
   \   000063                ; Setup parameters for call to function SetTempDeviceManuName
   \   000063   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000066   12....       LCALL   `??SetTempDeviceManuName::?relay`; Banked call to: SetTempDeviceManuName
   \   000069   80E3         SJMP    ??zha_project_ProcessInReadRspCmd_13
   1218                              default:
   1219                                break;
   1220                          
   1221                          }
   1222          
   1223                    }
   1224                  }
   1225                  osal_set_event( zha_project_TaskID,ZHA_ATTRIBUTE_POWER_EVT);
   \                     ??zha_project_ProcessInReadRspCmd_14:
   \   00006B                ; Setup parameters for call to function osal_set_event
   \   00006B   7A80         MOV     R2,#-0x80
   \   00006D   8024         SJMP    ??zha_project_ProcessInReadRspCmd_16
   1226                  
   1227                  break;
   1228                  
   1229                case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1230                  {
   1231                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_1:
   \   00006F   7E00         MOV     R6,#0x0
   \   000071   8019         SJMP    ??zha_project_ProcessInReadRspCmd_17
   1232                    {
   1233                          zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReadRspCmd_18:
   \   000073   EE           MOV     A,R6
   \   000074   75F006       MOV     B,#0x6
   \   000077   12....       LCALL   ?Subroutine23 & 0xFFFF
   1234                          j=statusRec->data;
   1235                          switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_47:
   \   00007A   7002         JNZ     ??zha_project_ProcessInReadRspCmd_19
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReadRspCmd_19:
   \   00007E   700B         JNZ     ??zha_project_ProcessInReadRspCmd_20
   1236                          {
   1237                              case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
   1238                                  uint8 zha_project_BatteryVoltage=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1239                                  SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
                                         ^
Warning[Pe223]: function "SetTempDeviceBAT" declared implicitly

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1235  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zha_project_BatteryVoltage" (declared at line 1238 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \   000080                ; Setup parameters for call to function SetTempDeviceBAT
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   A3           INC     DPTR
   \   000085   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000088   12....       LCALL   `??SetTempDeviceBAT::?relay`; Banked call to: SetTempDeviceBAT
   1240                                  break;
   1241                              default:
   1242                                break;
   1243                          
   1244                          }
   1245          
   1246                    }
   \                     ??zha_project_ProcessInReadRspCmd_20:
   \   00008B   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_17:
   \   00008C   12....       LCALL   ?Subroutine10 & 0xFFFF
   1247                
   1248                  }        
   \                     ??CrossCallReturnLabel_11:
   \   00008F   40E2         JC      ??zha_project_ProcessInReadRspCmd_18
   1249                  
   1250                  
   1251                  osal_set_event( zha_project_TaskID, ZHA_ACTIVE_EP_EVT );
   \   000091                ; Setup parameters for call to function osal_set_event
   \   000091   7A08         MOV     R2,#0x8
   \                     ??zha_project_ProcessInReadRspCmd_16:
   \   000093   7B00         MOV     R3,#0x0
   \   000095   90....       MOV     DPTR,#zha_project_TaskID
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1252                  break;
   \   00009D   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1253                case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1254                  {
   1255                    for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_2:
   \   0000A0   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_21:
   \   0000A2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A5   4003         JC      $+5
   \   0000A7   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1256                    {
   1257                      zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0000AA   12....       LCALL   ?Subroutine8 & 0xFFFF
   1258                      j=statusRec->data;
   1259                      switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_81:
   \   0000AD   7016         JNZ     ??zha_project_ProcessInReadRspCmd_22
   1260                      {
   1261                          case ATTRID_ON_OFF:
   1262                              uint16 buf[3];
                                     ^
Warning[Pe1072]: a declaration cannot have a label
   1263                              osal_memset(buf,0,sizeof(buf));
   \   0000AF                ; Setup parameters for call to function osal_memset
   \   0000AF   7C06         MOV     R4,#0x6
   \   0000B1   7D00         MOV     R5,#0x0
   \   0000B3   7900         MOV     R1,#0x0
   \   0000B5   AA..         MOV     R2,?XSP + 0
   \   0000B7   AB..         MOV     R3,?XSP + 1
   \   0000B9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1264                              buf[0] = *j;
   \   0000BC   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000BF   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   1265                              UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                     ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_121:
   \   0000C2   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1266                            break;
   1267                          default:
   1268                            break;
   1269                      }
   1270          
   1271                    }
   \                     ??zha_project_ProcessInReadRspCmd_22:
   \   0000C5   0E           INC     R6
   \   0000C6   80DA         SJMP    ??zha_project_ProcessInReadRspCmd_21
   1272                
   1273                  }
   1274                  break;
   1275                  case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
   1276                      {
   1277                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_4:
   \   0000C8   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_23:
   \   0000CA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CD   4003         JC      $+5
   \   0000CF   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1278                          {
   1279                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   0000D2   EE           MOV     A,R6
   \   0000D3   75F006       MOV     B,#0x6
   \   0000D6   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1280                              p=(uint16 *)statusRec->data;
   \                     ??CrossCallReturnLabel_94:
   \   0000D9   A3           INC     DPTR
   \   0000DA   12....       LCALL   ?Subroutine15 & 0xFFFF
   1281                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1282                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_37:
   \   0000DD   7002         JNZ     ??zha_project_ProcessInReadRspCmd_24
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReadRspCmd_24:
   \   0000E1   701B         JNZ     ??zha_project_ProcessInReadRspCmd_25
   1283                              {
   1284                                  case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
   1285                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1286                                      osal_memset(buf,0,sizeof(buf));
   \   0000E3                ; Setup parameters for call to function osal_memset
   \   0000E3   7C06         MOV     R4,#0x6
   \   0000E5   7D00         MOV     R5,#0x0
   \   0000E7   7900         MOV     R1,#0x0
   \   0000E9   AA..         MOV     R2,?XSP + 0
   \   0000EB   AB..         MOV     R3,?XSP + 1
   \   0000ED   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1287                                      buf[2] = *p;
   \   0000F0   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000F3   7404         MOV     A,#0x4
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   1288                                      UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus3" declared implicitly
   \                     ??CrossCallReturnLabel_119:
   \   0000FB   12....       LCALL   `??UpdateDeviceStatus3::?relay`; Banked call to: UpdateDeviceStatus3
   1289                                  break;
   1290                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
   1291                                      //zha_project_HUE_Status = *p;
   1292                                    break;
   1293                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
   1294                                      //zha_project_Saturation = *p;                        
   1295                                    break;
   1296                                  default:
   1297                                  break;
   1298          
   1299                              }
   1300          
   1301                          }
   \                     ??zha_project_ProcessInReadRspCmd_25:
   \   0000FE   0E           INC     R6
   \   0000FF   80C9         SJMP    ??zha_project_ProcessInReadRspCmd_23
   1302          
   1303                       }
   1304              
   1305                  break;
   1306                  case ZCL_CLUSTER_ID_SS_IAS_ZONE:
   1307                 {        uint16 supportOD = 0;
   1308                          uint8 sensorType = 0;
   1309                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_8:
   \   000101   7E00         MOV     R6,#0x0
   \   000103   02....       LJMP    ??zha_project_ProcessInReadRspCmd_26 & 0xFFFF
   1310                          {
   1311                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1312                              p=(uint16 *)statusRec->data;
   1313                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1314                              switch(statusRec->attrID)
   1315                              {
   1316                                  case ATTRID_SS_IAS_ZONE_STATUS:
   1317                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1318                                      osal_memset(buf,0,sizeof(buf));
   1319                                      buf[0] = *p;
   1320                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   1321                                  break;
   1322                                  case ATTRID_SS_IAS_ZONE_TYPE:
   1323                                      zAddrType_t addr;
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1324                                      uint8 address[8];
   1325                                      uint8 pValue[Z_EXTADDR_LEN];
   1326                                      addr.addrMode = Addr64Bit;
   \                     ??zha_project_ProcessInReadRspCmd_27:
   \   000106   742A         MOV     A,#0x2a
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   7403         MOV     A,#0x3
   \   00010D   F0           MOVX    @DPTR,A
   1327                                      osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
   \   00010E                ; Setup parameters for call to function osal_nv_read
   \   00010E   7412         MOV     A,#0x12
   \   000110   12....       LCALL   ?XSTACK_DISP100_8
   \   000113   88..         MOV     ?V4,R0
   \   000115   89..         MOV     ?V5,R1
   \   000117   78..         MOV     R0,#?V4
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011C   75..08       MOV     ?V4,#0x8
   \   00011F   75..00       MOV     ?V5,#0x0
   \   000122   78..         MOV     R0,#?V4
   \   000124   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000127   7C00         MOV     R4,#0x0
   \   000129   7D00         MOV     R5,#0x0
   \   00012B   7A01         MOV     R2,#0x1
   \   00012D   7B00         MOV     R3,#0x0
   \   00012F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000132   7404         MOV     A,#0x4
   \   000134   12....       LCALL   ?DEALLOC_XSTACK8
   1328                                      //osal_memcpy(pValue,addr.addr.extAddr,8);
   1329                                      osal_memcpy(addr.addr.extAddr,pValue,8);
   \   000137                ; Setup parameters for call to function osal_memcpy
   \   000137   7412         MOV     A,#0x12
   \   000139   12....       LCALL   ?XSTACK_DISP100_8
   \   00013C   88..         MOV     ?V4,R0
   \   00013E   89..         MOV     ?V5,R1
   \   000140   75..00       MOV     ?V6,#0x0
   \   000143   78..         MOV     R0,#?V4
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000148   7C08         MOV     R4,#0x8
   \   00014A   7D00         MOV     R5,#0x0
   \   00014C   7425         MOV     A,#0x25
   \   00014E   12....       LCALL   ?XSTACK_DISP101_8
   \   000151   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000154   7403         MOV     A,#0x3
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   1330                                      //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
   1331                                      APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
   \   000159                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000159   741A         MOV     A,#0x1a
   \   00015B   12....       LCALL   ?XSTACK_DISP102_8
   \   00015E   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000161   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   1332                                      ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
   1333                                                             1,
   1334                                                             0x0020,
   1335                                                             &addr,  pInMsg->endPoint,
   1336                                                              FALSE );
   \   000164                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000164   75..00       MOV     ?V4,#0x0
   \   000167   78..         MOV     R0,#?V4
   \   000169   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016C   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00016F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000172   7424         MOV     A,#0x24
   \   000174   12....       LCALL   ?XSTACK_DISP100_8
   \   000177   88..         MOV     ?V4,R0
   \   000179   89..         MOV     ?V5,R1
   \   00017B   78..         MOV     R0,#?V4
   \   00017D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000180   75..20       MOV     ?V4,#0x20
   \   000183   75..00       MOV     ?V5,#0x0
   \   000186   78..         MOV     R0,#?V4
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018B   7420         MOV     A,#0x20
   \   00018D   12....       LCALL   ?XSTACK_DISP100_8
   \   000190   88..         MOV     ?V4,R0
   \   000192   89..         MOV     ?V5,R1
   \   000194   78..         MOV     R0,#?V4
   \   000196   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000199   7901         MOV     R1,#0x1
   \   00019B   7C..         MOV     R4,#dstAddr & 0xff
   \   00019D   7D..         MOV     R5,#(dstAddr >> 8) & 0xff
   \   00019F   7A21         MOV     R2,#0x21
   \   0001A1   7B00         MOV     R3,#0x0
   \   0001A3   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001A6   7408         MOV     A,#0x8
   \   0001A8   12....       LCALL   ?DEALLOC_XSTACK8
   1337                                      //zha_project_Smoke_Type = *p;
   1338                                      //uint16 buf[3];
   1339                                      osal_memset(buf,0,sizeof(buf));
   \   0001AB                ; Setup parameters for call to function osal_memset
   \   0001AB   7C06         MOV     R4,#0x6
   \   0001AD   7D00         MOV     R5,#0x0
   \   0001AF   7900         MOV     R1,#0x0
   \   0001B1   EC           MOV     A,R4
   \   0001B2   12....       LCALL   ?XSTACK_DISP101_8
   \   0001B5   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1340                                      buf[1] = *p;
   \   0001B8   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0001BB   7408         MOV     A,#0x8
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL   ?Subroutine6 & 0xFFFF
   1341                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_6:
   \   0001C3   12....       LCALL   ?XSTACK_DISP102_8
   \   0001C6   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0001C9   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1342                                      //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zha_project_Smoke_Type,0,false,0);
   1343                                      SetTempDeviceType(pInMsg->srcAddr.addr.shortAddr,*p);
                                             ^
Warning[Pe223]: function "SetTempDeviceType" declared implicitly

         {        uint16 supportOD = 0;
                         ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1307  Warning[Pe177]: 
          variable "supportOD" was declared but never referenced

                  uint8 sensorType = 0;
                        ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1308  Warning[Pe177]: 
          variable "sensorType" was declared but never referenced
   \   0001CC                ; Setup parameters for call to function SetTempDeviceType
   \   0001CC   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001CF   12....       LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
   1344                                   break;
   \                     ??zha_project_ProcessInReadRspCmd_28:
   \   0001D2   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_26:
   \   0001D3   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001D6   4003         JC      $+5
   \   0001D8   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   \   0001DB   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001DE   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_2`:
   \   0001E1   0100         DW        1
   \   0001E3   01           DB        1
   \   0001E4   ....         DW        ??zha_project_ProcessInReadRspCmd_28
   \   0001E6   ....         DW        ??zha_project_ProcessInReadRspCmd_27
   \   0001E8   ....         DW        ??zha_project_ProcessInReadRspCmd_29
   \                     ??zha_project_ProcessInReadRspCmd_29:
   \   0001EA                ; Setup parameters for call to function osal_memset
   \   0001EA   7C06         MOV     R4,#0x6
   \   0001EC   7D00         MOV     R5,#0x0
   \   0001EE   7900         MOV     R1,#0x0
   \   0001F0   EC           MOV     A,R4
   \   0001F1   12....       LCALL   ?XSTACK_DISP101_8
   \   0001F4   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001F7   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0001FA   7406         MOV     A,#0x6
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000202   12....       LCALL   ?XSTACK_DISP102_8
   \   000205   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000208   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   \   00020B   80C5         SJMP    ??zha_project_ProcessInReadRspCmd_28
   1345                                
   1346                                  default:
   1347                                  break;
   1348          
   1349                              }
   1350          
   1351                          }
   1352          
   1353                       }
   1354                
   1355                break;
   1356                case ZCL_CLUSTER_ID_SS_IAS_WD:
   1357                      {
   1358                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_9:
   \   00020D   7E00         MOV     R6,#0x0
   \   00020F   800F         SJMP    ??zha_project_ProcessInReadRspCmd_30
   1359                          {
   1360                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1361                              j=statusRec->data;
   1362                              switch(statusRec->attrID)
   1363                              {
   1364                                  case COMMAND_SS_IAS_WD_START_WARNING:
   1365                                      //zha_project_Warning = *j;
   1366                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1367                                      osal_memset(buf,0,sizeof(buf));
   1368                                      //buf[0] = zha_project_Warning;
   1369                                      //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
   1370                                      break;
   1371                                  case COMMAND_SS_IAS_WD_SQUAWK:
   1372                                      //zha_project_WD_SQUAWK = *j;
   1373                                      //uint16 buf[3];
   1374                                      osal_memset(buf,0,sizeof(buf));
   \                     ??zha_project_ProcessInReadRspCmd_31:
   \   000211                ; Setup parameters for call to function osal_memset
   \   000211   7C06         MOV     R4,#0x6
   \   000213   7D00         MOV     R5,#0x0
   \   000215   7900         MOV     R1,#0x0
   \   000217   740C         MOV     A,#0xc
   \   000219   12....       LCALL   ?XSTACK_DISP101_8
   \   00021C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1375                                     // buf[1] = zha_project_WD_SQUAWK;
   1376                                      //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
   1377                                      break;
   1378          
   1379                                  default:
   1380                                      break;
   1381          
   1382                              }
   \                     ??zha_project_ProcessInReadRspCmd_32:
   \   00021F   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_30:
   \   000220   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000223   4003         JC      $+5
   \   000225   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   \   000228   EE           MOV     A,R6
   \   000229   75F006       MOV     B,#0x6
   \   00022C   12....       LCALL   ?Subroutine21 & 0xFFFF
   1383          
   1384                          }
   1385          
   1386                       }        
   \                     ??CrossCallReturnLabel_43:
   \   00022F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReadRspCm_3`:
   \   000232   0000         DW        0
   \   000234   01           DB        1
   \   000235   ....         DW        ??zha_project_ProcessInReadRspCmd_32
   \   000237   ....         DW        ??zha_project_ProcessInReadRspCmd_31
   \   000239   ....         DW        ??zha_project_ProcessInReadRspCmd_31
   1387                  
   1388                  break;
   1389                
   1390                case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
   1391                 {
   1392                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_6:
   \   00023B   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_33:
   \   00023D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000240   4003         JC      $+5
   \   000242   02....       LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
   1393                          {
   1394                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   000245   12....       LCALL   ?Subroutine8 & 0xFFFF
   1395                              p=(uint16 *)statusRec->data;
   1396                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_82:
   \   000248   7013         JNZ     ??zha_project_ProcessInReadRspCmd_34
   1397                              {
   1398                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1399                                      //zha_project_Temperature_Value = *p;
   1400                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1401                                      osal_memset(buf,0,sizeof(buf));
   \   00024A                ; Setup parameters for call to function osal_memset
   \   00024A   7C06         MOV     R4,#0x6
   \   00024C   7D00         MOV     R5,#0x0
   \   00024E   7900         MOV     R1,#0x0
   \   000250   AA..         MOV     R2,?XSP + 0
   \   000252   AB..         MOV     R3,?XSP + 1
   \   000254   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1402                                      buf[0] = *p;
   \   000257   12....       LCALL   ?Subroutine3 & 0xFFFF
   1403                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_113:
   \   00025A   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1404                                      
   1405                                  break;
   1406                                  default:
   1407                                  break;
   1408          
   1409                              }
   1410          
   1411                          }
   \                     ??zha_project_ProcessInReadRspCmd_34:
   \   00025D   0E           INC     R6
   \   00025E   80DD         SJMP    ??zha_project_ProcessInReadRspCmd_33
   1412          
   1413                       }
   1414                   break;
   1415                  case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1416                     {
   1417                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_3:
   \   000260   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_35:
   \   000262   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000265   5070         JNC     ??zha_project_ProcessInReadRspCmd_10
   1418                          {
   1419                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   000267   12....       LCALL   ?Subroutine8 & 0xFFFF
   1420                              j=statusRec->data;
   1421                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1422                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_83:
   \   00026A   7024         JNZ     ??zha_project_ProcessInReadRspCmd_36
   1423                              {
   1424                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1425                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1426                                      osal_memset(buf,0,sizeof(buf));
   \   00026C                ; Setup parameters for call to function osal_memset
   \   00026C   7C06         MOV     R4,#0x6
   \   00026E   7D00         MOV     R5,#0x0
   \   000270   7900         MOV     R1,#0x0
   \   000272   AA..         MOV     R2,?XSP + 0
   \   000274   AB..         MOV     R3,?XSP + 1
   \   000276   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1427                                      //zha_project_Level_to_Level = *j;
   1428                                      buf[1] = *j;
   \   000279   85..82       MOV     DPL,?V2
   \   00027C   85..83       MOV     DPH,?V3
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   F8           MOV     R0,A
   \   000281   7402         MOV     A,#0x2
   \   000283   12....       LCALL   ?XSTACK_DISP0_8
   \   000286   E8           MOV     A,R0
   \   000287   F0           MOVX    @DPTR,A
   \   000288   A3           INC     DPTR
   \   000289   E4           CLR     A
   \   00028A   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   1429                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_122:
   \   00028D   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1430                                  break;
   1431                                  default:
   1432                                  break;
   1433          
   1434                              }
   1435          
   1436                          }
   \                     ??zha_project_ProcessInReadRspCmd_36:
   \   000290   0E           INC     R6
   \   000291   80CF         SJMP    ??zha_project_ProcessInReadRspCmd_35
   1437          
   1438                       }
   1439              
   1440                  break;
   1441                case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
   1442                     {
   1443                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_7:
   \   000293   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReadRspCmd_37:
   \   000295   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000298   503D         JNC     ??zha_project_ProcessInReadRspCmd_10
   1444                          {
   1445                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \   00029A   12....       LCALL   ?Subroutine8 & 0xFFFF
   1446                              p=(uint16 *)statusRec->data;
   1447                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1448                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_84:
   \   00029D   7013         JNZ     ??zha_project_ProcessInReadRspCmd_38
   1449                              {
   1450                                  case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
   1451                                      //zha_project_Humidity_Value = *p;
   1452                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1453                                      osal_memset(buf,0,sizeof(buf));
   \   00029F                ; Setup parameters for call to function osal_memset
   \   00029F   7C06         MOV     R4,#0x6
   \   0002A1   7D00         MOV     R5,#0x0
   \   0002A3   7900         MOV     R1,#0x0
   \   0002A5   AA..         MOV     R2,?XSP + 0
   \   0002A7   AB..         MOV     R3,?XSP + 1
   \   0002A9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1454                                      buf[0] = *p;
   \   0002AC   12....       LCALL   ?Subroutine3 & 0xFFFF
   1455                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_114:
   \   0002AF   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1456                                      
   1457                                  break;
   1458                                  default:
   1459                                  break;
   1460          
   1461                              }
   1462          
   1463                          }
   \                     ??zha_project_ProcessInReadRspCmd_38:
   \   0002B2   0E           INC     R6
   \   0002B3   80E0         SJMP    ??zha_project_ProcessInReadRspCmd_37
   1464          
   1465                       }     
   1466                  
   1467                  
   1468                  break;   
   1469                case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
   1470                     {
   1471                          for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReadRspCmd_5:
   \   0002B5   7E00         MOV     R6,#0x0
   \   0002B7   8019         SJMP    ??zha_project_ProcessInReadRspCmd_39
   1472                          {
   1473                              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReadRspCmd_40:
   \   0002B9   12....       LCALL   ?Subroutine8 & 0xFFFF
   1474                              p=(uint16 *)statusRec->data;
   1475                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1476                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_85:
   \   0002BC   7013         JNZ     ??zha_project_ProcessInReadRspCmd_41
   1477                              {
   1478                                  case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
   1479                                      //zha_project_Illumiance_Value = *p;
   1480                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1481                                      osal_memset(buf,0,sizeof(buf));
   \   0002BE                ; Setup parameters for call to function osal_memset
   \   0002BE   7C06         MOV     R4,#0x6
   \   0002C0   7D00         MOV     R5,#0x0
   \   0002C2   7900         MOV     R1,#0x0
   \   0002C4   AA..         MOV     R2,?XSP + 0
   \   0002C6   AB..         MOV     R3,?XSP + 1
   \   0002C8   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1482                                      buf[0] = *p;
   \   0002CB   12....       LCALL   ?Subroutine3 & 0xFFFF
   1483                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly

      uint8 i,k;
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1185  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \                     ??CrossCallReturnLabel_115:
   \   0002CE   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1484                                      
   1485                                  break;
   1486                                  default:
   1487                                  break;
   1488          
   1489                              }
   1490          
   1491                          }
   \                     ??zha_project_ProcessInReadRspCmd_41:
   \   0002D1   0E           INC     R6
   \                     ??zha_project_ProcessInReadRspCmd_39:
   \   0002D2   12....       LCALL   ?Subroutine10 & 0xFFFF
   1492          
   1493                       }          
   1494                  
   1495                  
   1496                  break;
   1497                default:
   1498                  break;
   1499              //ReadRspStatus.attrID = readRspCmd->attrList;
   1500              // Notify the originator of the results of the original read attributes 
   1501              // attempt and, for each successfull request, the value of the requested 
   1502              // attribute
   1503          #endif
   1504            }
   \                     ??CrossCallReturnLabel_19:
   \   0002D5   40E2         JC      ??zha_project_ProcessInReadRspCmd_40
   1505          
   1506            
   1507            
   1508            return TRUE; 
   \                     ??zha_project_ProcessInReadRspCmd_10:
   \   0002D7                REQUIRE ?Subroutine2
   \   0002D7                ; // Fall through to label ?Subroutine2
   1509          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7901         MOV     R1,#0x1
   \   000002   742B         MOV     A,#0x2b
   \   000004   12....       LCALL   ?DEALLOC_XSTACK8
   \   000007   7F0C         MOV     R7,#0xc
   \   000009   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   AC..         MOV     R4,?V2
   \   000002   AD..         MOV     R5,?V3
   \   000004                REQUIRE ??Subroutine37_0
   \   000004                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006                REQUIRE ??Subroutine38_0
   \   000006                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   F5..         MOV     ?V4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V5,A
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV     A,R6
   \   000001   75F006       MOV     B,#0x6
   \   000004   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F5..         MOV     ?V3,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E5..         MOV     A,?V10
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V11
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V4,A
   \   00000E   78..         MOV     R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   A882         MOV     R0,DPL
   \   000005   A983         MOV     R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   6420         XRL     A,#0x20
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F5..         MOV     ?V5,A
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V1
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   E4           CLR     A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   6407         XRL     A,#0x7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000009   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8A..         MOV     ?V10,R2
   \   000002   8B..         MOV     ?V11,R3
   \   000004   EA           MOV     A,R2
   \   000005   2417         ADD     A,#0x17
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   35..         ADDC    A,?V11
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V1,A
   \   000015   EA           MOV     A,R2
   \   000016   240A         ADD     A,#0xa
   \   000018   F5..         MOV     ?V8,A
   \   00001A   E4           CLR     A
   \   00001B   35..         ADDC    A,?V11
   \   00001D   F5..         MOV     ?V9,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V2,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V3,A
   \   000032   78..         MOV     R0,#?V2
   \   000034   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000006                REQUIRE ??Subroutine42_0
   \   000006                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   7D00         MOV     R5,#0x0
   \   000004   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006                REQUIRE ??Subroutine43_0
   \   000006                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   EE           MOV     A,R6
   \   000009   C3           CLR     C
   \   00000A   98           SUBB    A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000005                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000005                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000005                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000005   7406         MOV     A,#0x6
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000009                REQUIRE ??Subroutine44_0
   \   000009                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine45_0
   \   000004                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus3
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus3
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus1
   \   000001                ; Setup parameters for call to function UpdateDeviceStatus2
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine46_0
   \   000006                ; // Fall through to label ??Subroutine46_0
   1510          #endif // ZCL_READ
   1511          
   1512          #ifdef ZCL_WRITE
   1513          /*********************************************************************
   1514           * @fn      zha_project_ProcessInWriteRspCmd
   1515           *
   1516           * @brief   Process the "Profile" Write Response Command
   1517           *
   1518           * @param   pInMsg - incoming message to process
   1519           *
   1520           * @return  none
   1521           */
   1522          static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1523          {
   1524            zclWriteRspCmd_t *writeRspCmd;
   1525            uint8 i;
   1526          
   1527            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1528            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1529            {
   1530              // Notify the device of the results of the its original write attributes
   1531              // command.
   1532            }
   1533          
   1534            return ( TRUE );
   1535          }
   1536          #endif // ZCL_WRITE
   1537          
   1538          
   1539          #ifdef ZCL_REPORT
   1540          /*********************************************************************
   1541           * @fn      zha_project_ProcessInReportCmd
   1542           *
   1543           * @brief   Process the "Profile" Read Response Command
   1544           *
   1545           * @param   pInMsg - incoming message to process
   1546           *
   1547           * @return  none
   1548           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1549          static uint8 zha_project_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zha_project_ProcessInReportCmd:
   1550          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 43
   \   000005   74D5         MOV     A,#-0x2b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   1551              zclReportCmd_t *reportRspCmd;
   1552              uint8 i,k;
   1553              uint8 *j;
   1554              uint16 *p;
   1555              reportRspCmd = (zclReportCmd_t *)pInMsg->attrCmd; 
   1556              switch(pInMsg->clusterId)
   \                     ??CrossCallReturnLabel_31:
   \   00000D   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessInReportCmd_0`:
   \   000010   0000         DW        0
   \   000012   0A00         DW        10
   \   000014   0000         DW        0
   \   000016   ....         DW        ??zha_project_ProcessInReportCmd_0
   \   000018   0100         DW        1
   \   00001A   ....         DW        ??zha_project_ProcessInReportCmd_1
   \   00001C   0600         DW        6
   \   00001E   ....         DW        ??zha_project_ProcessInReportCmd_2
   \   000020   0800         DW        8
   \   000022   ....         DW        ??zha_project_ProcessInReportCmd_3
   \   000024   0003         DW        768
   \   000026   ....         DW        ??zha_project_ProcessInReportCmd_4
   \   000028   0004         DW        1024
   \   00002A   ....         DW        ??zha_project_ProcessInReportCmd_5
   \   00002C   0204         DW        1026
   \   00002E   ....         DW        ??zha_project_ProcessInReportCmd_6
   \   000030   0504         DW        1029
   \   000032   ....         DW        ??zha_project_ProcessInReportCmd_7
   \   000034   0005         DW        1280
   \   000036   ....         DW        ??zha_project_ProcessInReportCmd_8
   \   000038   0205         DW        1282
   \   00003A   ....         DW        ??zha_project_ProcessInReportCmd_9
   \   00003C   ....         DW        ??zha_project_ProcessInReportCmd_10
   1557              {
   1558          #if ZG_BUILD_COORDINATOR_TYPE      
   1559                case ZCL_CLUSTER_ID_GEN_BASIC:
   1560                  {
   1561                    for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_0:
   \   00003E   7E00         MOV     R6,#0x0
   \   000040   800D         SJMP    ??zha_project_ProcessInReportCmd_11
   1562                    {
   1563                          zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   1564                          j=statusRec->attrData;
   1565                          switch(statusRec->attrID)
   1566                          {
   1567                              case ATTRID_BASIC_POWER_SOURCE:
   1568                                  uint8 zha_project_PowerSource=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1569                                  break;
   1570          //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
   1571          //                        zha_project_BatteryVoltage=*j;
   1572          //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
   1573          //                        break;
   1574                              case ATTRID_BASIC_ZCL_VERSION:
   1575                                  break;
   1576                              case ATTRID_BASIC_MODEL_ID:
   1577                                  break;
   1578                              case ATTRID_BASIC_MANUFACTURER_NAME:
   1579                                  SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
                                         ^
Warning[Pe223]: function "SetTempDeviceManuName" declared implicitly
   1580                                  break;
   1581                              case ATTRID_BASIC_HW_VERSION:
   1582                                  uint8 zha_project_HWRevision = *j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1583                                  SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zha_project_HWRevision);
                                         ^
Warning[Pe223]: function "SetTempDeviceHW" declared implicitly

                          uint8 zha_project_PowerSource=*j;
                                ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1568  Warning[Pe177]: 
          variable "zha_project_PowerSource" was declared but never referenced

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1565  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zha_project_PowerSource" (declared at line 1568 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
            variable "zha_project_HWRevision" (declared at line 1582 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \                     ??zha_project_ProcessInReportCmd_12:
   \   000042                ; Setup parameters for call to function SetTempDeviceHW
   \   000042   85..82       MOV     DPL,?V2
   \   000045   85..83       MOV     DPH,?V3
   \   000048   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00004B   12....       LCALL   `??SetTempDeviceHW::?relay`; Banked call to: SetTempDeviceHW
   1584                                  break;                        
   \                     ??zha_project_ProcessInReportCmd_13:
   \   00004E   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_11:
   \   00004F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   \   000057   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00005A   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00005D   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReportCmd_1`:
   \   000060   0300         DW        3
   \   000062   01           DB        1
   \   000063   ....         DW        ??zha_project_ProcessInReportCmd_13
   \   000065   ....         DW        ??zha_project_ProcessInReportCmd_12
   \   000067   ....         DW        ??zha_project_ProcessInReportCmd_14
   \                     ??zha_project_ProcessInReportCmd_14:
   \   000069                ; Setup parameters for call to function SetTempDeviceManuName
   \   000069   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00006C   12....       LCALL   `??SetTempDeviceManuName::?relay`; Banked call to: SetTempDeviceManuName
   \   00006F   80DD         SJMP    ??zha_project_ProcessInReportCmd_13
   1585                              default:
   1586                                break;
   1587                          
   1588                          }
   1589          
   1590                    }
   1591                  }
   1592                  //osal_set_event( zha_project_TaskID,ZHA_ATTRIBUTE_POWER_EVT);
   1593                  
   1594                  break;
   1595                  
   1596                case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1597                  {
   1598                    for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_1:
   \   000071   7E00         MOV     R6,#0x0
   \   000073   8018         SJMP    ??zha_project_ProcessInReportCmd_15
   1599                    {
   1600                          zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReportCmd_16:
   \   000075   EE           MOV     A,R6
   \   000076   75F005       MOV     B,#0x5
   \   000079   12....       LCALL   ?Subroutine23 & 0xFFFF
   1601                          j=statusRec->attrData;
   1602                          switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_48:
   \   00007C   7002         JNZ     ??zha_project_ProcessInReportCmd_17
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReportCmd_17:
   \   000080   700A         JNZ     ??zha_project_ProcessInReportCmd_18
   1603                          {
   1604                              case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
   1605                                  uint8 zha_project_BatteryVoltage=*j;
                                         ^
Warning[Pe1072]: a declaration cannot have a label
   1606                                  SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
                                         ^
Warning[Pe223]: function "SetTempDeviceBAT" declared implicitly

                  switch(statusRec->attrID)
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1602  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "zha_project_BatteryVoltage" (declared at line 1605 of
                      "C:\Texas Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")
   \   000082                ; Setup parameters for call to function SetTempDeviceBAT
   \   000082   8882         MOV     DPL,R0
   \   000084   8983         MOV     DPH,R1
   \   000086   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000089   12....       LCALL   `??SetTempDeviceBAT::?relay`; Banked call to: SetTempDeviceBAT
   1607                                  break;
   1608                              default:
   1609                                break;
   1610                          
   1611                          }
   1612          
   1613                    }
   \                     ??zha_project_ProcessInReportCmd_18:
   \   00008C   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_15:
   \   00008D   12....       LCALL   ?Subroutine10 & 0xFFFF
   1614                
   1615                  }        
   \                     ??CrossCallReturnLabel_21:
   \   000090   40E3         JC      ??zha_project_ProcessInReportCmd_16
   1616                  
   1617                  
   1618                  osal_set_event( zha_project_TaskID, ZHA_ACTIVE_EP_EVT );
   \   000092                ; Setup parameters for call to function osal_set_event
   \   000092   7A08         MOV     R2,#0x8
   \   000094   7B00         MOV     R3,#0x0
   \   000096   90....       MOV     DPTR,#zha_project_TaskID
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1619                  break;
   \   00009E   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   1620                case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1621                  {
   1622                    for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_2:
   \   0000A1   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_19:
   \   0000A3   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A6   4003         JC      $+5
   \   0000A8   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   1623                    {
   1624                      zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   0000AB   12....       LCALL   ?Subroutine24 & 0xFFFF
   1625                      j=statusRec->attrData;
   \                     ??CrossCallReturnLabel_96:
   \   0000AE   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1626                      switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_86:
   \   0000B1   7016         JNZ     ??zha_project_ProcessInReportCmd_20
   1627                      {
   1628                          case ATTRID_ON_OFF:
   1629                              uint16 buf[3];
                                     ^
Warning[Pe1072]: a declaration cannot have a label
   1630                              osal_memset(buf,0,sizeof(buf));
   \   0000B3                ; Setup parameters for call to function osal_memset
   \   0000B3   7C06         MOV     R4,#0x6
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   7900         MOV     R1,#0x0
   \   0000B9   AA..         MOV     R2,?XSP + 0
   \   0000BB   AB..         MOV     R3,?XSP + 1
   \   0000BD   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1631                              buf[0] = *j;
   \   0000C0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000C3   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   1632                              UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                     ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_123:
   \   0000C6   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1633                            break;
   1634                          default:
   1635                            break;
   1636                      }
   1637          
   1638                    }
   \                     ??zha_project_ProcessInReportCmd_20:
   \   0000C9   0E           INC     R6
   \   0000CA   80D7         SJMP    ??zha_project_ProcessInReportCmd_19
   1639                
   1640                  }
   1641                  break;
   1642                  case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
   1643                      {
   1644                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_4:
   \   0000CC   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_21:
   \   0000CE   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000D1   4003         JC      $+5
   \   0000D3   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   1645                          {
   1646                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   0000D6   12....       LCALL   ?Subroutine24 & 0xFFFF
   1647                              p=(uint16 *)statusRec->attrData;
   \                     ??CrossCallReturnLabel_97:
   \   0000D9   12....       LCALL   ?Subroutine15 & 0xFFFF
   1648                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1649                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_38:
   \   0000DC   7002         JNZ     ??zha_project_ProcessInReportCmd_22
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \                     ??zha_project_ProcessInReportCmd_22:
   \   0000E0   701B         JNZ     ??zha_project_ProcessInReportCmd_23
   1650                              {
   1651                                  case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
   1652                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1653                                      osal_memset(buf,0,sizeof(buf));
   \   0000E2                ; Setup parameters for call to function osal_memset
   \   0000E2   7C06         MOV     R4,#0x6
   \   0000E4   7D00         MOV     R5,#0x0
   \   0000E6   7900         MOV     R1,#0x0
   \   0000E8   AA..         MOV     R2,?XSP + 0
   \   0000EA   AB..         MOV     R3,?XSP + 1
   \   0000EC   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1654                                      buf[2] = *p;
   \   0000EF   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000F2   7404         MOV     A,#0x4
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   1655                                      UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus3" declared implicitly
   \                     ??CrossCallReturnLabel_120:
   \   0000FA   12....       LCALL   `??UpdateDeviceStatus3::?relay`; Banked call to: UpdateDeviceStatus3
   1656                                  break;
   1657                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
   1658                                      //zha_project_HUE_Status = *p;
   1659                                    break;
   1660                                  case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
   1661                                      //zha_project_Saturation = *p;                        
   1662                                    break;
   1663                                  default:
   1664                                  break;
   1665          
   1666                              }
   1667          
   1668                          }
   \                     ??zha_project_ProcessInReportCmd_23:
   \   0000FD   0E           INC     R6
   \   0000FE   80CE         SJMP    ??zha_project_ProcessInReportCmd_21
   1669          
   1670                       }
   1671              
   1672                  break;
   1673                  case ZCL_CLUSTER_ID_SS_IAS_ZONE:
   1674                 {        uint16 supportOD = 0;
   1675                          uint8 sensorType = 0;
   1676                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_8:
   \   000100   7E00         MOV     R6,#0x0
   \   000102   02....       LJMP    ??zha_project_ProcessInReportCmd_24 & 0xFFFF
   1677                          {
   1678                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   1679                              p=(uint16 *)statusRec->attrData;
   1680                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1681                              switch(statusRec->attrID)
   1682                              {
   1683                                  case ATTRID_SS_IAS_ZONE_STATUS:
   1684                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1685                                      osal_memset(buf,0,sizeof(buf));
   1686                                      buf[0] = *p;
   1687                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   1688                                  break;
   1689                                  case ATTRID_SS_IAS_ZONE_TYPE:
   1690                                      zAddrType_t addr;
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1691                                      uint8 address[8];
   1692                                      uint8 pValue[Z_EXTADDR_LEN];
   1693                                      addr.addrMode = Addr64Bit;
   \                     ??zha_project_ProcessInReportCmd_25:
   \   000105   742A         MOV     A,#0x2a
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   7403         MOV     A,#0x3
   \   00010C   F0           MOVX    @DPTR,A
   1694                                      osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
   \   00010D                ; Setup parameters for call to function osal_nv_read
   \   00010D   7412         MOV     A,#0x12
   \   00010F   12....       LCALL   ?XSTACK_DISP100_8
   \   000112   88..         MOV     ?V4,R0
   \   000114   89..         MOV     ?V5,R1
   \   000116   78..         MOV     R0,#?V4
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   75..08       MOV     ?V4,#0x8
   \   00011E   75..00       MOV     ?V5,#0x0
   \   000121   78..         MOV     R0,#?V4
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   7C00         MOV     R4,#0x0
   \   000128   7D00         MOV     R5,#0x0
   \   00012A   7A01         MOV     R2,#0x1
   \   00012C   7B00         MOV     R3,#0x0
   \   00012E   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000131   7404         MOV     A,#0x4
   \   000133   12....       LCALL   ?DEALLOC_XSTACK8
   1695                                      //osal_memcpy(pValue,addr.addr.extAddr,8);
   1696                                      osal_memcpy(addr.addr.extAddr,pValue,8);
   \   000136                ; Setup parameters for call to function osal_memcpy
   \   000136   7412         MOV     A,#0x12
   \   000138   12....       LCALL   ?XSTACK_DISP100_8
   \   00013B   88..         MOV     ?V4,R0
   \   00013D   89..         MOV     ?V5,R1
   \   00013F   75..00       MOV     ?V6,#0x0
   \   000142   78..         MOV     R0,#?V4
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000147   7C08         MOV     R4,#0x8
   \   000149   7D00         MOV     R5,#0x0
   \   00014B   7425         MOV     A,#0x25
   \   00014D   12....       LCALL   ?XSTACK_DISP101_8
   \   000150   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000153   7403         MOV     A,#0x3
   \   000155   12....       LCALL   ?DEALLOC_XSTACK8
   1697                                      //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
   1698                                      APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
   \   000158                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000158   741A         MOV     A,#0x1a
   \   00015A   12....       LCALL   ?XSTACK_DISP102_8
   \   00015D   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000160   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   1699                                      ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
   1700                                                             1,
   1701                                                             0x0020,
   1702                                                             &addr,  pInMsg->endPoint,
   1703                                                              FALSE );
   \   000163                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000163   75..00       MOV     ?V4,#0x0
   \   000166   78..         MOV     R0,#?V4
   \   000168   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000171   7424         MOV     A,#0x24
   \   000173   12....       LCALL   ?XSTACK_DISP100_8
   \   000176   88..         MOV     ?V4,R0
   \   000178   89..         MOV     ?V5,R1
   \   00017A   78..         MOV     R0,#?V4
   \   00017C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017F   75..20       MOV     ?V4,#0x20
   \   000182   75..00       MOV     ?V5,#0x0
   \   000185   78..         MOV     R0,#?V4
   \   000187   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018A   7420         MOV     A,#0x20
   \   00018C   12....       LCALL   ?XSTACK_DISP100_8
   \   00018F   88..         MOV     ?V4,R0
   \   000191   89..         MOV     ?V5,R1
   \   000193   78..         MOV     R0,#?V4
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   7901         MOV     R1,#0x1
   \   00019A   7C..         MOV     R4,#dstAddr & 0xff
   \   00019C   7D..         MOV     R5,#(dstAddr >> 8) & 0xff
   \   00019E   7A21         MOV     R2,#0x21
   \   0001A0   7B00         MOV     R3,#0x0
   \   0001A2   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001A5   7408         MOV     A,#0x8
   \   0001A7   12....       LCALL   ?DEALLOC_XSTACK8
   1704                                      //zha_project_Smoke_Type = *p;
   1705                                      //uint16 buf[3];
   1706                                      osal_memset(buf,0,sizeof(buf));
   \   0001AA                ; Setup parameters for call to function osal_memset
   \   0001AA   7C06         MOV     R4,#0x6
   \   0001AC   7D00         MOV     R5,#0x0
   \   0001AE   7900         MOV     R1,#0x0
   \   0001B0   EC           MOV     A,R4
   \   0001B1   12....       LCALL   ?XSTACK_DISP101_8
   \   0001B4   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1707                                      buf[1] = *p;
   \   0001B7   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0001BA   7408         MOV     A,#0x8
   \   0001BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BF   12....       LCALL   ?Subroutine6 & 0xFFFF
   1708                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_8:
   \   0001C2   12....       LCALL   ?XSTACK_DISP102_8
   \   0001C5   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0001C8   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1709                                      //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zha_project_Smoke_Type,0,false,0);
   1710                                      SetTempDeviceType(pInMsg->srcAddr.addr.shortAddr,*p);
                                             ^
Warning[Pe223]: function "SetTempDeviceType" declared implicitly

         {        uint16 supportOD = 0;
                         ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1674  Warning[Pe177]: 
          variable "supportOD" was declared but never referenced

                  uint8 sensorType = 0;
                        ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1675  Warning[Pe177]: 
          variable "sensorType" was declared but never referenced
   \   0001CB                ; Setup parameters for call to function SetTempDeviceType
   \   0001CB   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0001CE   12....       LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
   1711                                   break;
   \                     ??zha_project_ProcessInReportCmd_26:
   \   0001D1   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_24:
   \   0001D2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001D5   4003         JC      $+5
   \   0001D7   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   \   0001DA   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0001DD   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0001E0   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReportCmd_2`:
   \   0001E3   0100         DW        1
   \   0001E5   01           DB        1
   \   0001E6   ....         DW        ??zha_project_ProcessInReportCmd_26
   \   0001E8   ....         DW        ??zha_project_ProcessInReportCmd_25
   \   0001EA   ....         DW        ??zha_project_ProcessInReportCmd_27
   \                     ??zha_project_ProcessInReportCmd_27:
   \   0001EC                ; Setup parameters for call to function osal_memset
   \   0001EC   7C06         MOV     R4,#0x6
   \   0001EE   7D00         MOV     R5,#0x0
   \   0001F0   7900         MOV     R1,#0x0
   \   0001F2   EC           MOV     A,R4
   \   0001F3   12....       LCALL   ?XSTACK_DISP101_8
   \   0001F6   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001F9   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0001FC   7406         MOV     A,#0x6
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000204   12....       LCALL   ?XSTACK_DISP102_8
   \   000207   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00020A   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   \   00020D   80C2         SJMP    ??zha_project_ProcessInReportCmd_26
   1712                                
   1713                                  default:
   1714                                  break;
   1715          
   1716                              }
   1717          
   1718                          }
   1719          
   1720                       }
   1721                
   1722                break;
   1723                case ZCL_CLUSTER_ID_SS_IAS_WD:
   1724                      {
   1725                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_9:
   \   00020F   7E00         MOV     R6,#0x0
   \   000211   800F         SJMP    ??zha_project_ProcessInReportCmd_28
   1726                          {
   1727                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   1728                              j=statusRec->attrData;
   1729                              switch(statusRec->attrID)
   1730                              {
   1731                                  case COMMAND_SS_IAS_WD_START_WARNING:
   1732                                      //zha_project_Warning = *j;
   1733                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1734                                      osal_memset(buf,0,sizeof(buf));
   1735                                      //buf[0] = zha_project_Warning;
   1736                                      //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
   1737                                      break;
   1738                                  case COMMAND_SS_IAS_WD_SQUAWK:
   1739                                      //zha_project_WD_SQUAWK = *j;
   1740                                      //uint16 buf[3];
   1741                                      osal_memset(buf,0,sizeof(buf));
   \                     ??zha_project_ProcessInReportCmd_29:
   \   000213                ; Setup parameters for call to function osal_memset
   \   000213   7C06         MOV     R4,#0x6
   \   000215   7D00         MOV     R5,#0x0
   \   000217   7900         MOV     R1,#0x0
   \   000219   740C         MOV     A,#0xc
   \   00021B   12....       LCALL   ?XSTACK_DISP101_8
   \   00021E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1742                                     // buf[1] = zha_project_WD_SQUAWK;
   1743                                      //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
   1744                                      break;
   1745          
   1746                                  default:
   1747                                      break;
   1748          
   1749                              }
   \                     ??zha_project_ProcessInReportCmd_30:
   \   000221   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_28:
   \   000222   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000225   4003         JC      $+5
   \   000227   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   \   00022A   EE           MOV     A,R6
   \   00022B   75F005       MOV     B,#0x5
   \   00022E   12....       LCALL   ?Subroutine21 & 0xFFFF
   1750          
   1751                          }
   1752          
   1753                       }        
   \                     ??CrossCallReturnLabel_44:
   \   000231   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zha_project_ProcessInReportCmd_3`:
   \   000234   0000         DW        0
   \   000236   01           DB        1
   \   000237   ....         DW        ??zha_project_ProcessInReportCmd_30
   \   000239   ....         DW        ??zha_project_ProcessInReportCmd_29
   \   00023B   ....         DW        ??zha_project_ProcessInReportCmd_29
   1754                  
   1755                  break;
   1756                
   1757                case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
   1758                 {
   1759                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_6:
   \   00023D   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_31:
   \   00023F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000242   4003         JC      $+5
   \   000244   02....       LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
   1760                          {
   1761                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   000247   12....       LCALL   ?Subroutine24 & 0xFFFF
   1762                              p=(uint16 *)statusRec->attrData;
   \                     ??CrossCallReturnLabel_99:
   \   00024A   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1763                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_87:
   \   00024D   7013         JNZ     ??zha_project_ProcessInReportCmd_32
   1764                              {
   1765                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1766                                      //zha_project_Temperature_Value = *p;
   1767                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1768                                      osal_memset(buf,0,sizeof(buf));
   \   00024F                ; Setup parameters for call to function osal_memset
   \   00024F   7C06         MOV     R4,#0x6
   \   000251   7D00         MOV     R5,#0x0
   \   000253   7900         MOV     R1,#0x0
   \   000255   AA..         MOV     R2,?XSP + 0
   \   000257   AB..         MOV     R3,?XSP + 1
   \   000259   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1769                                      buf[0] = *p;
   \   00025C   12....       LCALL   ?Subroutine3 & 0xFFFF
   1770                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_116:
   \   00025F   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1771                                      
   1772                                  break;
   1773                                  default:
   1774                                  break;
   1775          
   1776                              }
   1777          
   1778                          }
   \                     ??zha_project_ProcessInReportCmd_32:
   \   000262   0E           INC     R6
   \   000263   80DA         SJMP    ??zha_project_ProcessInReportCmd_31
   1779          
   1780                       }
   1781                   break;
   1782                  case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1783                     {
   1784                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_3:
   \   000265   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_33:
   \   000267   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00026A   5079         JNC     ??zha_project_ProcessInReportCmd_10
   1785                          {
   1786                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   00026C   12....       LCALL   ?Subroutine24 & 0xFFFF
   1787                              j=statusRec->attrData;
   \                     ??CrossCallReturnLabel_100:
   \   00026F   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1788                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1789                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_88:
   \   000272   7024         JNZ     ??zha_project_ProcessInReportCmd_34
   1790                              {
   1791                                  case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
   1792                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1793                                      osal_memset(buf,0,sizeof(buf));
   \   000274                ; Setup parameters for call to function osal_memset
   \   000274   7C06         MOV     R4,#0x6
   \   000276   7D00         MOV     R5,#0x0
   \   000278   7900         MOV     R1,#0x0
   \   00027A   AA..         MOV     R2,?XSP + 0
   \   00027C   AB..         MOV     R3,?XSP + 1
   \   00027E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1794                                      //zha_project_Level_to_Level = *j;
   1795                                      buf[1] = *j;
   \   000281   85..82       MOV     DPL,?V2
   \   000284   85..83       MOV     DPH,?V3
   \   000287   E0           MOVX    A,@DPTR
   \   000288   F8           MOV     R0,A
   \   000289   7402         MOV     A,#0x2
   \   00028B   12....       LCALL   ?XSTACK_DISP0_8
   \   00028E   E8           MOV     A,R0
   \   00028F   F0           MOVX    @DPTR,A
   \   000290   A3           INC     DPTR
   \   000291   E4           CLR     A
   \   000292   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   1796                                      UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus2" declared implicitly
   \                     ??CrossCallReturnLabel_124:
   \   000295   12....       LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
   1797                                  break;
   1798                                  default:
   1799                                  break;
   1800          
   1801                              }
   1802          
   1803                          }
   \                     ??zha_project_ProcessInReportCmd_34:
   \   000298   0E           INC     R6
   \   000299   80CC         SJMP    ??zha_project_ProcessInReportCmd_33
   1804          
   1805                       }
   1806              
   1807                  break;
   1808                case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
   1809                     {
   1810                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_7:
   \   00029B   7E00         MOV     R6,#0x0
   \                     ??zha_project_ProcessInReportCmd_35:
   \   00029D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0002A0   5043         JNC     ??zha_project_ProcessInReportCmd_10
   1811                          {
   1812                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \   0002A2   12....       LCALL   ?Subroutine24 & 0xFFFF
   1813                              p=(uint16 *)statusRec->attrData;
   \                     ??CrossCallReturnLabel_101:
   \   0002A5   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1814                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1815                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_89:
   \   0002A8   7013         JNZ     ??zha_project_ProcessInReportCmd_36
   1816                              {
   1817                                  case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
   1818                                      //zha_project_Humidity_Value = *p;
   1819                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1820                                      osal_memset(buf,0,sizeof(buf));
   \   0002AA                ; Setup parameters for call to function osal_memset
   \   0002AA   7C06         MOV     R4,#0x6
   \   0002AC   7D00         MOV     R5,#0x0
   \   0002AE   7900         MOV     R1,#0x0
   \   0002B0   AA..         MOV     R2,?XSP + 0
   \   0002B2   AB..         MOV     R3,?XSP + 1
   \   0002B4   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1821                                      buf[0] = *p;
   \   0002B7   12....       LCALL   ?Subroutine3 & 0xFFFF
   1822                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly
   \                     ??CrossCallReturnLabel_117:
   \   0002BA   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1823                                      
   1824                                  break;
   1825                                  default:
   1826                                  break;
   1827          
   1828                              }
   1829          
   1830                          }
   \                     ??zha_project_ProcessInReportCmd_36:
   \   0002BD   0E           INC     R6
   \   0002BE   80DD         SJMP    ??zha_project_ProcessInReportCmd_35
   1831          
   1832                       }     
   1833                  
   1834                  
   1835                  break;   
   1836                case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
   1837                     {
   1838                          for (i = 0; i < reportRspCmd->numAttr; i++)
   \                     ??zha_project_ProcessInReportCmd_5:
   \   0002C0   7E00         MOV     R6,#0x0
   \   0002C2   801C         SJMP    ??zha_project_ProcessInReportCmd_37
   1839                          {
   1840                              zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
   \                     ??zha_project_ProcessInReportCmd_38:
   \   0002C4   12....       LCALL   ?Subroutine24 & 0xFFFF
   1841                              p=(uint16 *)statusRec->attrData;
   \                     ??CrossCallReturnLabel_102:
   \   0002C7   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1842                              //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
   1843                              switch(statusRec->attrID)
   \                     ??CrossCallReturnLabel_90:
   \   0002CA   7013         JNZ     ??zha_project_ProcessInReportCmd_39
   1844                              {
   1845                                  case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
   1846                                      //zha_project_Illumiance_Value = *p;
   1847                                      uint16 buf[3];
                                             ^
Warning[Pe1072]: a declaration cannot have a label
   1848                                      osal_memset(buf,0,sizeof(buf));
   \   0002CC                ; Setup parameters for call to function osal_memset
   \   0002CC   7C06         MOV     R4,#0x6
   \   0002CE   7D00         MOV     R5,#0x0
   \   0002D0   7900         MOV     R1,#0x0
   \   0002D2   AA..         MOV     R2,?XSP + 0
   \   0002D4   AB..         MOV     R3,?XSP + 1
   \   0002D6   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1849                                      buf[0] = *p;
   \   0002D9   12....       LCALL   ?Subroutine3 & 0xFFFF
   1850                                      UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
                                             ^
Warning[Pe223]: function "UpdateDeviceStatus1" declared implicitly

      uint8 i,k;
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1552  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \                     ??CrossCallReturnLabel_118:
   \   0002DC   12....       LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
   1851                                      
   1852                                  break;
   1853                                  default:
   1854                                  break;
   1855          
   1856                              }
   1857          
   1858                          }
   \                     ??zha_project_ProcessInReportCmd_39:
   \   0002DF   0E           INC     R6
   \                     ??zha_project_ProcessInReportCmd_37:
   \   0002E0   12....       LCALL   ?Subroutine10 & 0xFFFF
   1859          
   1860                       }          
   1861                  
   1862                  
   1863                  break;
   1864                default:
   1865                  break;
   1866              //ReadRspStatus.attrID = readRspCmd->attrList;
   1867              // Notify the originator of the results of the original read attributes 
   1868              // attempt and, for each successfull request, the value of the requested 
   1869              // attribute
   1870          #endif
   1871              }
   \                     ??CrossCallReturnLabel_29:
   \   0002E3   40DF         JC      ??zha_project_ProcessInReportCmd_38
   1872          
   1873            
   1874            
   1875            return TRUE; 
   \                     ??zha_project_ProcessInReportCmd_10:
   \   0002E5   02....       LJMP    ?Subroutine2 & 0xFFFF
   1876          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EE           MOV     A,R6
   \   000001   75F005       MOV     B,#0x5
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0
   1877          #endif
   1878          /*********************************************************************
   1879           * @fn      zha_project_ProcessInDefaultRspCmd
   1880           *
   1881           * @brief   Process the "Profile" Default Response Command
   1882           *
   1883           * @param   pInMsg - incoming message to process
   1884           *
   1885           * @return  none
   1886           */
   1887          static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1888          {
   1889            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1890          
   1891            // Device is notified of the Default Response command.
   1892            (void)pInMsg;
   1893          
   1894            return ( TRUE );
   1895          }
   1896          
   1897          #ifdef ZCL_DISCOVER
   1898          /*********************************************************************
   1899           * @fn      zha_project_ProcessInDiscCmdsRspCmd
   1900           *
   1901           * @brief   Process the Discover Commands Response Command
   1902           *
   1903           * @param   pInMsg - incoming message to process
   1904           *
   1905           * @return  none
   1906           */
   1907          static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1908          {
   1909            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1910            uint8 i;
   1911          
   1912            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1913            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1914            {
   1915              // Device is notified of the result of its attribute discovery command.
   1916            }
   1917          
   1918            return ( TRUE );
   1919          }
   1920          
   1921          /*********************************************************************
   1922           * @fn      zha_project_ProcessInDiscAttrsRspCmd
   1923           *
   1924           * @brief   Process the "Profile" Discover Attributes Response Command
   1925           *
   1926           * @param   pInMsg - incoming message to process
   1927           *
   1928           * @return  none
   1929           */
   1930          static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1931          {
   1932            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1933            uint8 i;
   1934          
   1935            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1936            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1937            {
   1938              // Device is notified of the result of its attribute discovery command.
   1939            }
   1940          
   1941            return ( TRUE );
   1942          }
   1943          
   1944          /*********************************************************************
   1945           * @fn      zha_project_ProcessInDiscAttrsExtRspCmd
   1946           *
   1947           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1948           *
   1949           * @param   pInMsg - incoming message to process
   1950           *
   1951           * @return  none
   1952           */
   1953          static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1954          {
   1955            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1956            uint8 i;
   1957          
   1958            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1959            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1960            {
   1961              // Device is notified of the result of its attribute discovery command.
   1962            }
   1963          
   1964            return ( TRUE );
   1965          }
   1966          #endif // ZCL_DISCOVER
   1967          
   1968          #if ZCL_EZMODE
   1969          /*********************************************************************
   1970           * @fn      zha_project_ProcessZDOMsgs
   1971           *
   1972           * @brief   Called when this node receives a ZDO/ZDP response.
   1973           *
   1974           * @param   none
   1975           *
   1976           * @return  status
   1977           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1978          static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   \                     zha_project_ProcessZDOMsgs:
   1979          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1980            zclEZMode_ActionData_t data;
   1981            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1982          
   1983            // Let EZ-Mode know of the Simple Descriptor Response
   1984              ZDO_DeviceAnnce_t devAnnce;
   1985              zAddrType_t addr;
   1986              afAddrType_t destAddr;
   1987              uint8 *pData;
   1988              uint8 address[8];
   1989              uint8 i;
   1990              uint8 pValue[Z_EXTADDR_LEN];
   1991              uint8 pValue1[Z_EXTADDR_LEN];
   1992              switch ( pMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zha_project_ProcessZDOMsgs>_0`:
   \   000023   0000         DW        0
   \   000025   0600         DW        6
   \   000027   1300         DW        19
   \   000029   ....         DW        ??zha_project_ProcessZDOMsgs_0
   \   00002B   0480         DW        32772
   \   00002D   ....         DW        ??zha_project_ProcessZDOMsgs_1
   \   00002F   0580         DW        32773
   \   000031   ....         DW        ??zha_project_ProcessZDOMsgs_2
   \   000033   0680         DW        32774
   \   000035   ....         DW        ??zha_project_ProcessZDOMsgs_3
   \   000037   2080         DW        32800
   \   000039   ....         DW        ??zha_project_ProcessZDOMsgs_4
   \   00003B   2180         DW        32801
   \   00003D   ....         DW        ??zha_project_ProcessZDOMsgs_5
   \   00003F   ....         DW        ??zha_project_ProcessZDOMsgs_6
   1993              {
   1994                  case End_Device_Bind_rsp:
   1995                  {
   1996                      if ( ZDO_ParseBindRsp( pMsg ) == ZSuccess )
   \                     ??zha_project_ProcessZDOMsgs_4:
   \   000041   EE           MOV     A,R6
   \   000042   2413         ADD     A,#0x13
   \   000044   F582         MOV     DPL,A
   \   000046   E4           CLR     A
   \   000047   3F           ADDC    A,R7
   \   000048   F583         MOV     DPH,A
   \   00004A   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   7004         JNZ     ??zha_project_ProcessZDOMsgs_7
   1997                      {
   1998          
   1999                      // Light LED
   2000                      //HalUARTWrite(HAL_UART_PORT_0,"Bind established",sizeof("Bind established"));
   2001                          HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000050                ; Setup parameters for call to function HalLedSet
   \   000050   7A01         MOV     R2,#0x1
   \   000052   8002         SJMP    ??zha_project_ProcessZDOMsgs_8
   2002                      }
   2003                      #if defined( BLINK_LEDS )
   2004                      else
   2005                      {
   2006                      // Flash LED to show failure
   2007                          HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??zha_project_ProcessZDOMsgs_7:
   \   000054                ; Setup parameters for call to function HalLedSet
   \   000054   7A04         MOV     R2,#0x4
   \                     ??zha_project_ProcessZDOMsgs_8:
   \   000056   7908         MOV     R1,#0x8
   \   000058   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00005B   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   2008                      }
   2009                      #endif
   2010                      break;
   2011                  }
   2012                  case Match_Desc_rsp:
   2013                  {
   2014                      ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   \                     ??zha_project_ProcessZDOMsgs_3:
   \   00005E                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00005E   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000061   8A..         MOV     ?V0,R2
   \   000063   8B..         MOV     ?V1,R3
   \   000065   AE..         MOV     R6,?V0
   \   000067   AF..         MOV     R7,?V1
   2015                      if ( pRsp )
   \   000069   EE           MOV     A,R6
   \   00006A   4F           ORL     A,R7
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   2016                      {
   2017                          if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   E0           MOVX    A,@DPTR
   \   000075   7021         JNZ     ??zha_project_ProcessZDOMsgs_9
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   601B         JZ      ??zha_project_ProcessZDOMsgs_9
   2018                          {
   2019                              zha_project_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00007D   90....       MOV     DPTR,#zha_project_DstAddr + 8
   \   000080   12....       LCALL   ?Subroutine7 & 0xFFFF
   2020                              zha_project_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_140:
   \   000083   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000086   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   2021                              // Take the first endpoint, Can be changed to search through endpoints
   2022                              zha_project_DstAddr.endPoint = pRsp->epList[0];
   \                     ??CrossCallReturnLabel_142:
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   90....       MOV     DPTR,#zha_project_DstAddr + 9
   \   000090   F0           MOVX    @DPTR,A
   2023          
   2024                              // Light LED
   2025                              HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000091                ; Setup parameters for call to function HalLedSet
   \   000091   7A01         MOV     R2,#0x1
   \   000093   7908         MOV     R1,#0x8
   \   000095   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2026                          }
   2027                          osal_mem_free( pRsp );
   \                     ??zha_project_ProcessZDOMsgs_9:
   \   000098                ; Setup parameters for call to function osal_mem_free
   \   000098   02....       LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
   2028                      }
   2029                      break;
   2030                  }
   2031                  case Device_annce:
   2032                  { 
   2033                      uint8 k=0;
   2034                      ZDO_ParseDeviceAnnce( pMsg, &devAnnce );
   \                     ??zha_project_ProcessZDOMsgs_0:
   \   00009B                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00009B   AC..         MOV     R4,?XSP + 0
   \   00009D   AD..         MOV     R5,?XSP + 1
   \   00009F   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2035                      
   2036          #if ZG_BUILD_COORDINATOR_TYPE            
   2037                      for(i=0;i<5;i++)
   \   0000A2   7E00         MOV     R6,#0x0
   2038                      {
   2039          
   2040                          if(AssociatedDevList[i].shortAddr!=devAnnce.nwkAddr)
   \                     ??zha_project_ProcessZDOMsgs_11:
   \   0000A4   EE           MOV     A,R6
   \   0000A5   75F01C       MOV     B,#0x1c
   \   0000A8   A4           MUL     AB
   \   0000A9   F8           MOV     R0,A
   \   0000AA   A9F0         MOV     R1,B
   \   0000AC   74..         MOV     A,#AssociatedDevList & 0xff
   \   0000AE   28           ADD     A,R0
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   74..         MOV     A,#(AssociatedDevList >> 8) & 0xff
   \   0000B3   39           ADDC    A,R1
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000B9   85..82       MOV     DPL,?XSP + 0
   \   0000BC   85..83       MOV     DPH,?XSP + 1
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   68           XRL     A,R0
   \   0000C1   7003         JNZ     ??zha_project_ProcessZDOMsgs_12
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   69           XRL     A,R1
   \                     ??zha_project_ProcessZDOMsgs_12:
   \   0000C6   6015         JZ      ??zha_project_ProcessZDOMsgs_13
   2041                          {
   2042                              SetTempDeviceSA(devAnnce.nwkAddr,devAnnce.extAddr);
                                     ^
Warning[Pe223]: function "SetTempDeviceSA" declared implicitly

              uint8 k=0;
                    ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2033  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \   0000C8                ; Setup parameters for call to function SetTempDeviceSA
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   AC82         MOV     R4,DPL
   \   0000CF   AD83         MOV     R5,DPH
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \   0000D7   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   2043                          }
   2044                      }
   \                     ??CrossCallReturnLabel_65:
   \   0000DA   12....       LCALL   `??SetTempDeviceSA::?relay`; Banked call to: SetTempDeviceSA
   \                     ??zha_project_ProcessZDOMsgs_13:
   \   0000DD   0E           INC     R6
   \   0000DE   EE           MOV     A,R6
   \   0000DF   C3           CLR     C
   \   0000E0   9405         SUBB    A,#0x5
   \   0000E2   40C0         JC      ??zha_project_ProcessZDOMsgs_11
   2045          #endif
   2046                      // set simple descriptor query event
   2047                      //DelayMS(50);
   2048                      simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000E4   90....       MOV     DPTR,#simpleDescReqAddr + 8
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   F0           MOVX    @DPTR,A
   2049                      simpleDescReqAddr.addr.shortAddr = devAnnce.nwkAddr;
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0000F3   90....       MOV     DPTR,#simpleDescReqAddr
   \   0000F6   E8           MOV     A,R0
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E9           MOV     A,R1
   \   0000FA   F0           MOVX    @DPTR,A
   2050          //            afAddrType_t dstAddr;
   2051          //            dstAddr.addrMode=afAddr16Bit;
   2052          //            dstAddr.addr.shortAddr=devAnnce.nwkAddr;
   2053          //            dstAddr.endPoint=1;
   2054          //            zcl_SendCommand( 1, &dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, COMMAND_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, FALSE, 0, 0, 0, NULL );
   2055                      //osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT ,50);
   2056                      //osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_POWER_EVT,100);
   2057                      //osal_start_timerEx( zha_project_TaskID, ZHA_ACTIVE_EP_EVT,150);
   2058                      //osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT,200);
   2059                      osal_set_event( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT );
   \   0000FB                ; Setup parameters for call to function osal_set_event
   \   0000FB   7A04         MOV     R2,#0x4
   \   0000FD   7B00         MOV     R3,#0x0
   \   0000FF   90....       MOV     DPTR,#zha_project_TaskID
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F9           MOV     R1,A
   \   000104   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   2060                      break;
   \   000107   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   2061                  }
   2062          
   2063                  case Active_EP_rsp:
   2064                  {
   2065                      ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   \                     ??zha_project_ProcessZDOMsgs_2:
   \   00010A                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00010A   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00010D   8A..         MOV     ?V0,R2
   \   00010F   8B..         MOV     ?V1,R3
   \   000111   AE..         MOV     R6,?V0
   \   000113   AF..         MOV     R7,?V1
   2066                      *zha_project_ActiveEP = *pRsp;
   \   000115   90....       MOV     DPTR,#zha_project_ActiveEP
   \   000118   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00011B   8B83         MOV     DPH,R3
   \   00011D   8A82         MOV     DPL,R2
   \   00011F   7404         MOV     A,#0x4
   \   000121   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2067                      osal_memset(ep,0,sizeof(ep));
   \   000124                ; Setup parameters for call to function osal_memset
   \   000124   7C05         MOV     R4,#0x5
   \   000126   FD           MOV     R5,A
   \   000127   F9           MOV     R1,A
   \   000128   7A..         MOV     R2,#ep & 0xff
   \   00012A   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   00012C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2068                      osal_memcpy(ep,pRsp->epList,pRsp->cnt);
   \   00012F                ; Setup parameters for call to function osal_memcpy
   \   00012F   EE           MOV     A,R6
   \   000130   2404         ADD     A,#0x4
   \   000132   F5..         MOV     ?V0,A
   \   000134   E4           CLR     A
   \   000135   3F           ADDC    A,R7
   \   000136   F5..         MOV     ?V1,A
   \   000138   75..00       MOV     ?V2,#0x0
   \   00013B   78..         MOV     R0,#?V0
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000140   8E82         MOV     DPL,R6
   \   000142   8F83         MOV     DPH,R7
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   FC           MOV     R4,A
   \   000149   7D00         MOV     R5,#0x0
   \   00014B   7A..         MOV     R2,#ep & 0xff
   \   00014D   7B..         MOV     R3,#(ep >> 8) & 0xff
   \   00014F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000152   7403         MOV     A,#0x3
   \   000154   12....       LCALL   ?DEALLOC_XSTACK8
   2069                      simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000157   90....       MOV     DPTR,#simpleDescReqAddr + 8
   \   00015A   12....       LCALL   ?Subroutine7 & 0xFFFF
   2070                      simpleDescReqAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_141:
   \   00015D   A882         MOV     R0,DPL
   \   00015F   A983         MOV     R1,DPH
   \   000161   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000164   90....       MOV     DPTR,#simpleDescReqAddr
   \   000167   EA           MOV     A,R2
   \   000168   F0           MOVX    @DPTR,A
   \   000169   A3           INC     DPTR
   \   00016A   EB           MOV     A,R3
   \   00016B   F0           MOVX    @DPTR,A
   2071                      //HalUARTWrite(HAL_UART_PORT_0,ep,pRsp->cnt);
   2072                      //zha_project_ActiveEP.status = pRsp->status;
   2073                      //zha_project_ActiveEP.nwkAddr= pRsp->nwkAddr;
   2074                      //osal_memcpy(zha_project_ActiveEP.epList,pRsp->epList,sizeof(uint8));
   2075                      //zha_project_ActiveEP.epList[] = pRsp->epList[];
   2076                      //DelayMS(50);
   2077          #if ZG_BUILD_COORDINATOR_TYPE            
   2078                      SetTempDeviceEP(pRsp->nwkAddr , ep );
                             ^
Warning[Pe223]: function "SetTempDeviceEP" declared implicitly
   \   00016C                ; Setup parameters for call to function SetTempDeviceEP
   \   00016C   7C..         MOV     R4,#ep & 0xff
   \   00016E   7D..         MOV     R5,#(ep >> 8) & 0xff
   \   000170   8882         MOV     DPL,R0
   \   000172   8983         MOV     DPH,R1
   \   000174   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000177   12....       LCALL   `??SetTempDeviceEP::?relay`; Banked call to: SetTempDeviceEP
   2079          #endif
   2080                      osal_set_event( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT );
   \   00017A                ; Setup parameters for call to function osal_set_event
   \   00017A   7A10         MOV     R2,#0x10
   \   00017C   7B00         MOV     R3,#0x0
   \   00017E   90....       MOV     DPTR,#zha_project_TaskID
   \   000181   E0           MOVX    A,@DPTR
   \   000182   F9           MOV     R1,A
   \   000183   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   2081                      osal_mem_free( pRsp ); 
   \   000186                ; Setup parameters for call to function osal_mem_free
   \                     ??zha_project_ProcessZDOMsgs_10:
   \   000186   EE           MOV     A,R6
   \   000187   FA           MOV     R2,A
   \   000188   EF           MOV     A,R7
   \   000189   FB           MOV     R3,A
   \   00018A   02....       LJMP    ??zha_project_ProcessZDOMsgs_14 & 0xFFFF
   2082                      break;
   2083                  }
   2084                  case Simple_Desc_rsp:
   2085                  {
   2086                      uint8 k=0;
   2087                      ZDO_SimpleDescRsp_t *pSimpleDescRsp;   // pointer to received simple desc response
   2088                      pSimpleDescRsp = (ZDO_SimpleDescRsp_t *)osal_mem_alloc( sizeof( ZDO_SimpleDescRsp_t ) );
   \                     ??zha_project_ProcessZDOMsgs_1:
   \   00018D                ; Setup parameters for call to function osal_mem_alloc
   \   00018D   7A0F         MOV     R2,#0xf
   \   00018F   7B00         MOV     R3,#0x0
   \   000191   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000194   8A..         MOV     ?V0,R2
   \   000196   8B..         MOV     ?V1,R3
   2089          
   2090          
   2091                      if(pSimpleDescRsp)
   \   000198   EA           MOV     A,R2
   \   000199   45..         ORL     A,?V1
   \   00019B   7003         JNZ     $+5
   \   00019D   02....       LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
   2092                      {
   2093                          pSimpleDescRsp->simpleDesc.pAppInClusterList = NULL;
   \   0001A0   EA           MOV     A,R2
   \   0001A1   240A         ADD     A,#0xa
   \   0001A3   F5..         MOV     ?V4,A
   \   0001A5   E4           CLR     A
   \   0001A6   35..         ADDC    A,?V1
   \   0001A8   F5..         MOV     ?V5,A
   \   0001AA   85..82       MOV     DPL,?V4
   \   0001AD   F583         MOV     DPH,A
   \   0001AF   E4           CLR     A
   \   0001B0   F0           MOVX    @DPTR,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   F0           MOVX    @DPTR,A
   2094                          pSimpleDescRsp->simpleDesc.pAppOutClusterList = NULL;
   \   0001B3   EA           MOV     A,R2
   \   0001B4   240D         ADD     A,#0xd
   \   0001B6   F5..         MOV     ?V2,A
   \   0001B8   E4           CLR     A
   \   0001B9   35..         ADDC    A,?V1
   \   0001BB   F5..         MOV     ?V3,A
   \   0001BD   85..82       MOV     DPL,?V2
   \   0001C0   F583         MOV     DPH,A
   \   0001C2   E4           CLR     A
   \   0001C3   F0           MOVX    @DPTR,A
   \   0001C4   A3           INC     DPTR
   \   0001C5   F0           MOVX    @DPTR,A
   2095          
   2096                          ZDO_ParseSimpleDescRsp( pMsg, pSimpleDescRsp );
   \   0001C6                ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
   \   0001C6   AC..         MOV     R4,?V0
   \   0001C8   AD..         MOV     R5,?V1
   \   0001CA   EE           MOV     A,R6
   \   0001CB   FA           MOV     R2,A
   \   0001CC   EF           MOV     A,R7
   \   0001CD   FB           MOV     R3,A
   \   0001CE   12....       LCALL   `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
   2097          #if ZG_BUILD_COORDINATOR_TYPE
   2098                          if(pSimpleDescRsp->simpleDesc.AppDeviceId ==0x0402)
   \   0001D1   85..82       MOV     DPL,?V0
   \   0001D4   85..83       MOV     DPH,?V1
   \   0001D7   A3           INC     DPTR
   \   0001D8   A3           INC     DPTR
   \   0001D9   A3           INC     DPTR
   \   0001DA   A3           INC     DPTR
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0001E0   7402         MOV     A,#0x2
   \   0001E2   6C           XRL     A,R4
   \   0001E3   7003         JNZ     ??zha_project_ProcessZDOMsgs_15
   \   0001E5   7404         MOV     A,#0x4
   \   0001E7   6D           XRL     A,R5
   \                     ??zha_project_ProcessZDOMsgs_15:
   \   0001E8   7025         JNZ     ??zha_project_ProcessZDOMsgs_16
   2099                          {
   2100          //                    afAddrType_t  dscReqAddr;
   2101          //                    dscReqAddr.addrMode=afAddr16Bit;
   2102          //                    dscReqAddr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
   2103          //                    dscReqAddr.endPoint=1;
   2104          //                    zclReadCmd_t BasicAttrsList;
   2105          //                    BasicAttrsList.numAttr = 1;
   2106          //                    BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
   2107          //                    zcl_SendRead( 1, &dscReqAddr,
   2108          //                    ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
   2109          //                    ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
   2110                              osal_start_timerEx( zha_project_TaskID, ZONE_TYPE_EVT,200);
   \   0001EA                ; Setup parameters for call to function osal_start_timerEx
   \   0001EA   90....       MOV     DPTR,#__Constant_c8
   \   0001ED   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001F0   7A20         MOV     R2,#0x20
   \   0001F2   7B00         MOV     R3,#0x0
   \   0001F4   90....       MOV     DPTR,#zha_project_TaskID
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   F9           MOV     R1,A
   \   0001F9   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001FC   7404         MOV     A,#0x4
   \   0001FE   12....       LCALL   ?DEALLOC_XSTACK8
   2111                              osal_set_event( zha_project_TaskID, ZONE_TYPE_EVT );
   \   000201                ; Setup parameters for call to function osal_set_event
   \   000201   7A20         MOV     R2,#0x20
   \   000203   7B00         MOV     R3,#0x0
   \   000205   90....       MOV     DPTR,#zha_project_TaskID
   \   000208   E0           MOVX    A,@DPTR
   \   000209   F9           MOV     R1,A
   \   00020A   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00020D   800D         SJMP    ??zha_project_ProcessZDOMsgs_17
   2112                              //DelayMS(100);
   2113                              //zclSampleCIE_WriteIAS_CIE_Address(&destAddr); 
   2114                          }
   2115                          else
   2116                              SetTempDeviceType(pSimpleDescRsp->nwkAddr,pSimpleDescRsp->simpleDesc.AppDeviceId);
                                     ^
Warning[Pe223]: function "SetTempDeviceType" declared implicitly

              uint8 k=0;
                    ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2086  Warning[Pe177]: 
          variable "k" was declared but never referenced
   \                     ??zha_project_ProcessZDOMsgs_16:
   \   00020F                ; Setup parameters for call to function SetTempDeviceType
   \   00020F   85..82       MOV     DPL,?V0
   \   000212   85..83       MOV     DPH,?V1
   \   000215   A3           INC     DPTR
   \   000216   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000219   12....       LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
   2117          #endif
   2118                          //osal_mem_free( pSimpleDescRsp );
   2119                          // free memory for InClusterList
   2120                          if (pSimpleDescRsp->simpleDesc.pAppInClusterList)
   \                     ??zha_project_ProcessZDOMsgs_17:
   \   00021C   85..82       MOV     DPL,?V4
   \   00021F   85..83       MOV     DPH,?V5
   \   000222   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000225   6003         JZ      ??zha_project_ProcessZDOMsgs_18
   2121                          {
   2122                              osal_mem_free(pSimpleDescRsp->simpleDesc.pAppInClusterList);
   \   000227                ; Setup parameters for call to function osal_mem_free
   \   000227   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2123                          }
   2124          
   2125                          // free memory for OutClusterList
   2126                          if (pSimpleDescRsp->simpleDesc.pAppOutClusterList)
   \                     ??zha_project_ProcessZDOMsgs_18:
   \   00022A   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00022D   6003         JZ      ??zha_project_ProcessZDOMsgs_19
   2127                          {
   2128                              osal_mem_free(pSimpleDescRsp->simpleDesc.pAppOutClusterList);
   \   00022F                ; Setup parameters for call to function osal_mem_free
   \   00022F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2129                          }
   2130          
   2131                          osal_mem_free( pSimpleDescRsp );
   \                     ??zha_project_ProcessZDOMsgs_19:
   \   000232                ; Setup parameters for call to function osal_mem_free
   \   000232   AA..         MOV     R2,?V0
   \   000234   AB..         MOV     R3,?V1
   \   000236   8003         SJMP    ??zha_project_ProcessZDOMsgs_14
   2132                      }
   2133                      break;
   2134                  }
   2135          
   2136                  case Bind_rsp:
   2137                      ZDO_MgmtBindRsp_t *Bind_pRsp =ZDO_ParseMgmtBindRsp( pMsg ) ;
                             ^
Warning[Pe1072]: a declaration cannot have a label
   \                     ??zha_project_ProcessZDOMsgs_5:
   \   000238                ; Setup parameters for call to function ZDO_ParseMgmtBindRsp
   \   000238   12....       LCALL   `??ZDO_ParseMgmtBindRsp::?relay`; Banked call to: ZDO_ParseMgmtBindRsp
   2138                      afAddrType_t  dscReqAddr;
                                           ^
Warning[Pe550]: variable "dscReqAddr" was set but never used

      switch ( pMsg->clusterID )
      ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1992  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "Bind_pRsp" (declared at line 2137 of "C:\Texas
                      Instruments\Z-Stack Home
                      1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAu
                      tomatic\Source\zha_project.c")

    zclEZMode_ActionData_t data;
                           ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1980  Warning[Pe177]: 
          variable "data" was declared but never referenced

    ZDO_MatchDescRsp_t *pMatchDescRsp;
                        ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1981  Warning[Pe177]: 
          variable "pMatchDescRsp" was declared but never referenced

      zAddrType_t addr;
                  ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1985  Warning[Pe177]: 
          variable "addr" was declared but never referenced

      afAddrType_t destAddr;
                   ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1986  Warning[Pe177]: 
          variable "destAddr" was declared but never referenced

      uint8 *pData;
             ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1987  Warning[Pe177]: 
          variable "pData" was declared but never referenced

      uint8 address[8];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1988  Warning[Pe177]: 
          variable "address" was declared but never referenced

      uint8 pValue[Z_EXTADDR_LEN];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1990  Warning[Pe177]: 
          variable "pValue" was declared but never referenced

      uint8 pValue1[Z_EXTADDR_LEN];
            ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",1991  Warning[Pe177]: 
          variable "pValue1" was declared but never referenced
   2139                      dscReqAddr.addrMode=afAddr16Bit;
   2140                      if ( Bind_pRsp )
   2141                      {
   2142                        //osal_memcpy(dstAddr.addr.extAddr,NWK_command.NWK_General_Frame.NWKCG_TargetAddress,8);
   2143                        //dstAddr.addr.shortAddr=Node_Info.uiNwk_Addr;
   2144                        dscReqAddr.addr.shortAddr=AssociatedDevList[0].shortAddr;
   2145                        dscReqAddr.endPoint=0x01;
   2146                        //zclSampleCIE_WriteIAS_CIE_Address(&dscReqAddr);   
   2147                      }
   2148                      osal_mem_free( Bind_pRsp );
   \   00023B                ; Setup parameters for call to function osal_mem_free
   \                     ??zha_project_ProcessZDOMsgs_14:
   \   00023B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2149                      break;
   2150                  default:
   2151                      break;
   2152              }
   2153          }
   \                     ??zha_project_ProcessZDOMsgs_6:
   \   00023E   740B         MOV     A,#0xb
   \   000240   12....       LCALL   ?DEALLOC_XSTACK8
   \   000243   7F06         MOV     R7,#0x6
   \   000245   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   2154          
   2155          /*********************************************************************
   2156           * @fn      zha_project_EZModeCB
   2157           *
   2158           * @brief   The Application is informed of events. This can be used to show on the UI what is
   2159          *           going on during EZ-Mode steering/finding/binding.
   2160           *
   2161           * @param   state - an
   2162           *
   2163           * @return  none
   2164           */
   2165          static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   2166          {
   2167          #ifdef LCD_SUPPORTED
   2168            char *pStr;
   2169            uint8 err;
   2170          #endif
   2171          
   2172            // time to go into identify mode
   2173            if ( state == EZMODE_STATE_IDENTIFYING )
   2174            {
   2175          #ifdef LCD_SUPPORTED
   2176              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   2177          #endif
   2178          
   2179              zha_project_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   2180              //zha_project_ProcessIdentifyTimeChange();
   2181            }
   2182          
   2183            // autoclosing, show what happened (success, cancelled, etc...)
   2184            if( state == EZMODE_STATE_AUTOCLOSE )
   2185            {
   2186          #ifdef LCD_SUPPORTED
   2187              pStr = NULL;
   2188              err = pData->sAutoClose.err;
   2189              if ( err == EZMODE_ERR_SUCCESS )
   2190              {
   2191                pStr = "EZMode: Success";
   2192              }
   2193              else if ( err == EZMODE_ERR_NOMATCH )
   2194              {
   2195                pStr = "EZMode: NoMatch"; // not a match made in heaven
   2196              }
   2197              if ( pStr )
   2198              {
   2199                if ( giLightScreenMode == LIGHT_MAINMODE )
   2200                {
   2201                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   2202                }
   2203              }
   2204          #endif
   2205            }
   2206          
   2207            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   2208            if( state == EZMODE_STATE_FINISH )
   2209            {
   2210              // turn off identify mode
   2211              zha_project_IdentifyTime = 0;
   2212              //zha_project_ProcessIdentifyTimeChange();
   2213          
   2214          #ifdef LCD_SUPPORTED
   2215              // if successful, inform user which nwkaddr/ep we bound to
   2216              pStr = NULL;
   2217              err = pData->sFinish.err;
   2218              if( err == EZMODE_ERR_SUCCESS )
   2219              {
   2220                // already stated on autoclose
   2221              }
   2222              else if ( err == EZMODE_ERR_CANCELLED )
   2223              {
   2224                pStr = "EZMode: Cancel";
   2225              }
   2226              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   2227              {
   2228                pStr = "EZMode: BadParm";
   2229              }
   2230              else if ( err == EZMODE_ERR_TIMEDOUT )
   2231              {
   2232                pStr = "EZMode: TimeOut";
   2233              }
   2234              if ( pStr )
   2235              {
   2236                if ( giLightScreenMode == LIGHT_MAINMODE )
   2237                {
   2238                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   2239                }
   2240              }
   2241          #endif
   2242              // show main UI screen 3 seconds after binding
   2243              //osal_start_timerEx( zha_project_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   2244            }
   2245          }
   2246          #endif // ZCL_EZMODE
   2247          
   2248          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2249          static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   \                     zha_project_LevelControlMoveToLevelCB:
   2250          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2251              zha_project_Level_to_Level=pCmd->level;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   90....       MOV     DPTR,#zha_project_Level_to_Level
   \   00000C   F0           MOVX    @DPTR,A
   2252          }
   \   00000D   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   01           DB 1
   \   000001   ....         DW zha_project_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zha_project_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zha_project_CmdCallbacks>`:
   \   000000   ....         DW `??zha_project_BasicResetCB::?relay`
   \   000002   ....         DW `??zha_project_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??zha_project_IdentifyQueryRspCB::?relay`
   \   00000C   ....         DW `??zha_project_OnOffCB::?relay`
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   ....         DW `??zha_project_LevelControlMoveToLevelCB::?relay`
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_ProcessInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_ProcessInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_ProcessInReportCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_ProcessInReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zha_project_LevelControlMoveToLevelCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zha_project_LevelControlMoveToLevelCB
   2253          
   2254          
   2255          static ZStatus_t zclZLL_ColorControl_MoveToColorTemperature(zclCCMoveToColorTemperature_t *pCmd)
   2256          {
   2257                  zha_project_Light_Color_Status = pCmd->colorTemperature;
   2258          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "zclZLL_ColorControl_MoveToColorTemperature"

  static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",2165  Warning[Pe177]: 
          function "zha_project_EZModeCB" was declared but never referenced
   2259          
   2260          static void zclSS_ChangeNotification(zclZoneChangeNotif_t *pCmd)
                             ^
Warning[Pe177]: function "zclSS_ChangeNotification" was declared but never
          referenced

  static void zha_project_DisplayLight( void )
              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",926  Warning[Pe177]: 
          function "zha_project_DisplayLight" was declared but never referenced

  static zclLighting_AppCallbacks_t  zclZLLtest_CmdCallbacks =
                                     ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",325  Warning[Pe177]: 
          variable "zclZLLtest_CmdCallbacks" was declared but never referenced

  static zclSS_AppCallbacks_t zclSStest_CmdCallbacks =
                              ^
"C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c",342  Warning[Pe177]: 
          variable "zclSStest_CmdCallbacks" was declared but never referenced
   2261          {
   2262                  zha_project_Alarm_Status=pCmd->zoneStatus;
   2263          }
   2264          
   2265          
   2266          /****************************************************************************
   2267          ****************************************************************************/
   2268          
   2269          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   zha_project_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      0     85   zha_project_HandleKeys
        0     19   -> NLME_GetShortAddr
        0     20   -> NLME_SendNetworkStatus
        0     19   -> ZDP_MgmtPermitJoinReq
        0     19   -> zcl_InvokeEZMode
        0     19   -> zha_project_BasicResetCB
      2      0   zha_project_IdentifyCB
      2      2   zha_project_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0      9   zha_project_Init
        0      9   -> AT_Init
        0      9   -> Device_type_Init
        0      9   -> RegisterForKeys
        0      9   -> SerialApp_Init
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> zclDiagnostic_InitStats
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
        0      9   -> zcl_registerReadWriteCB
      2      0   zha_project_LevelControlMoveToLevelCB
      0     10   zha_project_OnOffCB
        0     10   -> zcl_getRawAFMsg
      0    136   zha_project_ProcessInReadRspCmd
        0     63   -> APSME_LookupExtAddr
        0     63   -> SetTempDeviceBAT
        0     63   -> SetTempDeviceHW
        0     63   -> SetTempDeviceManuName
        0     63   -> SetTempDeviceType
        0     63   -> UpdateDeviceStatus1
        0     63   -> UpdateDeviceStatus2
        0     63   -> UpdateDeviceStatus3
        0     71   -> ZDP_BindUnbindReq
        0     66   -> osal_memcpy
        0     63   -> osal_memset
        0     67   -> osal_nv_read
        0     63   -> osal_set_event
      0    136   zha_project_ProcessInReportCmd
        0     63   -> APSME_LookupExtAddr
        0     63   -> SetTempDeviceBAT
        0     63   -> SetTempDeviceHW
        0     63   -> SetTempDeviceManuName
        0     63   -> SetTempDeviceType
        0     63   -> UpdateDeviceStatus1
        0     63   -> UpdateDeviceStatus2
        0     63   -> UpdateDeviceStatus3
        0     71   -> ZDP_BindUnbindReq
        0     66   -> osal_memcpy
        0     63   -> osal_memset
        0     67   -> osal_nv_read
        0     63   -> osal_set_event
      2     94   zha_project_ProcessZDOMsgs
        0     25   -> HalLedSet
        0     25   -> SetTempDeviceEP
        0     25   -> SetTempDeviceSA
        0     25   -> SetTempDeviceType
        0     25   -> ZDO_ParseDeviceAnnce
        0     25   -> ZDO_ParseEPListRsp
        0     25   -> ZDO_ParseMgmtBindRsp
        0     25   -> ZDO_ParseSimpleDescRsp
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     28   -> osal_memcpy
        0     25   -> osal_memset
        0     25   -> osal_set_event
        0     29   -> osal_start_timerEx
      0     70   zha_project_event_loop
        0     65   -> CheckDeviceStatus
        0     65   -> NLME_PermitJoiningRequest
        0     65   -> Onboard_soft_reset
        0     65   -> SendCommond
        0     66   -> ZDP_NWKAddrOfInterestReq
        0     66   -> ZDP_SimpleDescReq
        0     65   -> osal_mem_free
        0     65   -> osal_memset
        0     65   -> osal_msg_deallocate
        0     65   -> osal_msg_receive
        0     65   -> zcl_ProcessMessageMSG
        0     70   -> zcl_SendRead
        0     65   -> zha_project_HandleKeys
        0     65   -> zha_project_ProcessInReadRspCmd
        0     65   -> zha_project_ProcessInReportCmd
        0     65   -> zha_project_ProcessZDOMsgs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Initializer for sampleLight_TestEp>
      40  ?<Initializer for zha_project_CmdCallbacks>
       1  ?<Initializer for zha_project_NwkState>
       6  ??Subroutine35_0
       7  ??Subroutine36_0
       6  ??Subroutine37_0
       4  ??Subroutine38_0
      12  ??Subroutine39_0
      10  ??Subroutine40_0
       4  ??Subroutine41_0
       8  ??Subroutine42_0
       6  ??Subroutine43_0
       4  ??Subroutine44_0
       9  ??Subroutine45_0
       6  ??Subroutine46_0
       7  ??Subroutine47_0
       5  ?Subroutine0
       3  ?Subroutine1
      12  ?Subroutine10
       6  ?Subroutine11
      53  ?Subroutine12
      13  ?Subroutine13
      11  ?Subroutine14
       6  ?Subroutine15
      13  ?Subroutine16
       6  ?Subroutine17
       6  ?Subroutine18
       4  ?Subroutine19
      12  ?Subroutine2
      17  ?Subroutine20
      13  ?Subroutine21
       4  ?Subroutine22
       7  ?Subroutine23
       4  ?Subroutine24
      17  ?Subroutine25
      16  ?Subroutine26
       6  ?Subroutine27
      12  ?Subroutine28
       6  ?Subroutine29
       9  ?Subroutine3
       9  ?Subroutine30
       9  ?Subroutine31
       4  ?Subroutine32
       8  ?Subroutine33
      16  ?Subroutine34
      17  ?Subroutine4
       9  ?Subroutine5
       8  ?Subroutine6
       2  ?Subroutine7
       3  ?Subroutine8
       3  ?Subroutine9
       4  __Constant_c8
       9  dstAddr
       5  ep
       1  gPermitDuration
       1  giLightScreenMode
       1  netState
       6  sampleLight_TestEp
       9  simpleDescReqAddr
       1  zha_projectSeqNum
       2  zha_project_ActiveEP
      56  zha_project_BasicResetCB
       6  zha_project_BasicResetCB::?relay
      40  zha_project_CmdCallbacks
       4  zha_project_CurrentLevel32
      12  zha_project_DstAddr
     291  zha_project_HandleKeys
       6  zha_project_HandleKeys::?relay
      23  zha_project_IdentifyCB
       6  zha_project_IdentifyCB::?relay
      33  zha_project_IdentifyQueryRspCB
       6  zha_project_IdentifyQueryRspCB::?relay
     153  zha_project_Init
       6  zha_project_Init::?relay
      16  zha_project_LevelControlMoveToLevelCB
       6  zha_project_LevelControlMoveToLevelCB::?relay
       1  zha_project_LevelLastLevel
       1  zha_project_NewLevel
       1  zha_project_NewLevelUp
       1  zha_project_NwkState
      58  zha_project_OnOffCB
       6  zha_project_OnOffCB::?relay
     727  zha_project_ProcessInReadRspCmd
       6  zha_project_ProcessInReadRspCmd::?relay
     744  zha_project_ProcessInReportCmd
       6  zha_project_ProcessInReportCmd::?relay
     584  zha_project_ProcessZDOMsgs
       6  zha_project_ProcessZDOMsgs::?relay
       4  zha_project_Rate32
       1  zha_project_TaskID
       1  zha_project_WithOnOff
       6  zha_project_epDesc
     698  zha_project_event_loop
       6  zha_project_event_loop::?relay

 
 3 821 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    47 bytes in segment XDATA_I
    47 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
    60 bytes in segment XDATA_Z
 
 3 934 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
   107 bytes of XDATA memory

Errors: none
Warnings: 87
