###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                13/Sep/2016  14:45:55
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\sys\ZGlobals.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=10000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\sys\ZGlobals.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D HOLD_AUTO_START -D
#        xBUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG
#        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D ZCL_LEVEL_CTRL -D ZCL_WD -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -D DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR
#        -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\ZGlobals.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\ZGlobals.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2015-10-05 14:56:09 -0700 (Mon, 05 Oct 2015) $
      4            Revision:       $Revision: 44517 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          #include "at_command.h"
     52          #include "zha_project.h"
     53          /*********************************************************************
     54           * MACROS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64          
     65          typedef struct zgItem
     66          {
     67            uint16 id;
     68            uint16 len;
     69            void *buf;
     70          } zgItem_t;
     71          
     72          /*********************************************************************
     73           * NWK GLOBAL VARIABLES
     74           */
     75          
     76          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint32 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     80          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     81          
     82          // Rejoin backoff (silent period ) duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint32 zgDefaultRejoinBackoff = REJOIN_BACKOFF;
   \                     zgDefaultRejoinBackoff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultRejoinBackoff>`
   \   000004                REQUIRE __INIT_XDATA_I
     84          
     85          // Rejoin scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint32 zgDefaultRejoinScan = REJOIN_SCAN ;
   \                     zgDefaultRejoinScan:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultRejoinScan>`
   \   000004                REQUIRE __INIT_XDATA_I
     87          
     88          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     91          
     92          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     93          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     94          
     95          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     96          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     97          
     98          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     99          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
    100          
    101          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
    103          
    104          // Security mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    105          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurityMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    106          
    107          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    108          uint8 zgSecurePermitJoin = TRUE;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    109          
    110          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          uint8 zgApsTrustCenterAddr[Z_EXTADDR_LEN] = { 0 };
   \                     zgApsTrustCenterAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    112          
    113          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    114          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    115          
    116          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    117          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    118          
    119          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    121          
    122          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    123          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    125          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    126          
    127          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    128          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    129          
    130          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    133          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    135          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    136          
    137          // Cleanup Child Table according to routing traffic

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 zgRouterOffAssocCleanup = FALSE;
   \                     zgRouterOffAssocCleanup:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          
    140          // Determines whether or not a remote NWK leave request command frame received
    141          // by the local device is accepted .

   \                                 In  segment XDATA_I, align 1, keep-with-next
    142          uint8 zgNwkLeaveRequestAllowed = TRUE;
   \                     zgNwkLeaveRequestAllowed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkLeaveRequestAllowed>`
   \   000001                REQUIRE __INIT_XDATA_I
    143          
    144          //=======    Child Aging PARENT ROUTER (ZR/ZC) configuration   ========
    145          // You can setup a router to support Child Table Aging in 1 of 2 modes of
    146          // operation.  The first mode is NWK_PARENT_INFO_ORPHAN_NOTIFICATION and it
    147          // expects end devices to use orphan scan periodically as a means of a keep-alive
    148          // notification to the parent.  The other mode is NWK_PARENT_INFO_MAC_DATA_POLL
    149          // which uses the end device's MAC POLL request as the keep-alive notification.
    150          // The first method is preferred for new devices, where the end devices provide
    151          // support for it (which will be manditory in future Zigbee Home Automation
    152          // Specifications).
    153          // The second method is compatible with older end devices without the need for
    154          // specific child aging support.
    155          //
    156          // The method supported by the router (or coordinator) is determined at build time
    157          // by setting zgNwkParentInformation to either NWK_PARENT_INFO_ORPHAN_NOTIFICATION
    158          // or NWK_PARENT_INFO_MAC_DATA_POLL.
    159          //
    160          // End device built with Child Table Aging support both methods, the method is
    161          // determined by the parent and communicated at run-time.
    162          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    163          uint8 zgNwkParentInformation = NWK_PARENT_INFO_UNDEFINED;
    164          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    165          uint8 zgNwkParentInformation = NWK_PARENT_INFO_ORPHAN_NOTIFICATION;
   \                     zgNwkParentInformation:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkParentInformation>`
   \   000001                REQUIRE __INIT_XDATA_I
    166          #endif
    167          
    168          // This is an index into table Requested Timeout Enumerated Values.
    169          // It is used by the parent router, it indicates the default timeout value
    170          // for any end device that does not negotiate a different timeout value

   \                                 In  segment XDATA_I, align 1, keep-with-next
    171          uint8 zgNwkEndDeviceTimeoutDefault = NWK_END_DEV_TIMEOUT_DEFAULT;
   \                     zgNwkEndDeviceTimeoutDefault:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkEndDeviceTimeoutDefault`
   \   000001                REQUIRE __INIT_XDATA_I
    172          //=====================================================================
    173          
    174          //==========    Child Aging END DEVICE configuration    ===============
    175          // Values used by End Device when sending End Device Timeout Request

   \                                 In  segment XDATA_I, align 1, keep-with-next
    176          uint8 zgEndDeviceTimeoutValue  = END_DEV_TIMEOUT_VALUE;
   \                     zgEndDeviceTimeoutValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgEndDeviceTimeoutValue>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zgEndDeviceConfiguration = END_DEV_CONFIGURATION;
   \                     zgEndDeviceConfiguration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint32 zgEndDeviceKAInterval = 0;
   \                     zgEndDeviceKAInterval:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    180          //=====================================================================
    181          
    182          // Determines if the Child Aging Table Management process is active or not.
    183          // This feature is optional and it is disabled by default.
    184          //
    185          // NOTICE:  Before enabling Child Aging make sure to review all the related
    186          // definitions in this file, especially zgNwkParentInformation.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    187          uint8 zgChildAgingEnable = TRUE;
   \                     zgChildAgingEnable:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgChildAgingEnable>`
   \   000001                REQUIRE __INIT_XDATA_I
    188          
    189          /*********************************************************************
    190           * APS GLOBAL VARIABLES
    191           */
    192          
    193          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    194          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    195          
    196          // The maximum number of seconds (milliseconds) to wait for an
    197          // acknowledgement to a transmitted frame.
    198          
    199          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    200          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    201          
    202          // This number is used by non-polled devices in the following formula:
    203          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    204          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    205          
    206          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    207          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    208          
    209          // The 64-big identifier of the network to join or form.
    210          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    212          
    213          // A boolean flag that indicates whether it is OK to use insecure join
    214          // on startup. Default set to TRUE

   \                                 In  segment XDATA_I, align 1, keep-with-next
    215          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    216          
    217          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    218          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    219          
    220          // Commissioned Network Address

   \                                 In  segment XDATA_I, align 1, keep-with-next
    221          uint16 zgNwkCommissionedNwkAddr = INVALID_NODE_ADDR;
   \                     zgNwkCommissionedNwkAddr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgNwkCommissionedNwkAddr>`
   \   000002                REQUIRE __INIT_XDATA_I
    222          
    223          // APS Duplication Rejection table variables

   \                                 In  segment XDATA_I, align 1, keep-with-next
    224          uint16 zgApscDupRejTimeoutInc = DEFAULT_APS_DUP_REJ_TIMEOUT_INCREMENT;
   \                     zgApscDupRejTimeoutInc:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscDupRejTimeoutInc>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    225          uint8  zgApscDupRejTimeoutCount = DEFAULT_APS_DUP_REJ_TIMEOUT;
   \                     zgApscDupRejTimeoutCount:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscDupRejTimeoutCount>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    226          uint16 zgApsMinDupRejTableSize = APS_DUP_REJ_ENTRIES;
   \                     zgApsMinDupRejTableSize:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsMinDupRejTableSize>`
   \   000002                REQUIRE __INIT_XDATA_I
    227          
    228          
    229          
    230          /*********************************************************************
    231           * SECURITY GLOBAL VARIABLES
    232           */
    233          
    234          // If TRUE, preConfigKey should be configured on all devices on the network
    235          // If false, it is configured only on the coordinator and sent to other
    236          // devices upon joining.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    237          uint8 zgPreConfigKeys = TRUE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPreConfigKeys>`
   \   000001                REQUIRE __INIT_XDATA_I
    238          
    239          // The type of link key in use.  This will determine the security
    240          // policies associated with sending and receiving APS messages.
    241          // If ZG_GLOBAL_LINK_KEY APS TCLK security may be used for specific APS commands
    242          // If ZG_UNIQUE_LINK_KEY APS TCLK security is required for specific APS commands

   \                                 In  segment XDATA_I, align 1, keep-with-next
    243          uint8 zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY;
   \                     zgApsLinkKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsLinkKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    244          
    245          // With changes introduced in R20 of the ZigBee specification,
    246          // boolean value of zgUseDefaultTCLK is set depending on zgApsLinkKeyType value.
    247          //
    248          // For zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY, zgUseDefaultTCLK = TRUE
    249          // For zgApsLinkKeyType = ZG_UNIQUE_LINK_KEY, different devices have
    250          // different value:
    251          //      ZC should have             zgUseDefaultTCLK = FALSE
    252          //      Other devices should have  zgUseDefaultTCLK = TRUE
    253          // This is initialized in zgInitItems()
    254          // If ZG_UNIQUE_LINK_KEY, individual trust center link key between each device
    255          // and the trust center should be manually configured via MT_SYS_OSAL_NV_WRITE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 zgUseDefaultTCLK;
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    257          
    258          #if defined ( APP_TP2_TEST_MODE )
    259          uint8 guTxApsSecON = FALSE;
    260          uint8 guEnforceRxApsSec = TP_GU_ALL;
    261          #endif
    262          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    263          uint8 zgApsAllowR19Sec = FALSE;
   \                     zgApsAllowR19Sec:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    264          
    265          /*********************************************************************
    266           * ZDO GLOBAL VARIABLES
    267           */
    268          
    269          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    270          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    271          
    272          // Device Logical Type

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    273          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    274          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    275          uint8 zgDeviceType;
   \                     zgDeviceType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    276          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    277          uint8 zgDeviceNum;
   \                     zgDeviceNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    278          uint8 SerialNumber[10];
   \                     SerialNumber:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    279          extern NODE_INFO_t AssoList[];
    280          //#if ZG_BUILD_COORDINATOR_TYPE
    281          //extern NODE_INFO_t AssoList[];
    282          //#endif
    283          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    284          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    285          
    286          #if !defined MT_TASK
    287          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    288          uint8 zgZdoDirectCB = FALSE;
   \                     zgZdoDirectCB:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    289          #endif
    290          
    291          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    292          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    293          
    294          /*********************************************************************
    295           * APPLICATION GLOBAL VARIABLES
    296           */
    297          
    298          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    299          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    300          
    301          /*********************************************************************
    302           * NON-STANDARD GLOBAL VARIABLES
    303           */
    304          
    305          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    306          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    307          
    308          /*********************************************************************
    309           * LOCAL VARIABLES
    310           */
    311          
    312          /*********************************************************************
    313           * ZGlobal Item Table
    314           */

   \                                 In  segment CODE_C, align 1
    315          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   8F00         DW 143
   \   000002   0100         DW 1
   \   000004   ....         DW zgZdoDirectCB
   \   000006   8700         DW 135
   \   000008   0100         DW 1
   \   00000A   ....         DW zgDeviceLogicalType
   \   00000C   8A00         DW 138
   \   00000E   0100         DW 1
   \   000010   ....         DW zgDeviceType
   \   000012   8C00         DW 140
   \   000014   0A00         DW 10
   \   000016   ....         DW SerialNumber
   \   000018   8B00         DW 139
   \   00001A   2C01         DW 300
   \   00001C   ....         DW AssoList
   \   00001E   3500         DW 53
   \   000020   0400         DW 4
   \   000022   ....         DW zgPollRate
   \   000024   2500         DW 37
   \   000026   0200         DW 2
   \   000028   ....         DW zgQueuedPollRate
   \   00002A   2600         DW 38
   \   00002C   0200         DW 2
   \   00002E   ....         DW zgResponsePollRate
   \   000030   2700         DW 39
   \   000032   0200         DW 2
   \   000034   ....         DW zgRejoinPollRate
   \   000036   2800         DW 40
   \   000038   0100         DW 1
   \   00003A   ....         DW zgMaxDataRetries
   \   00003C   2900         DW 41
   \   00003E   0100         DW 1
   \   000040   ....         DW zgMaxPollFailureRetries
   \   000042   8400         DW 132
   \   000044   0400         DW 4
   \   000046   ....         DW zgDefaultChannelList
   \   000048   8600         DW 134
   \   00004A   0100         DW 1
   \   00004C   ....         DW zgDefaultStartingScanDuration
   \   00004E   2A00         DW 42
   \   000050   0100         DW 1
   \   000052   ....         DW zgStackProfile
   \   000054   2B00         DW 43
   \   000056   0100         DW 1
   \   000058   ....         DW zgIndirectMsgTimeout
   \   00005A   2C00         DW 44
   \   00005C   0100         DW 1
   \   00005E   ....         DW zgRouteExpiryTime
   \   000060   2D00         DW 45
   \   000062   0800         DW 8
   \   000064   ....         DW zgExtendedPANID
   \   000066   2E00         DW 46
   \   000068   0100         DW 1
   \   00006A   ....         DW zgMaxBcastRetires
   \   00006C   2F00         DW 47
   \   00006E   0100         DW 1
   \   000070   ....         DW zgPassiveAckTimeout
   \   000072   3000         DW 48
   \   000074   0100         DW 1
   \   000076   ....         DW zgBcastDeliveryTime
   \   000078   3100         DW 49
   \   00007A   0100         DW 1
   \   00007C   ....         DW zgNwkMode
   \   00007E   3200         DW 50
   \   000080   0100         DW 1
   \   000082   ....         DW zgConcentratorEnable
   \   000084   3300         DW 51
   \   000086   0100         DW 1
   \   000088   ....         DW zgConcentratorDiscoveryTime
   \   00008A   3400         DW 52
   \   00008C   0100         DW 1
   \   00008E   ....         DW zgConcentratorRadius
   \   000090   3600         DW 54
   \   000092   0100         DW 1
   \   000094   ....         DW zgConcentratorRC
   \   000096   3800         DW 56
   \   000098   0100         DW 1
   \   00009A   ....         DW zgNwkSrcRtgExpiryTime
   \   00009C   3900         DW 57
   \   00009E   0100         DW 1
   \   0000A0   ....         DW zgRouteDiscoveryTime
   \   0000A2   8300         DW 131
   \   0000A4   0200         DW 2
   \   0000A6   ....         DW zgConfigPANID
   \   0000A8   6300         DW 99
   \   0000AA   0100         DW 1
   \   0000AC   ....         DW zgPreConfigKeys
   \   0000AE   6400         DW 100
   \   0000B0   0100         DW 1
   \   0000B2   ....         DW zgSecurityMode
   \   0000B4   6500         DW 101
   \   0000B6   0100         DW 1
   \   0000B8   ....         DW zgSecurePermitJoin
   \   0000BA   6D00         DW 109
   \   0000BC   0100         DW 1
   \   0000BE   ....         DW zgUseDefaultTCLK
   \   0000C0   7100         DW 113
   \   0000C2   0800         DW 8
   \   0000C4   ....         DW zgApsTrustCenterAddr
   \   0000C6   6600         DW 102
   \   0000C8   0100         DW 1
   \   0000CA   ....         DW zgApsLinkKeyType
   \   0000CC   4300         DW 67
   \   0000CE   0100         DW 1
   \   0000D0   ....         DW zgApscMaxFrameRetries
   \   0000D2   4400         DW 68
   \   0000D4   0200         DW 2
   \   0000D6   ....         DW zgApscAckWaitDurationPolled
   \   0000D8   4500         DW 69
   \   0000DA   0100         DW 1
   \   0000DC   ....         DW zgApsAckWaitMultiplier
   \   0000DE   4600         DW 70
   \   0000E0   0200         DW 2
   \   0000E2   ....         DW zgApsDefaultMaxBindingTime
   \   0000E4   4700         DW 71
   \   0000E6   0800         DW 8
   \   0000E8   ....         DW zgApsUseExtendedPANID
   \   0000EA   4800         DW 72
   \   0000EC   0100         DW 1
   \   0000EE   ....         DW zgApsUseInsecureJoin
   \   0000F0   4B00         DW 75
   \   0000F2   0100         DW 1
   \   0000F4   ....         DW zgApsNonMemberRadius
   \   0000F6   0400         DW 4
   \   0000F8   0100         DW 1
   \   0000FA   ....         DW zgStartDelay
   \   0000FC   A100         DW 161
   \   0000FE   0100         DW 1
   \   000100   ....         DW zgSapiEndpoint
   \   000102   3700         DW 55
   \   000104   0100         DW 1
   \   000106   ....         DW zgNwkMgrMode
   \   000108   8800         DW 136
   \   00010A   0100         DW 1
   \   00010C   ....         DW zgNwkMgrMinTransmissions
   \   00010E   3C00         DW 60
   \   000110   0100         DW 1
   \   000112   ....         DW zgRouterOffAssocCleanup
   \   000114   3D00         DW 61
   \   000116   0100         DW 1
   \   000118   ....         DW zgNwkLeaveRequestAllowed
   \   00011A   4900         DW 73
   \   00011C   0200         DW 2
   \   00011E   ....         DW zgNwkCommissionedNwkAddr
   \   000120   6700         DW 103
   \   000122   0100         DW 1
   \   000124   ....         DW zgApsAllowR19Sec
   \   000126   4D00         DW 77
   \   000128   0200         DW 2
   \   00012A   ....         DW zgApscDupRejTimeoutInc
   \   00012C   4E00         DW 78
   \   00012E   0100         DW 1
   \   000130   ....         DW zgApscDupRejTimeoutCount
   \   000132   4F00         DW 79
   \   000134   0200         DW 2
   \   000136   ....         DW zgApsMinDupRejTableSize
   \   000138   3E00         DW 62
   \   00013A   0100         DW 1
   \   00013C   ....         DW zgChildAgingEnable
   \   00013E   5100         DW 81
   \   000140   0100         DW 1
   \   000142   ....         DW zgNwkParentInformation
   \   000144   5200         DW 82
   \   000146   0100         DW 1
   \   000148   ....         DW zgNwkEndDeviceTimeoutDefault
   \   00014A   5300         DW 83
   \   00014C   0100         DW 1
   \   00014E   ....         DW zgEndDeviceTimeoutValue
   \   000150   5400         DW 84
   \   000152   0100         DW 1
   \   000154   ....         DW zgEndDeviceConfiguration
   \   000156   0000         DW 0
   \   000158   0000         DW 0
   \   00015A   0000         DW 0H
    316          {
    317          #if defined ( NV_INIT )
    318          #if !defined MT_TASK
    319            {
    320              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    321            },
    322          #endif
    323            {
    324              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    325            },
    326            {
    327              ZCD_NV_DEVICE_TYPE, sizeof(zgDeviceType), &zgDeviceType
    328            },
    329            {
    330              ZCD_NV_DEVICE_SERIAL, sizeof(SerialNumber), &SerialNumber
    331            },
    332          #if ZG_BUILD_COORDINATOR_TYPE
    333            {
    334               ZCD_NV_DEVICE_TABLE, sizeof(NODE_INFO_t)*6, &AssoList
    335            },
    336          #endif
    337            {
    338              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    339            },
    340            {
    341              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    342            },
    343            {
    344              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    345            },
    346            {
    347              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    348            },
    349            {
    350              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    351            },
    352            {
    353              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    354            },
    355            {
    356              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    357            },
    358            {
    359              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    360            },
    361            {
    362              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    363            },
    364            {
    365              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    366            },
    367            {
    368              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    369            },
    370            {
    371              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    372            },
    373            {
    374              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    375            },
    376            {
    377              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    378            },
    379            {
    380              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    381            },
    382            {
    383              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    384            },
    385            {
    386              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    387            },
    388            {
    389              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    390            },
    391            {
    392              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    393            },
    394            {
    395              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    396            },
    397            {
    398              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    399            },
    400            {
    401              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    402            },
    403          #ifndef NONWK
    404            {
    405              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    406            },
    407            {
    408              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    409            },
    410            {
    411              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    412            },
    413            {
    414              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    415            },
    416            {
    417              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    418            },
    419            {
    420              ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN, zgApsTrustCenterAddr
    421            },
    422            {
    423              ZCD_NV_APS_LINK_KEY_TYPE, sizeof(zgApsLinkKeyType), &zgApsLinkKeyType
    424            },
    425          #endif // NONWK
    426            {
    427              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    428            },
    429            {
    430              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    431            },
    432            {
    433              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    434            },
    435            {
    436              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    437            },
    438            {
    439              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    440            },
    441            {
    442              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    443            },
    444            {
    445              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    446            },
    447            {
    448              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    449            },
    450            {
    451              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    452            },
    453            {
    454              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    455            },
    456            {
    457              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    458            },
    459            {
    460              ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
    461            },
    462            {
    463              ZCD_NV_NWK_LEAVE_REQ_ALLOWED, sizeof(zgNwkLeaveRequestAllowed), &zgNwkLeaveRequestAllowed
    464            },
    465            {
    466              ZCD_NV_COMMISSIONED_NWK_ADDR, sizeof(zgNwkCommissionedNwkAddr), &zgNwkCommissionedNwkAddr
    467            },
    468            {
    469              ZCD_NV_APS_ALLOW_R19_SECURITY, sizeof(zgApsAllowR19Sec), &zgApsAllowR19Sec
    470            },
    471            {
    472              ZCD_NV_APS_DUPREJ_TIMEOUT_INC, sizeof(zgApscDupRejTimeoutInc), &zgApscDupRejTimeoutInc
    473            },
    474            {
    475              ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT, sizeof(zgApscDupRejTimeoutCount), &zgApscDupRejTimeoutCount
    476            },
    477            {
    478              ZCD_NV_APS_DUPREJ_TABLE_SIZE, sizeof(zgApsMinDupRejTableSize), &zgApsMinDupRejTableSize
    479            },
    480            {
    481              ZCD_NV_NWK_CHILD_AGE_ENABLE, sizeof(zgChildAgingEnable), &zgChildAgingEnable
    482            },
    483            {
    484              ZCD_NV_NWK_PARENT_INFO, sizeof(zgNwkParentInformation), &zgNwkParentInformation
    485            },
    486            {
    487              ZCD_NV_NWK_ENDDEV_TIMEOUT_DEF, sizeof(zgNwkEndDeviceTimeoutDefault), &zgNwkEndDeviceTimeoutDefault
    488            },
    489            {
    490              ZCD_NV_END_DEV_TIMEOUT_VALUE, sizeof(zgEndDeviceTimeoutValue), &zgEndDeviceTimeoutValue
    491            },
    492            {
    493              ZCD_NV_END_DEV_CONFIGURATION, sizeof(zgEndDeviceConfiguration), &zgEndDeviceConfiguration
    494            },
    495          #endif // NV_INIT
    496            // Last item -- DO NOT MOVE IT!
    497            {
    498              0x00, 0, NULL
    499            }
    500          };
    501          
    502          /*********************************************************************
    503           * LOCAL FUNCTIONS
    504           */
    505          
    506          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    507          
    508          static void zgUpgradeNVItems( void );
    509          
    510          #ifndef NONWK
    511          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    512          #endif
    513          
    514          /*********************************************************************
    515           * @fn       zgItemInit()
    516           *
    517           * @brief
    518           *
    519           *   Initialize a global item. If the item doesn't exist in NV memory,
    520           *   write the system default (value passed in) into NV memory. But if
    521           *   it exists, set the item to the value stored in NV memory.
    522           *
    523           *   Also, if setDefault is TRUE and the item exists, we will write
    524           *   the default value to NV space.
    525           *
    526           * @param   id - item id
    527           * @param   len - item len
    528           * @param   buf - pointer to the item
    529           * @param   setDefault - TRUE to set default, not read
    530           *
    531           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    532           *          exist in NV, NV_OPER_FAILED if failure.
    533           */
    534          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    535          {
    536            uint8 status;
    537          
    538            // If the item doesn't exist in NV memory, create and initialize
    539            // it with the value passed in.
    540            status = osal_nv_item_init( id, len, buf );
    541            if ( status == ZSUCCESS )
    542            {
    543              if ( setDefault )
    544              {
    545                // Write the default value back to NV
    546                status = osal_nv_write( id, 0, len, buf );
    547              }
    548              else
    549              {
    550                // The item exists in NV memory, read it from NV memory
    551                status = osal_nv_read( id, 0, len, buf );
    552              }
    553            }
    554          
    555            return (status);
    556          }
    557          
    558          /*********************************************************************
    559           * API FUNCTIONS
    560           */
    561          
    562          /*********************************************************************
    563           * @fn          zgInit
    564           *
    565           * @brief
    566           *
    567           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    568           *   NV memory, write the system default into NV memory. But if
    569           *   it exists, set the item to the value stored in NV memory.
    570           *
    571           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    572           *       that the Config state items (zgItemTable) need to be
    573           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    574           *
    575           * @param       none
    576           *
    577           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    578           *              exist in NV, NV_OPER_FAILED if failure.
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          uint8 zgInit( void )
   \                     zgInit:
    581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    582            uint8  setDefault = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
    583          
    584            // Do we want to default the Config state values
    585            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   00000C                ; Setup parameters for call to function zgReadStartupOptions
   \   00000C   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000F   E9           MOV     A,R1
   \   000010   F8           MOV     R0,A
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5002         JNC     ??zgInit_0
    586            {
    587              setDefault = TRUE;
   \   000015   7E01         MOV     R6,#0x1
    588            }
    589          
    590          #if defined ( FEATURE_SYSTEM_STATS )
    591            {
    592              // This sections tracks the number of resets
    593              uint16 bootCnt = 0;
   \                     ??zgInit_0:
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   12....       LCALL   ??Subroutine2_0 & 0xFFFF
    594          
    595              // Update the Boot Counter
    596              if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   7C02         MOV     R4,#0x2
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A02         MOV     R2,#0x2
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   \   000036   E9           MOV     A,R1
   \   000037   7020         JNZ     ??zgInit_1
    597              {
    598                // Get the old value from NV memory
    599                osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
   \   000039                ; Setup parameters for call to function osal_nv_read
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   75..02       MOV     ?V0,#0x2
   \   000041   75..00       MOV     ?V1,#0x0
   \   000044   78..         MOV     R0,#?V0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7C00         MOV     R4,#0x0
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   7A02         MOV     R2,#0x2
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000054   7404         MOV     A,#0x4
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
    600              }
    601          
    602              // Increment the Boot Counter and store it into NV memory
    603              if ( setDefault )
   \                     ??zgInit_1:
   \   000059   EE           MOV     A,R6
   \   00005A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   5005         JNC     ??zgInit_2
    604              {
    605                bootCnt = 0;
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   8008         SJMP    ??zgInit_3
    606              }
    607              else
    608              {
    609                bootCnt++;
   \                     ??zgInit_2:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   2401         ADD     A,#0x1
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   3400         ADDC    A,#0x0
    610              }
    611          
    612              osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    613            }
   \                     ??zgInit_3:
   \   000071   12....       LCALL   ??Subroutine2_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   75..02       MOV     ?V0,#0x2
   \   00007A   75..00       MOV     ?V1,#0x0
   \   00007D   78..         MOV     R0,#?V0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   7C00         MOV     R4,#0x0
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7A02         MOV     R2,#0x2
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00008D   7404         MOV     A,#0x4
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    614          #endif  // FEATURE_SYSTEM_STATS
    615          
    616            zgUpgradeNVItems();
   \   000092                ; Setup parameters for call to function osal_nv_item_len
   \   000092   7A24         MOV     R2,#0x24
   \   000094   7B00         MOV     R3,#0x0
   \   000096   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000099   8A..         MOV     ?V0,R2
   \   00009B   8B..         MOV     ?V1,R3
   \   00009D                ; Setup parameters for call to function osal_nv_item_len
   \   00009D   7A35         MOV     R2,#0x35
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0000A4   8B..         MOV     ?V3,R3
   \   0000A6   EA           MOV     A,R2
   \   0000A7   45..         ORL     A,?V3
   \   0000A9   7072         JNZ     ??zgInit_4
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   65..         XRL     A,?V0
   \   0000AF   45..         ORL     A,?V1
   \   0000B1   706A         JNZ     ??zgInit_4
   \   0000B3                ; Setup parameters for call to function osal_nv_read
   \   0000B3   A8..         MOV     R0,?XSP + 0
   \   0000B5   A9..         MOV     R1,?XSP + 1
   \   0000B7   88..         MOV     ?V0,R0
   \   0000B9   89..         MOV     ?V1,R1
   \   0000BB   78..         MOV     R0,#?V0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   75..02       MOV     ?V0,#0x2
   \   0000C3   75..00       MOV     ?V1,#0x0
   \   0000C6   78..         MOV     R0,#?V0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   7C00         MOV     R4,#0x0
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   7A24         MOV     R2,#0x24
   \   0000D1   7B00         MOV     R3,#0x0
   \   0000D3   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000D6   7404         MOV     A,#0x4
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F8           MOV     R0,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F9           MOV     R1,A
   \   0000E6   E8           MOV     A,R0
   \   0000E7   FA           MOV     R2,A
   \   0000E8   E9           MOV     A,R1
   \   0000E9   FB           MOV     R3,A
   \   0000EA   90....       MOV     DPTR,#zgPollRate
   \   0000ED   EA           MOV     A,R2
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   EB           MOV     A,R3
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E4           CLR     A
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7                ; Setup parameters for call to function osal_nv_item_init
   \   0000F7   75....       MOV     ?V0,#zgPollRate & 0xff
   \   0000FA   75....       MOV     ?V1,#(zgPollRate >> 8) & 0xff
   \   0000FD   78..         MOV     R0,#?V0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   7C04         MOV     R4,#0x4
   \   000104   7D00         MOV     R5,#0x0
   \   000106   7A35         MOV     R2,#0x35
   \   000108   7B00         MOV     R3,#0x0
   \   00010A   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112                ; Setup parameters for call to function osal_nv_delete
   \   000112   7C02         MOV     R4,#0x2
   \   000114   7D00         MOV     R5,#0x0
   \   000116   7A24         MOV     R2,#0x24
   \   000118   7B00         MOV     R3,#0x0
   \   00011A   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
    617          
    618            // Initialize the Extended PAN ID as my own extended address
    619            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_4:
   \   00011D                ; Setup parameters for call to function ZMacGetReq
   \   00011D   7A..         MOV     R2,#zgExtendedPANID & 0xff
   \   00011F   7B..         MOV     R3,#(zgExtendedPANID >> 8) & 0xff
   \   000121   79E2         MOV     R1,#-0x1e
   \   000123   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    620          
    621            // Initialize the items table
    622            zgInitItems( setDefault );
   \   000126                ; Setup parameters for call to function zgInitItems
   \   000126   EE           MOV     A,R6
   \   000127   F9           MOV     R1,A
   \   000128   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    623          
    624          #ifndef NONWK
    625            if ( ZG_SECURE_ENABLED )
    626            {
    627              // Initialize the Pre-Configured Key to the default key
    628              zgPreconfigKeyInit( setDefault );
   \   00012B                ; Setup parameters for call to function osal_memcpy
   \   00012B   75....       MOV     ?V0,#defaultKey & 0xff
   \   00012E   75....       MOV     ?V1,#(defaultKey >> 8) & 0xff
   \   000131   75..80       MOV     ?V2,#-0x80
   \   000134   78..         MOV     R0,#?V0
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000139   7C10         MOV     R4,#0x10
   \   00013B   7D00         MOV     R5,#0x0
   \   00013D   7405         MOV     A,#0x5
   \   00013F   12....       LCALL   ?XSTACK_DISP101_8
   \   000142   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000145   7403         MOV     A,#0x3
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014A                ; Setup parameters for call to function osal_nv_item_init
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?XSTACK_DISP100_8
   \   00014F   88..         MOV     ?V0,R0
   \   000151   89..         MOV     ?V1,R1
   \   000153   78..         MOV     R0,#?V0
   \   000155   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000158   7C10         MOV     R4,#0x10
   \   00015A   7D00         MOV     R5,#0x0
   \   00015C   7A62         MOV     R2,#0x62
   \   00015E   7B00         MOV     R3,#0x0
   \   000160   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?DEALLOC_XSTACK8
   \   000168   E9           MOV     A,R1
   \   000169   7025         JNZ     ??zgInit_5
   \   00016B   EE           MOV     A,R6
   \   00016C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00016E   5020         JNC     ??zgInit_5
   \   000170                ; Setup parameters for call to function osal_nv_write
   \   000170   78..         MOV     R0,#?V0
   \   000172   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000175   75..10       MOV     ?V0,#0x10
   \   000178   75..00       MOV     ?V1,#0x0
   \   00017B   78..         MOV     R0,#?V0
   \   00017D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000180   7C00         MOV     R4,#0x0
   \   000182   7D00         MOV     R5,#0x0
   \   000184   7A62         MOV     R2,#0x62
   \   000186   7B00         MOV     R3,#0x0
   \   000188   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00018B   7404         MOV     A,#0x4
   \   00018D   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zgInit_5:
   \   000190                ; Setup parameters for call to function osal_memset
   \   000190   7C10         MOV     R4,#0x10
   \   000192   7D00         MOV     R5,#0x0
   \   000194   7900         MOV     R1,#0x0
   \   000196   7402         MOV     A,#0x2
   \   000198   12....       LCALL   ?XSTACK_DISP101_8
   \   00019B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    629          
    630              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    631              ZDSecMgrInitNVKeyTables( setDefault );
   \   00019E                ; Setup parameters for call to function ZDSecMgrInitNVKeyTables
   \   00019E   EE           MOV     A,R6
   \   00019F   F9           MOV     R1,A
   \   0001A0   12....       LCALL   `??ZDSecMgrInitNVKeyTables::?relay`; Banked call to: ZDSecMgrInitNVKeyTables
    632            }
    633          #endif // NONWK
    634          
    635            // Clear the Config State default
    636            if ( setDefault )
   \   0001A3   EE           MOV     A,R6
   \   0001A4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001A6   5007         JNC     ??zgInit_6
    637            {
    638              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   0001A8                ; Setup parameters for call to function zgWriteStartupOptions
   \   0001A8   7A01         MOV     R2,#0x1
   \   0001AA   7900         MOV     R1,#0x0
   \   0001AC   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    639            }
    640          
    641            return ( ZSUCCESS );
   \                     ??zgInit_6:
   \   0001AF   7900         MOV     R1,#0x0
   \   0001B1   7412         MOV     A,#0x12
   \   0001B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B6   7F04         MOV     R7,#0x4
   \   0001B8   02....       LJMP    ?BANKED_LEAVE_XDATA
    642          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET
    643          
    644          /*********************************************************************
    645           * @fn          zgInitItems
    646           *
    647           * @brief       Initializes RAM variables from NV.  If NV items don't
    648           *              exist, then the NV is initialize with what is in RAM
    649           *              variables.
    650           *
    651           * @param       none
    652           *
    653           * @return      none
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V5,R1
    657            uint8  i = 0;
   \   000007   75..00       MOV     ?V4,#0x0
    658          
    659            if ( ZG_BUILD_COORDINATOR_TYPE && ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY ) )
   \   00000A   90....       MOV     DPTR,#zgApsLinkKeyType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   000011   7003         JNZ     ??zgInitItems_0
    660            {
    661              zgUseDefaultTCLK = FALSE;
   \   000013   E4           CLR     A
   \   000014   8002         SJMP    ??zgInitItems_1
    662            }
    663            else
    664            {
    665              // Most of the time default TCLK will be used
    666              zgUseDefaultTCLK = TRUE;
   \                     ??zgInitItems_0:
   \   000016   7401         MOV     A,#0x1
   \                     ??zgInitItems_1:
   \   000018   F0           MOVX    @DPTR,A
   \   000019   801A         SJMP    ??zgInitItems_2
    667            }
    668          
    669            while ( zgItemTable[i].id != 0x00 )
    670            {
   \                     ??zgInitItems_3:
   \   00001B                ; Setup parameters for call to function osal_nv_read
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \                     ??zgInitItems_4:
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
    671              // Initialize the item
    672              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    673          
    674              // Move on to the next item
    675              i++;
   \                     ??zgInitItems_5:
   \   000033   05..         INC     ?V4
   \                     ??zgInitItems_2:
   \   000035   E5..         MOV     A,?V4
   \   000037   75F006       MOV     B,#0x6
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   A9F0         MOV     R1,B
   \   00003E   74..         MOV     A,#zgItemTable & 0xff
   \   000040   28           ADD     A,R0
   \   000041   F8           MOV     R0,A
   \   000042   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   000044   39           ADDC    A,R1
   \   000045   F9           MOV     R1,A
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   E4           CLR     A
   \   00004B   93           MOVC    A,@A+DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   7401         MOV     A,#0x1
   \   00004F   93           MOVC    A,@A+DPTR
   \   000050   FB           MOV     R3,A
   \   000051   EA           MOV     A,R2
   \   000052   4B           ORL     A,R3
   \   000053   606E         JZ      ??zgInitItems_6
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E4           CLR     A
   \   00005A   93           MOVC    A,@A+DPTR
   \   00005B   F5..         MOV     ?V2,A
   \   00005D   7401         MOV     A,#0x1
   \   00005F   93           MOVC    A,@A+DPTR
   \   000060   F5..         MOV     ?V3,A
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E4           CLR     A
   \   000069   93           MOVC    A,@A+DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   7401         MOV     A,#0x1
   \   00006E   93           MOVC    A,@A+DPTR
   \   00006F   F583         MOV     DPH,A
   \   000071   D082         POP     DPL
   \   000073   8582..       MOV     ?V0,DPL
   \   000076   8583..       MOV     ?V1,DPH
   \   000079   8882         MOV     DPL,R0
   \   00007B   8983         MOV     DPH,R1
   \   00007D   E4           CLR     A
   \   00007E   93           MOVC    A,@A+DPTR
   \   00007F   C0E0         PUSH    A
   \   000081   7401         MOV     A,#0x1
   \   000083   93           MOVC    A,@A+DPTR
   \   000084   F583         MOV     DPH,A
   \   000086   D082         POP     DPL
   \   000088   AE82         MOV     R6,DPL
   \   00008A   AF83         MOV     R7,DPH
   \   00008C                ; Setup parameters for call to function osal_nv_item_init
   \   00008C   78..         MOV     R0,#?V2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   AC..         MOV     R4,?V0
   \   000093   AD..         MOV     R5,?V1
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A1   E9           MOV     A,R1
   \   0000A2   708F         JNZ     ??zgInitItems_5
   \   0000A4   E5..         MOV     A,?V5
   \   0000A6   78..         MOV     R0,#?V2
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??zgInitItems_3 & 0xFFFF
   \   0000AD                ; Setup parameters for call to function osal_nv_write
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   78..         MOV     R0,#?V0
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   7C00         MOV     R4,#0x0
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   EE           MOV     A,R6
   \   0000BA   FA           MOV     R2,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   FB           MOV     R3,A
   \   0000BD   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000C0   02....       LJMP    ??zgInitItems_4 & 0xFFFF
    676            }
    677          }
   \                     ??zgInitItems_6:
   \   0000C3   7F06         MOV     R7,#0x6
   \   0000C5   02....       LJMP    ?BANKED_LEAVE_XDATA
    678          
    679          /*********************************************************************
    680           * @fn          zgReadStartupOptions
    681           *
    682           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    683           *
    684           * @param       none
    685           *
    686           * @return      the ZCD_NV_STARTUP_OPTION NV item
    687           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    688          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    689          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    690            // Default to Use Config State and Use Network State
    691            uint8 startupOption = 0;
   \   00000A   12....       LCALL   ?Subroutine1 & 0xFFFF
    692          
    693            // This should have been done in ZMain.c, but just in case.
    694            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    695                                        sizeof(startupOption),
    696                                        &startupOption ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A03         MOV     R2,#0x3
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   E9           MOV     A,R1
   \   000021   7020         JNZ     ??zgReadStartupOptions_0
    697            {
    698              // Read saved startup control
    699              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    700                            0,
    701                            sizeof( startupOption ),
    702                            &startupOption);
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..01       MOV     ?V0,#0x1
   \   00002B   75..00       MOV     ?V1,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV     R4,#0x0
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7A03         MOV     R2,#0x3
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    703            }
    704            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B                REQUIRE ?Subroutine0
   \   00004B                ; // Fall through to label ?Subroutine0
    705          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine2_0
   \   000007                ; // Fall through to label ??Subroutine2_0
    706          
    707          /*********************************************************************
    708           * @fn          zgWriteStartupOptions
    709           *
    710           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    711           *
    712           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    713           *               clear bit. The set bit is an OR operation, and the
    714           *               clear bit is an AND ~(bitOptions) operation.
    715           *
    716           * @param       bitOptions - which bits to perform action on:
    717           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    718           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    719           *
    720           * @return      ZSUCCESS if successful
    721           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    722          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    723          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    724            uint8 status;
    725            uint8 startupOptions = 0;
   \   00000E   12....       LCALL   ?Subroutine1 & 0xFFFF
    726          
    727            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    728                          0,
    729                          sizeof( startupOptions ),
    730                          &startupOptions );
   \                     ??CrossCallReturnLabel_1:
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..01       MOV     ?V0,#0x1
   \   000017   75..00       MOV     ?V1,#0x0
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV     R4,#0x0
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A03         MOV     R2,#0x3
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   E9           MOV     A,R1
   \   000030   F9           MOV     R1,A
    731          
    732            if ( status == ZSUCCESS )
   \   000031   703E         JNZ     ??zgWriteStartupOptions_0
    733            {
    734              if ( action == ZG_STARTUP_SET )
   \   000033   74FF         MOV     A,#-0x1
   \   000035   6E           XRL     A,R6
   \   000036   700A         JNZ     ??zgWriteStartupOptions_1
    735              {
    736                // Set bits
    737                startupOptions |= bitOptions;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   4F           ORL     A,R7
   \   000040   800C         SJMP    ??zgWriteStartupOptions_2
    738              }
    739              else
    740              {
    741                // Clear bits
    742                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000042   74FF         MOV     A,#-0x1
   \   000044   6F           XRL     A,R7
   \   000045   F8           MOV     R0,A
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   58           ANL     A,R0
    743              }
    744          
    745              // Changed?
    746              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    747                           0,
    748                           sizeof( startupOptions ),
    749                           &startupOptions );
    750            }
   \                     ??zgWriteStartupOptions_2:
   \   00004E   12....       LCALL   ??Subroutine2_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   75..01       MOV     ?V0,#0x1
   \   000057   75..00       MOV     ?V1,#0x0
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7C00         MOV     R4,#0x0
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7A03         MOV     R2,#0x3
   \   000065   7B00         MOV     R3,#0x0
   \   000067   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00006A   7404         MOV     A,#0x4
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   E9           MOV     A,R1
   \   000070   F9           MOV     R1,A
    751          
    752            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   000071   80..         SJMP    ?Subroutine0
    753          }
    754          
    755          /*********************************************************************
    756           * @fn          zgSetItem
    757           *
    758           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    759           *
    760           * @param       id - NV ID
    761           *              len - NV item length
    762           *              buf - pointer to the input buffer
    763           *
    764           * @return      none
    765           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    766          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    767          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    768          
    769            uint8  i = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   8002         SJMP    ??zgSetItem_0
    770          
    771            // Look up the NV item table
    772            while ( zgItemTable[i].id != 0x00 )
    773            {
    774              if( zgItemTable[i].id == id )
    775              {
    776                if ( zgItemTable[i].len == len )
    777                {
    778                  osal_memcpy( zgItemTable[i].buf, buf, len );
    779                }
    780                break;
    781              }
    782              // Move on to the next item
    783              i++;
   \                     ??zgSetItem_1:
   \   00000A   05..         INC     ?V0
   \                     ??zgSetItem_0:
   \   00000C   E5..         MOV     A,?V0
   \   00000E   75F006       MOV     B,#0x6
   \   000011   A4           MUL     AB
   \   000012   F8           MOV     R0,A
   \   000013   A9F0         MOV     R1,B
   \   000015   74..         MOV     A,#zgItemTable & 0xff
   \   000017   28           ADD     A,R0
   \   000018   F8           MOV     R0,A
   \   000019   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00001B   39           ADDC    A,R1
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E4           CLR     A
   \   000026   93           MOVC    A,@A+DPTR
   \   000027   C0E0         PUSH    A
   \   000029   7401         MOV     A,#0x1
   \   00002B   93           MOVC    A,@A+DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   D082         POP     DPL
   \   000030   A882         MOV     R0,DPL
   \   000032   A983         MOV     R1,DPH
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   6048         JZ      ??zgSetItem_2
   \   000038   EA           MOV     A,R2
   \   000039   68           XRL     A,R0
   \   00003A   7002         JNZ     ??zgSetItem_3
   \   00003C   EB           MOV     A,R3
   \   00003D   69           XRL     A,R1
   \                     ??zgSetItem_3:
   \   00003E   70CA         JNZ     ??zgSetItem_1
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E4           CLR     A
   \   000047   93           MOVC    A,@A+DPTR
   \   000048   F8           MOV     R0,A
   \   000049   7401         MOV     A,#0x1
   \   00004B   93           MOVC    A,@A+DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   EC           MOV     A,R4
   \   00004E   68           XRL     A,R0
   \   00004F   7002         JNZ     ??zgSetItem_4
   \   000051   ED           MOV     A,R5
   \   000052   69           XRL     A,R1
   \                     ??zgSetItem_4:
   \   000053   702B         JNZ     ??zgSetItem_2
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   740B         MOV     A,#0xb
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V1,A
   \   000061   75..00       MOV     ?V2,#0x0
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E4           CLR     A
   \   000072   93           MOVC    A,@A+DPTR
   \   000073   FA           MOV     R2,A
   \   000074   7401         MOV     A,#0x1
   \   000076   93           MOVC    A,@A+DPTR
   \   000077   FB           MOV     R3,A
   \   000078   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
    784            }
    785          }
   \                     ??zgSetItem_2:
   \   000080   7F03         MOV     R7,#0x3
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultRejoinBackoff>`:
   \   000000   A0BB0D00     DD 900000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultRejoinScan>`:
   \   000000   A0BB0D00     DD 900000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurityMode>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkLeaveRequestAllowed>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkParentInformation>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkEndDeviceTimeoutDefault`:
   \   000000   08           DB 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgEndDeviceTimeoutValue>`:
   \   000000   08           DB 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgChildAgingEnable>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkCommissionedNwkAddr>`:
   \   000000   FEFF         DW 65534

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutInc>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutCount>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsMinDupRejTableSize>`:
   \   000000   0500         DW 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPreConfigKeys>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsLinkKeyType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   FFFF         DW 65535

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInitItems::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgReadStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgWriteStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgSetItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem
    786          
    787          #ifndef NONWK
    788          /*********************************************************************
    789           * @fn       zgPreconfigKeyInit()
    790           *
    791           * @brief
    792           *
    793           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    794           *   write the system default (value passed in) into NV memory. But if
    795           *   it exists do not overwrite it.
    796           *
    797           *   Also, if setDefault is TRUE and the item exists, we will write
    798           *   the default value to NV space.
    799           *
    800           * @param   setDefault - TRUE to set default
    801           *
    802           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    803           *          exist in NV, NV_OPER_FAILED if failure.
    804           */
    805          static uint8 zgPreconfigKeyInit( uint8 setDefault )
    806          {
    807            uint8 zgPreConfigKey[SEC_KEY_LEN];
    808            uint8 status;
    809          
    810            // Initialize the Pre-Configured Key to the default key
    811            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
    812          
    813            // If the item doesn't exist in NV memory, create and initialize it
    814            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
    815            if ( status == ZSUCCESS )
    816            {
    817              if ( setDefault )
    818              {
    819                // Write the default value back to NV
    820                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
    821              }
    822            }
    823          
    824            // clear local copy of default key
    825            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    826          
    827            return (status);
    828          }
    829          #endif
    830          
    831          /*********************************************************************
    832           * @fn       zgUpgradeNVItems()
    833           *
    834           * @brief
    835           *
    836           *   Function that upgrades NV Items that have changed.
    837           *
    838           * @param   none
    839           *
    840           * @return  none
    841           */
    842          static void zgUpgradeNVItems( void )
    843          {
    844          #if defined ( ZCD_NV_POLL_RATE_OLD16 )
    845            {
    846              // This conversion will only happen if the old poll rate exists and
    847              // the new poll rate doesn't exist.  It will read the old poll rate,
    848              // convert it to the new poll rate, create the new poll rate NV item,
    849              // then delete the old poll rate NV item.
    850              uint16 oldNvLen;
    851              uint16 newNvLen;
    852          
    853              // Use the length of the NV items to determine if they exist
    854              oldNvLen = osal_nv_item_len( ZCD_NV_POLL_RATE_OLD16 );
    855              newNvLen = osal_nv_item_len( ZCD_NV_POLL_RATE );
    856              if ( (newNvLen == 0) && (oldNvLen == sizeof ( uint16 )) )
    857              {
    858                // The old poll rate exists, so read it and convert to the new 32 bit poll rate
    859                uint16 oldPollRate;
    860                osal_nv_read( ZCD_NV_POLL_RATE_OLD16, 0, sizeof(uint16), &oldPollRate );
    861                zgPollRate = (uint32)oldPollRate;
    862                osal_nv_item_init( ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate );
    863                osal_nv_delete( ZCD_NV_POLL_RATE_OLD16, oldNvLen );
    864              }
    865            }
    866          #endif // ZCD_NV_POLL_RATE_OLD16
    867          }
    868          
    869          /*********************************************************************
    870          *********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
     34   zgInit
       30   -> ZDSecMgrInitNVKeyTables
       30   -> ZMacGetReq
       33   -> osal_memcpy
       30   -> osal_memset
       30   -> osal_nv_delete
       32   -> osal_nv_item_init
       30   -> osal_nv_item_len
       34   -> osal_nv_read
       34   -> osal_nv_write
       30   -> zgInitItems
       30   -> zgReadStartupOptions
       30   -> zgWriteStartupOptions
     48   zgInitItems
       16   -> osal_nv_item_init
       18   -> osal_nv_read
       18   -> osal_nv_write
     45   zgReadStartupOptions
       13   -> osal_nv_item_init
       15   -> osal_nv_read
     16   zgSetItem
       14   -> osal_memcpy
     45   zgWriteStartupOptions
       15   -> osal_nv_read
       15   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zgApsAckWaitMultiplier>
       2  ?<Initializer for zgApsDefaultMaxBindingTime>
       1  ?<Initializer for zgApsLinkKeyType>
       2  ?<Initializer for zgApsMinDupRejTableSize>
       1  ?<Initializer for zgApsNonMemberRadius>
       1  ?<Initializer for zgApsUseInsecureJoin>
       2  ?<Initializer for zgApscAckWaitDurationPolled>
       1  ?<Initializer for zgApscDupRejTimeoutCount>
       2  ?<Initializer for zgApscDupRejTimeoutInc>
       1  ?<Initializer for zgApscMaxFrameRetries>
       1  ?<Initializer for zgBcastDeliveryTime>
       1  ?<Initializer for zgChildAgingEnable>
       1  ?<Initializer for zgConcentratorRadius>
       2  ?<Initializer for zgConfigPANID>
       4  ?<Initializer for zgDefaultChannelList>
       4  ?<Initializer for zgDefaultRejoinBackoff>
       4  ?<Initializer for zgDefaultRejoinScan>
       1  ?<Initializer for zgDefaultStartingScanDuratio
       1  ?<Initializer for zgEndDeviceTimeoutValue>
       1  ?<Initializer for zgIndirectMsgTimeout>
       1  ?<Initializer for zgMaxBcastRetires>
       1  ?<Initializer for zgMaxDataRetries>
       1  ?<Initializer for zgMaxPollFailureRetries>
       2  ?<Initializer for zgNwkCommissionedNwkAddr>
       1  ?<Initializer for zgNwkEndDeviceTimeoutDefault
       1  ?<Initializer for zgNwkLeaveRequestAllowed>
       1  ?<Initializer for zgNwkMgrMinTransmissions>
       1  ?<Initializer for zgNwkMgrMode>
       1  ?<Initializer for zgNwkMode>
       1  ?<Initializer for zgNwkParentInformation>
       1  ?<Initializer for zgNwkSrcRtgExpiryTime>
       1  ?<Initializer for zgPassiveAckTimeout>
       4  ?<Initializer for zgPollRate>
       1  ?<Initializer for zgPreConfigKeys>
       2  ?<Initializer for zgQueuedPollRate>
       2  ?<Initializer for zgRejoinPollRate>
       2  ?<Initializer for zgResponsePollRate>
       1  ?<Initializer for zgRouteDiscoveryTime>
       1  ?<Initializer for zgRouteExpiryTime>
       1  ?<Initializer for zgSapiEndpoint>
       1  ?<Initializer for zgSecurePermitJoin>
       1  ?<Initializer for zgSecurityMode>
       1  ?<Initializer for zgStackProfile>
       1  ?<Initializer for zgStartDelay>
      12  ??Subroutine2_0
      10  ?Subroutine0
       7  ?Subroutine1
      10  SerialNumber
       1  zgApsAckWaitMultiplier
       1  zgApsAllowR19Sec
       2  zgApsDefaultMaxBindingTime
       1  zgApsLinkKeyType
       2  zgApsMinDupRejTableSize
       1  zgApsNonMemberRadius
       8  zgApsTrustCenterAddr
       8  zgApsUseExtendedPANID
       1  zgApsUseInsecureJoin
       2  zgApscAckWaitDurationPolled
       1  zgApscDupRejTimeoutCount
       2  zgApscDupRejTimeoutInc
       1  zgApscMaxFrameRetries
       1  zgBcastDeliveryTime
       1  zgChildAgingEnable
       1  zgConcentratorDiscoveryTime
       1  zgConcentratorEnable
       1  zgConcentratorRC
       1  zgConcentratorRadius
       2  zgConfigPANID
       4  zgDefaultChannelList
       4  zgDefaultRejoinBackoff
       4  zgDefaultRejoinScan
       1  zgDefaultStartingScanDuration
       1  zgDeviceLogicalType
       1  zgDeviceNum
       1  zgDeviceType
       1  zgEndDeviceConfiguration
       4  zgEndDeviceKAInterval
       1  zgEndDeviceTimeoutValue
       8  zgExtendedPANID
       1  zgIndirectMsgTimeout
     443  zgInit
       6  zgInit::?relay
     200  zgInitItems
       6  zgInitItems::?relay
     348  zgItemTable
       1  zgMaxBcastRetires
       1  zgMaxDataRetries
       1  zgMaxPollFailureRetries
       2  zgNwkCommissionedNwkAddr
       1  zgNwkEndDeviceTimeoutDefault
       1  zgNwkLeaveRequestAllowed
       1  zgNwkMgrMinTransmissions
       1  zgNwkMgrMode
       1  zgNwkMode
       1  zgNwkParentInformation
       1  zgNwkSrcRtgExpiryTime
       1  zgPassiveAckTimeout
       4  zgPollRate
       1  zgPreConfigKeys
       2  zgQueuedPollRate
      75  zgReadStartupOptions
       6  zgReadStartupOptions::?relay
       2  zgRejoinPollRate
       2  zgResponsePollRate
       1  zgRouteDiscoveryTime
       1  zgRouteExpiryTime
       1  zgRouterOffAssocCleanup
       1  zgSapiEndpoint
       1  zgSecurePermitJoin
       1  zgSecurityMode
     133  zgSetItem
       6  zgSetItem::?relay
       1  zgStackProfile
       1  zgStartDelay
       1  zgUseDefaultTCLK
     115  zgWriteStartupOptions
       6  zgWriteStartupOptions::?relay
       1  zgZdoDirectCB

 
 995 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 348 bytes in segment CODE_C
  65 bytes in segment XDATA_I
  65 bytes in segment XDATA_ID
  49 bytes in segment XDATA_Z
 
 1 438 bytes of CODE  memory
   114 bytes of XDATA memory

Errors: none
Warnings: none
