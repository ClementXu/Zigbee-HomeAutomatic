///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               28/Sep/2016  00:06:46
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=10000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        HOLD_AUTO_START -D xBUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -D ZCL_WD -D
//        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
//        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR -lC "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zha_project.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zha_project

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zha_project_BasicResetCB::?relay`,0203H
        FUNCTION `??zha_project_HandleKeys::?relay`,0203H
        FUNCTION `??zha_project_IdentifyCB::?relay`,0203H
        FUNCTION `??zha_project_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zha_project_Init::?relay`
        FUNCTION `??zha_project_Init::?relay`,0203H
        FUNCTION `??zha_project_LevelControlMoveToLevelCB::?relay`,0203H
        FUNCTION `??zha_project_OnOffCB::?relay`,0203H
        FUNCTION `??zha_project_ProcessInReadRspCmd::?relay`,0203H
        FUNCTION `??zha_project_ProcessInReportCmd::?relay`,0203H
        FUNCTION `??zha_project_ProcessZDOMsgs::?relay`,0203H
        PUBLIC `??zha_project_event_loop::?relay`
        FUNCTION `??zha_project_event_loop::?relay`,0203H
        PUBWEAK __Constant_c8
        PUBLIC dstAddr
        PUBLIC ep
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC netState
        PUBLIC zha_projectSeqNum
        PUBLIC zha_project_ActiveEP
        FUNCTION zha_project_BasicResetCB,021603H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zha_project_CurrentLevel32
        PUBLIC zha_project_DstAddr
        FUNCTION zha_project_HandleKeys,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zha_project_IdentifyCB,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zha_project_IdentifyQueryRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zha_project_Init
        FUNCTION zha_project_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zha_project_LevelControlMoveToLevelCB,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zha_project_LevelLastLevel
        PUBLIC zha_project_NewLevel
        PUBLIC zha_project_NewLevelUp
        PUBLIC zha_project_NwkState
        FUNCTION zha_project_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zha_project_ProcessInReadRspCmd,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 71, STACK
        FUNCTION zha_project_ProcessInReportCmd,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 71, STACK
        FUNCTION zha_project_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC zha_project_Rate32
        PUBLIC zha_project_TaskID
        PUBLIC zha_project_WithOnOff
        PUBLIC zha_project_epDesc
        PUBLIC zha_project_event_loop
        FUNCTION zha_project_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
`??APSME_LookupExtAddr::?relay` SYMBOL "?relay", APSME_LookupExtAddr
AT_Init             SYMBOL "AT_Init"
`??AT_Init::?relay` SYMBOL "?relay", AT_Init
CheckDeviceStatus   SYMBOL "CheckDeviceStatus"
`??CheckDeviceStatus::?relay` SYMBOL "?relay", CheckDeviceStatus
Device_type_Init    SYMBOL "Device_type_Init"
`??Device_type_Init::?relay` SYMBOL "?relay", Device_type_Init
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
`??NLME_PermitJoiningRequest::?relay` SYMBOL "?relay", NLME_PermitJoiningRequest
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
SendCommond         SYMBOL "SendCommond"
`??SendCommond::?relay` SYMBOL "?relay", SendCommond
SerialApp_Init      SYMBOL "SerialApp_Init"
`??SerialApp_Init::?relay` SYMBOL "?relay", SerialApp_Init
SetTempDeviceBAT    SYMBOL "SetTempDeviceBAT"
`??SetTempDeviceBAT::?relay` SYMBOL "?relay", SetTempDeviceBAT
SetTempDeviceEP     SYMBOL "SetTempDeviceEP"
`??SetTempDeviceEP::?relay` SYMBOL "?relay", SetTempDeviceEP
SetTempDeviceHW     SYMBOL "SetTempDeviceHW"
`??SetTempDeviceHW::?relay` SYMBOL "?relay", SetTempDeviceHW
SetTempDeviceManuName SYMBOL "SetTempDeviceManuName"
`??SetTempDeviceManuName::?relay` SYMBOL "?relay", SetTempDeviceManuName
SetTempDeviceSA     SYMBOL "SetTempDeviceSA"
`??SetTempDeviceSA::?relay` SYMBOL "?relay", SetTempDeviceSA
SetTempDeviceSerial SYMBOL "SetTempDeviceSerial"
`??SetTempDeviceSerial::?relay` SYMBOL "?relay", SetTempDeviceSerial
SetTempDeviceType   SYMBOL "SetTempDeviceType"
`??SetTempDeviceType::?relay` SYMBOL "?relay", SetTempDeviceType
UpdateDeviceStatus1 SYMBOL "UpdateDeviceStatus1"
`??UpdateDeviceStatus1::?relay` SYMBOL "?relay", UpdateDeviceStatus1
UpdateDeviceStatus2 SYMBOL "UpdateDeviceStatus2"
`??UpdateDeviceStatus2::?relay` SYMBOL "?relay", UpdateDeviceStatus2
UpdateDeviceStatus3 SYMBOL "UpdateDeviceStatus3"
`??UpdateDeviceStatus3::?relay` SYMBOL "?relay", UpdateDeviceStatus3
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
`??ZDO_ParseDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_ParseMgmtBindRsp SYMBOL "ZDO_ParseMgmtBindRsp"
`??ZDO_ParseMgmtBindRsp::?relay` SYMBOL "?relay", ZDO_ParseMgmtBindRsp
ZDO_ParseSimpleDescRsp SYMBOL "ZDO_ParseSimpleDescRsp"
`??ZDO_ParseSimpleDescRsp::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
`??ZDP_BindUnbindReq::?relay` SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 86>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 86>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_ProcessMessageMSG SYMBOL "zcl_ProcessMessageMSG"
`??zcl_ProcessMessageMSG::?relay` SYMBOL "?relay", zcl_ProcessMessageMSG
zcl_SendRead        SYMBOL "zcl_SendRead"
`??zcl_SendRead::?relay` SYMBOL "?relay", zcl_SendRead
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zha_project_Init    SYMBOL "zha_project_Init"
`??zha_project_Init::?relay` SYMBOL "?relay", zha_project_Init
zha_project_event_loop SYMBOL "zha_project_event_loop"
`??zha_project_event_loop::?relay` SYMBOL "?relay", zha_project_event_loop

        EXTERN `??APSME_LookupExtAddr::?relay`
        FUNCTION `??APSME_LookupExtAddr::?relay`,00H
        EXTERN `??AT_Init::?relay`
        FUNCTION `??AT_Init::?relay`,00H
        EXTERN `??CheckDeviceStatus::?relay`
        FUNCTION `??CheckDeviceStatus::?relay`,00H
        EXTERN `??Device_type_Init::?relay`
        FUNCTION `??Device_type_Init::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_PermitJoiningRequest::?relay`
        FUNCTION `??NLME_PermitJoiningRequest::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??SendCommond::?relay`
        FUNCTION `??SendCommond::?relay`,00H
        EXTERN `??SerialApp_Init::?relay`
        FUNCTION `??SerialApp_Init::?relay`,00H
        EXTERN `??SetTempDeviceBAT::?relay`
        FUNCTION `??SetTempDeviceBAT::?relay`,00H
        EXTERN `??SetTempDeviceEP::?relay`
        FUNCTION `??SetTempDeviceEP::?relay`,00H
        EXTERN `??SetTempDeviceHW::?relay`
        FUNCTION `??SetTempDeviceHW::?relay`,00H
        EXTERN `??SetTempDeviceManuName::?relay`
        FUNCTION `??SetTempDeviceManuName::?relay`,00H
        EXTERN `??SetTempDeviceSA::?relay`
        FUNCTION `??SetTempDeviceSA::?relay`,00H
        EXTERN `??SetTempDeviceSerial::?relay`
        FUNCTION `??SetTempDeviceSerial::?relay`,00H
        EXTERN `??SetTempDeviceType::?relay`
        FUNCTION `??SetTempDeviceType::?relay`,00H
        EXTERN `??UpdateDeviceStatus1::?relay`
        FUNCTION `??UpdateDeviceStatus1::?relay`,00H
        EXTERN `??UpdateDeviceStatus2::?relay`
        FUNCTION `??UpdateDeviceStatus2::?relay`,00H
        EXTERN `??UpdateDeviceStatus3::?relay`
        FUNCTION `??UpdateDeviceStatus3::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDO_ParseDeviceAnnce::?relay`
        FUNCTION `??ZDO_ParseDeviceAnnce::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_ParseMgmtBindRsp::?relay`
        FUNCTION `??ZDO_ParseMgmtBindRsp::?relay`,00H
        EXTERN `??ZDO_ParseSimpleDescRsp::?relay`
        FUNCTION `??ZDO_ParseSimpleDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_BindUnbindReq::?relay`
        FUNCTION `??ZDP_BindUnbindReq::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_ProcessMessageMSG::?relay`
        FUNCTION `??zcl_ProcessMessageMSG::?relay`,00H
        EXTERN `??zcl_SendRead::?relay`
        FUNCTION `??zcl_SendRead::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Init
        FUNCTION AT_Init,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssociatedDevList
        EXTERN CheckDeviceStatus
        FUNCTION CheckDeviceStatus,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Device_type_Init
        FUNCTION Device_type_Init,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SendCommond
        FUNCTION SendCommond,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SerialApp_Init
        FUNCTION SerialApp_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceBAT
        FUNCTION SetTempDeviceBAT,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceEP
        FUNCTION SetTempDeviceEP,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceHW
        FUNCTION SetTempDeviceHW,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceManuName
        FUNCTION SetTempDeviceManuName,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceSA
        FUNCTION SetTempDeviceSA,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceSerial
        FUNCTION SetTempDeviceSerial,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceType
        FUNCTION SetTempDeviceType,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UpdateDeviceStatus1
        FUNCTION UpdateDeviceStatus1,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UpdateDeviceStatus2
        FUNCTION UpdateDeviceStatus2,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UpdateDeviceStatus3
        FUNCTION UpdateDeviceStatus3,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseMgmtBindRsp
        FUNCTION ZDO_ParseMgmtBindRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseSimpleDescRsp
        FUNCTION ZDO_ParseSimpleDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_ProcessMessageMSG
        FUNCTION zcl_ProcessMessageMSG,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendRead
        FUNCTION zcl_SendRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zha_project_Attrs
        EXTERN zha_project_IdentifyTime
        EXTERN zha_project_LevelCurrentLevel
        EXTERN zha_project_LevelOnLevel
        EXTERN zha_project_Level_to_Level
        EXTERN zha_project_NumAttributes
        EXTERN zha_project_OnOff
        EXTERN zha_project_SimpleDesc

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
//    1 /**************************************************************************************************
//    2   Filename:       zha_project.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "ZDObject.h"
//   77 #include "ZDProfile.h"
//   78 #include "zcl.h"
//   79 #include "zcl_general.h"
//   80 #include "zcl_ha.h"
//   81 #include "zcl_ss.h"
//   82 #include "zcl_ms.h"
//   83 #include "zcl_ezmode.h"
//   84 #include "zcl_diagnostic.h"
//   85 #include "zcl_lighting.h"
//   86 #include "zha_project.h"
//   87 #include "SerialApp.h"
//   88 #include "at_command.h"   
//   89 #include "onboard.h"
//   90 
//   91 /* HAL */
//   92 #include "hal_lcd.h"
//   93 #include "hal_led.h"
//   94 #include "hal_key.h"
//   95 
//   96 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   97       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   98 #include "zgp_translationtable.h"
//   99   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//  100     #define ZGP_AUTO_TT
//  101   #endif
//  102 #endif
//  103 
//  104 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  105 #include "math.h"
//  106 #include "hal_timer.h"
//  107 #endif
//  108 
//  109 #include "NLMEDE.h"
//  110 
//  111 /*********************************************************************
//  112  * MACROS
//  113  */
//  114 
//  115 /*********************************************************************
//  116  * CONSTANTS
//  117  */
//  118 #if (defined HAL_BOARD_ZLIGHT)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       1000
//  123 #elif (defined HAL_PWM)
//  124 #define LEVEL_MAX                 0xFE
//  125 #define LEVEL_MIN                 0x0
//  126 #define GAMMA_VALUE               2
//  127 #define PWM_FULL_DUTY_CYCLE       100
//  128 #endif
//  129 
//  130 /*********************************************************************
//  131  * TYPEDEFS
//  132  */
//  133 
//  134 /*********************************************************************
//  135  * GLOBAL VARIABLES
//  136  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 byte zha_project_TaskID;
zha_project_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8 zha_projectSeqNum;
zha_projectSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  139 ZDO_ActiveEndpointRsp_t   *zha_project_ActiveEP;
zha_project_ActiveEP:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 endPointDesc_t zha_project_epDesc;
zha_project_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  141 afAddrType_t zha_project_DstAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 static zAddrType_t simpleDescReqAddr;
simpleDescReqAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 uint8 ep[5];
ep:
        DS 5
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 uint8 netState = 0;
netState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 zAddrType_t dstAddr;
dstAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  146 
//  147 #if ZG_BUILD_ENDDEVICE_TYPE
//  148 endPointDesc_t zclZHAtest_epDesc;
//  149 endPointDesc_t zclZHAtest_epDesc1;
//  150 endPointDesc_t zclZHAtest_epDesc2;
//  151 endPointDesc_t zclZHAtest_epDesc3;
//  152 endPointDesc_t zclZHAtest_epDesc4;
//  153 endPointDesc_t zclZHAtest_epDesc5;
//  154 endPointDesc_t zclZHAtest_epDesc6;
//  155 endPointDesc_t zclZHAtest_epDesc7;
//  156 endPointDesc_t zclZHAtest_epDesc8;
//  157 endPointDesc_t zclZHAtest_epDesc9;
//  158 endPointDesc_t zclZHAtest_epDesc10;
//  159 endPointDesc_t zclZHAtest_epDesc11;
//  160 endPointDesc_t zclZHAtest_epDesc12;
//  161 endPointDesc_t zclZHAtest_epDesc14;
//  162 #endif
//  163 /*********************************************************************
//  164  * GLOBAL FUNCTIONS
//  165  */
//  166 
//  167 /*********************************************************************
//  168  * LOCAL VARIABLES
//  169  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  170 afAddrType_t zha_project_DstAddr;
zha_project_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  171 
//  172 #ifdef ZCL_EZMODE
//  173 static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  174 static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  175 
//  176 
//  177 // register EZ-Mode with task information (timeout events, callback, etc...)
//  178 //static const zclEZMode_RegisterData_t zha_project_RegisterEZModeData =
//  179 //{
//  180 //  &zha_project_TaskID,
//  181 //  SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  182 //  SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  183 //  &zha_projectSeqNum,
//  184 //  zha_project_EZModeCB
//  185 //};
//  186 
//  187 #else
//  188 uint16 bindingInClusters[] =
//  189 {
//  190   ZCL_CLUSTER_ID_GEN_ON_OFF
//  191 #ifdef ZCL_LEVEL_CTRL
//  192   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  193 #endif
//  194 };
//  195 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  196 
//  197 #endif  // ZCL_EZMODE
//  198 
//  199 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  200 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  201 {
//  202   SAMPLELIGHT_ENDPOINT,
//  203   &zha_project_TaskID,
//  204   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  205   (afNetworkLatencyReq_t)0            // No Network Latency req
//  206 };
//  207 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  208 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  209 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  210 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  211 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  212 devStates_t zha_project_NwkState = DEV_INIT;
zha_project_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zha_project_NwkState>`
        REQUIRE __INIT_XDATA_I
//  213 
//  214 #if ZCL_LEVEL_CTRL

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  215 uint8 zha_project_WithOnOff;       // set to TRUE if state machine should set light on/off
zha_project_WithOnOff:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  216 uint8 zha_project_NewLevel;        // new level when done moving
zha_project_NewLevel:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  217 bool  zha_project_NewLevelUp;      // is direction to new level up or down?
zha_project_NewLevelUp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  218 int32 zha_project_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
zha_project_CurrentLevel32:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  219 int32 zha_project_Rate32;          // rate in units, fixed point (e.g. 16.123)
zha_project_Rate32:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  220 uint8 zha_project_LevelLastLevel;  // to save the Current Level before the light was turned OFF
zha_project_LevelLastLevel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  221 #endif
//  222 
//  223 /*********************************************************************
//  224  * LOCAL FUNCTIONS
//  225  */
//  226 
//  227 
//  228 
//  229 static void zha_project_HandleKeys( byte shift, byte keys );
//  230 static void zha_project_BasicResetCB( void );
//  231 static void zha_project_IdentifyCB( zclIdentify_t *pCmd );
//  232 static void zha_project_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  233 static void zha_project_OnOffCB( uint8 cmd );
//  234 static ZStatus_t zclZLL_ColorControl_MoveToColorTemperature(zclCCMoveToColorTemperature_t *pCmd);
//  235 static void zclSS_ChangeNotification(zclZoneChangeNotif_t *pCmd);
//  236 
//  237 
//  238 
//  239 
//  240 #ifdef ZCL_LEVEL_CTRL
//  241 static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  242 //static void zha_project_LevelControlMoveCB( zclLCMove_t *pCmd );
//  243 //static void zha_project_LevelControlStepCB( zclLCStep_t *pCmd );
//  244 //static void zha_project_LevelControlStopCB( void );
//  245 //static void zha_project_DefaultMove( void );
//  246 //static uint32 zha_project_TimeRateHelper( uint8 newLevel );
//  247 //static uint16 zha_project_GetTime ( uint8 level, uint16 time );
//  248 //static void zha_project_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  249 //static void zha_project_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  250 //static void zha_project_AdjustLightLevel( void );
//  251 #endif
//  252 
//  253 // app display functions
//  254 static void zha_project_DisplayLight( void );
//  255 
//  256 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  257 void zha_project_UpdateLampLevel( uint8 level );
//  258 #endif
//  259 
//  260 // Functions to process ZCL Foundation incoming Command/Response messages
//  261 static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  262 #ifdef ZCL_READ
//  263 static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  264 #endif
//  265 #ifdef ZCL_WRITE
//  266 static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  267 #endif
//  268 #ifdef ZCL_REPORT
//  269 static uint8 zha_project_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
//  270 #endif
//  271 static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  272 #ifdef ZCL_DISCOVER
//  273 static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  274 static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  275 static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  276 #endif
//  277 
//  278 /*********************************************************************
//  279  * STATUS STRINGS
//  280  */
//  281 
//  282 
//  283 /*********************************************************************
//  284  * ZCL General Profile Callback table
//  285  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  286 static zclGeneral_AppCallbacks_t zha_project_CmdCallbacks =
zha_project_CmdCallbacks:
        DATA8
        DS 40
        REQUIRE `?<Initializer for zha_project_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  287 {
//  288   zha_project_BasicResetCB,            // Basic Cluster Reset command
//  289   zha_project_IdentifyCB,              // Identify command
//  290 #ifdef ZCL_EZMODE
//  291   NULL,                                   // Identify EZ-Mode Invoke command
//  292   NULL,                                   // Identify Update Commission State command
//  293 #endif
//  294   NULL,                                   // Identify Trigger Effect command
//  295   zha_project_IdentifyQueryRspCB,      // Identify Query Response command
//  296   zha_project_OnOffCB,                 // On/Off cluster commands
//  297   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  298   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  299   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  300 #ifdef ZCL_LEVEL_CTRL
//  301   zha_project_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  302   NULL,        // Level Control Move command
//  303   NULL,        // Level Control Step command
//  304   NULL,        // Level Control Stop command
//  305 #endif
//  306 #ifdef ZCL_GROUPS
//  307   NULL,                                   // Group Response commands
//  308 #endif
//  309 #ifdef ZCL_SCENES
//  310   NULL,                                  // Scene Store Request command
//  311   NULL,                                  // Scene Recall Request command
//  312   NULL,                                  // Scene Response command
//  313 #endif
//  314 #ifdef ZCL_ALARMS
//  315   NULL,                                  // Alarm (Response) commands
//  316 #endif
//  317 #ifdef SE_UK_EXT
//  318   NULL,                                  // Get Event Log command
//  319   NULL,                                  // Publish Event Log command
//  320 #endif
//  321   NULL,                                  // RSSI Location command
//  322   NULL                                   // RSSI Location Response command
//  323 };
//  324 
//  325 static zclLighting_AppCallbacks_t  zclZLLtest_CmdCallbacks =
//  326 {
//  327     NULL,
//  328     NULL,
//  329     NULL,
//  330     NULL,
//  331     NULL,
//  332     NULL,
//  333     NULL,
//  334     NULL,
//  335     NULL,
//  336     NULL,
//  337     zclZLL_ColorControl_MoveToColorTemperature,
//  338 
//  339 
//  340 };
//  341 
//  342 static zclSS_AppCallbacks_t zclSStest_CmdCallbacks =
//  343 {
//  344     //zclSS_ChangeNotification,
//  345     NULL,
//  346     NULL,
//  347     NULL,
//  348     NULL,
//  349     NULL,
//  350     NULL,
//  351     NULL,
//  352     NULL,
//  353     NULL,
//  354     NULL,
//  355     //zclSS_WD_StartWarning,
//  356     //zclSS_WD_Squawk,
//  357   
//  358   
//  359   
//  360   
//  361 };
//  362 
//  363 /*********************************************************************
//  364  * @fn          zha_project_Init
//  365  *
//  366  * @brief       Initialization function for the zclGeneral layer.
//  367  *
//  368  * @param       none
//  369  *
//  370  * @return      none
//  371  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  372 void zha_project_Init( byte task_id )
zha_project_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zha_project_Init
        CODE
//  373 {
        FUNCALL zha_project_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, SerialApp_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, AT_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, Device_type_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  374   uint8 devicetype;
//  375   zha_project_TaskID = task_id;
        MOV     DPTR,#zha_project_TaskID
        MOVX    @DPTR,A
//  376 
//  377   // Set destination address to indirect
//  378   zha_project_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zha_project_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  379   zha_project_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  380   zha_project_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zha_project_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  381 
//  382   // This app is part of the Home Automation Profile
//  383 #if ZG_BUILD_COORDINATOR_TYPE  
//  384   zclHA_Init( &zha_project_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zha_project_SimpleDesc & 0xff
        MOV     R3,#(zha_project_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  385 #endif
//  386   SerialApp_Init();
        ; Setup parameters for call to function SerialApp_Init
        LCALL   `??SerialApp_Init::?relay`; Banked call to: SerialApp_Init
//  387   AT_Init();
        ; Setup parameters for call to function AT_Init
        LCALL   `??AT_Init::?relay`  ; Banked call to: AT_Init
//  388   //osal_nv_item_init( ZCD_NV_DEVICE_TABLE,(uint16)(sizeof(NODE_INFO_t) * 6 ), NULL );
//  389   Device_type_Init();
        ; Setup parameters for call to function Device_type_Init
        LCALL   `??Device_type_Init::?relay`; Banked call to: Device_type_Init
//  390 #if ZG_BUILD_ENDDEVICE_TYPE
//  391     osal_nv_read(ZCD_NV_DEVICE_TYPE,0, sizeof(uint8), &devicetype);
//  392     ZDO_StartDevice(ZG_DEVICETYPE_ENDDEVICE,MODE_JOIN,15, 15);
//  393     switch(devicetype)
//  394     {
//  395         case light:
//  396             zclZHAtest_epDesc1.endPoint = 1;
//  397             zclZHAtest_epDesc1.task_id = &zha_project_TaskID;
//  398             zclZHAtest_epDesc1.simpleDesc
//  399                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc1;
//  400             zclZHAtest_epDesc1.latencyReq = noLatencyReqs;
//  401             zclHA_Init(&zclZHAtest_SimpleDesc1);
//  402             afRegister( &zclZHAtest_epDesc1 );      
//  403           
//  404          break;
//  405         case level:
//  406              zclZHAtest_epDesc2.endPoint = 1;
//  407         zclZHAtest_epDesc2.task_id = &zha_project_TaskID;
//  408         zclZHAtest_epDesc2.simpleDesc
//  409                 = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc2;
//  410         zclZHAtest_epDesc2.latencyReq = noLatencyReqs;    
//  411         zclHA_Init(&zclZHAtest_SimpleDesc2);
//  412         afRegister( &zclZHAtest_epDesc2 );
//  413         break;
//  414  
//  415         case colortem:
//  416             zclZHAtest_epDesc3.endPoint = 1;
//  417             zclZHAtest_epDesc3.task_id = &zha_project_TaskID;
//  418             zclZHAtest_epDesc3.simpleDesc
//  419                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc3;
//  420             zclZHAtest_epDesc3.latencyReq = noLatencyReqs;
//  421             zclHA_Init(&zclZHAtest_SimpleDesc3);
//  422             afRegister( &zclZHAtest_epDesc3 );
//  423           break;
//  424         case temp:
//  425             zclZHAtest_epDesc4.endPoint = 1;
//  426             zclZHAtest_epDesc4.task_id = &zha_project_TaskID;
//  427             zclZHAtest_epDesc4.simpleDesc
//  428                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc4;
//  429             zclZHAtest_epDesc4.latencyReq = noLatencyReqs;
//  430             zclHA_Init(&zclZHAtest_SimpleDesc4);
//  431             afRegister( &zclZHAtest_epDesc4 );      
//  432           break;
//  433         case pir:
//  434             zclZHAtest_epDesc5.endPoint = 1;
//  435             zclZHAtest_epDesc5.task_id = &zha_project_TaskID;
//  436             zclZHAtest_epDesc5.simpleDesc
//  437                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc5;
//  438             zclZHAtest_epDesc5.latencyReq = noLatencyReqs;
//  439             zclHA_Init(&zclZHAtest_SimpleDesc5);
//  440             afRegister( &zclZHAtest_epDesc5 );     
//  441             zha_project_Smoke_Type = 0x000d;
//  442           
//  443          break; 
//  444         case humility:
//  445             zclZHAtest_epDesc6.endPoint = 1;
//  446             zclZHAtest_epDesc6.task_id = &zha_project_TaskID;
//  447             zclZHAtest_epDesc6.simpleDesc
//  448                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc6;
//  449             zclZHAtest_epDesc6.latencyReq = noLatencyReqs;
//  450             zclHA_Init(&zclZHAtest_SimpleDesc6);
//  451             afRegister( &zclZHAtest_epDesc6 );      
//  452           break;
//  453         case doorsen:
//  454             zclZHAtest_epDesc7.endPoint = 1;
//  455             zclZHAtest_epDesc7.task_id = &zha_project_TaskID;
//  456             zclZHAtest_epDesc7.simpleDesc
//  457                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc7;
//  458             zclZHAtest_epDesc7.latencyReq = noLatencyReqs;
//  459             zclHA_Init(&zclZHAtest_SimpleDesc7);
//  460             afRegister( &zclZHAtest_epDesc7 );  
//  461             zha_project_Smoke_Type = 0x0015;
//  462           break;
//  463         case lumin:
//  464             zclZHAtest_epDesc8.endPoint = 1;
//  465             zclZHAtest_epDesc8.task_id = &zha_project_TaskID;
//  466             zclZHAtest_epDesc8.simpleDesc
//  467                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc8;
//  468             zclZHAtest_epDesc8.latencyReq = noLatencyReqs;
//  469             zclHA_Init(&zclZHAtest_SimpleDesc8);
//  470             afRegister( &zclZHAtest_epDesc8 ); 
//  471         break;
//  472         case slsensor:
//  473             zclZHAtest_epDesc9.endPoint = 1;
//  474             zclZHAtest_epDesc9.task_id = &zha_project_TaskID;
//  475             zclZHAtest_epDesc9.simpleDesc
//  476                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc9;
//  477             zclZHAtest_epDesc9.latencyReq = noLatencyReqs; 
//  478             zclHA_Init(&zclZHAtest_SimpleDesc9);
//  479             afRegister( &zclZHAtest_epDesc9 );
//  480             zha_project_Smoke_Type = 0x0225;      
//  481           break;
//  482         case smoke:
//  483             zclZHAtest_epDesc10.endPoint = 1;
//  484             zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
//  485             zclZHAtest_epDesc10.simpleDesc
//  486                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
//  487             zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
//  488             zclHA_Init(&zclZHAtest_SimpleDesc10); 
//  489             afRegister( &zclZHAtest_epDesc10 );          
//  490             zha_project_Smoke_Type = 0x0028;
//  491           break;
//  492         case watersen:
//  493             zclZHAtest_epDesc11.endPoint = 1;
//  494             zclZHAtest_epDesc11.task_id = &zha_project_TaskID;
//  495             zclZHAtest_epDesc11.simpleDesc
//  496                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc11;
//  497             zclZHAtest_epDesc11.latencyReq = noLatencyReqs; 
//  498             zclHA_Init(&zclZHAtest_SimpleDesc11);
//  499             afRegister( &zclZHAtest_epDesc11 );
//  500             zha_project_Smoke_Type = 0x002a;
//  501           break;  
//  502         case cosensor:
//  503             zclZHAtest_epDesc10.endPoint = 1;
//  504             zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
//  505             zclZHAtest_epDesc10.simpleDesc
//  506                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
//  507             zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
//  508             zclHA_Init(&zclZHAtest_SimpleDesc10); 
//  509             afRegister( &zclZHAtest_epDesc10 );          
//  510             zha_project_Smoke_Type = 0x0227;
//  511             break; 
//  512         case gassensor:
//  513             zclZHAtest_epDesc10.endPoint = 1;
//  514             zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
//  515             zclZHAtest_epDesc10.simpleDesc
//  516                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
//  517             zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
//  518             zclHA_Init(&zclZHAtest_SimpleDesc10); 
//  519             afRegister( &zclZHAtest_epDesc10 );          
//  520             zha_project_Smoke_Type = 0x002B;
//  521             break;
//  522         case glasssen:
//  523             zclZHAtest_epDesc10.endPoint = 1;
//  524             zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
//  525             zclZHAtest_epDesc10.simpleDesc
//  526                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
//  527             zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
//  528             zclHA_Init(&zclZHAtest_SimpleDesc10); 
//  529             afRegister( &zclZHAtest_epDesc10 );          
//  530             zha_project_Smoke_Type = 0x0226;
//  531             break;
//  532         case zonectrl:
//  533             zclZHAtest_epDesc10.endPoint = 1;
//  534             zclZHAtest_epDesc10.task_id = &zha_project_TaskID;
//  535             zclZHAtest_epDesc10.simpleDesc
//  536                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc10;
//  537             zclZHAtest_epDesc10.latencyReq = noLatencyReqs;    
//  538             zclHA_Init(&zclZHAtest_SimpleDesc10); 
//  539             afRegister( &zclZHAtest_epDesc10 );          
//  540             zha_project_Smoke_Type = 0x0115;
//  541             break;
//  542         case lightswitch:
//  543             zclZHAtest_epDesc12.endPoint = 1;
//  544             zclZHAtest_epDesc12.task_id = &zha_project_TaskID;
//  545             zclZHAtest_epDesc12.simpleDesc
//  546                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc12;
//  547             zclZHAtest_epDesc12.latencyReq = noLatencyReqs;    
//  548             zclHA_Init(&zclZHAtest_SimpleDesc12); 
//  549             afRegister( &zclZHAtest_epDesc12 );        
//  550             break;
//  551         case outlet:
//  552             zclZHAtest_epDesc14.endPoint = 1;
//  553             zclZHAtest_epDesc14.task_id = &zha_project_TaskID;
//  554             zclZHAtest_epDesc14.simpleDesc
//  555                     = (SimpleDescriptionFormat_t *)&zclZHAtest_SimpleDesc14;
//  556             zclZHAtest_epDesc14.latencyReq = noLatencyReqs;    
//  557             zclHA_Init(&zclZHAtest_SimpleDesc14); 
//  558             afRegister( &zclZHAtest_epDesc14 ); 
//  559             break;
//  560       
//  561             
//  562         default:
//  563          break;    
//  564     
//  565     }
//  566 #endif 
//  567     // Register the ZCL General Cluster Library callback functions
//  568   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zha_project_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zha_project_CmdCallbacks & 0xff
        MOV     R3,#(zha_project_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  569 
//  570   // Register the application's attribute list
//  571   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zha_project_NumAttributes, zha_project_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zha_project_Attrs & 0xff
        MOV     R5,#(zha_project_Attrs >> 8) & 0xff
        MOV     DPTR,#zha_project_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  572 
//  573   // Register the Application to receive the unprocessed Foundation command/response messages
//  574   zcl_registerForMsg( zha_project_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  575 
//  576 #ifdef ZCL_DISCOVER
//  577   // Register the application's command list
//  578   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zha_project_Cmds );
//  579 #endif
//  580 
//  581   // Register for all key events - This app will handle all key events
//  582   RegisterForKeys( zha_project_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  583 
//  584   // Register for a test endpoint
//  585   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  586 
//  587 #ifdef ZCL_EZMODE
//  588   // Register EZ-Mode
//  589   //zcl_RegisterEZMode( &zha_project_RegisterEZModeData );
//  590 
//  591   // Register with the ZDO to receive Match Descriptor Responses
//  592     ZDO_RegisterForZDOMsg( task_id, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  593     ZDO_RegisterForZDOMsg( task_id, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  594     ZDO_RegisterForZDOMsg( task_id, Active_EP_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x5
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  595     ZDO_RegisterForZDOMsg( task_id, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x4
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  596     ZDO_RegisterForZDOMsg( task_id, Device_annce );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x13
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  597 #endif
//  598 
//  599 
//  600 #ifdef ZCL_DIAGNOSTIC
//  601   // Register the application's callback function to read/write attribute data.
//  602   // This is only required when the attribute data format is unknown to ZCL.
//  603   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  604 
//  605   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  606   {
//  607     // Here the user could start the timer to save Diagnostics to NV
//  608   }
//  609 #endif
//  610 
//  611 #ifdef LCD_SUPPORTED
//  612   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  613 #endif  // LCD_SUPPORTED
//  614 
//  615   //osal_start_reload_timer(task_id,DEVICE_STATUS_EVT,8000);
//  616 #if ZG_BUILD_ENDDEVICE_TYPE
//  617   osal_start_reload_timer(task_id,SEND_REPORT_EVT,5000);
//  618 #endif
//  619   
//  620 #ifdef ZGP_AUTO_TT
//  621   zgpTranslationTable_RegisterEP ( &zha_project_SimpleDesc );
//  622 #endif
//  623 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  624 
//  625 /*********************************************************************
//  626  * @fn          zclSample_event_loop
//  627  *
//  628  * @brief       Event Loop Processor for zclGeneral.
//  629  *
//  630  * @param       none
//  631  *
//  632  * @return      none
//  633  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  634 uint16 zha_project_event_loop( uint8 task_id, uint16 events )
zha_project_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zha_project_event_loop
        CODE
//  635 {
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_ProcessInReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_ProcessInReadRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_ProcessMessageMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, CheckDeviceStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, SendCommond
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 53
        MOV     A,#-0x35
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  636   afIncomingMSGPacket_t *MSGpkt;
//  637 
//  638   (void)task_id;  // Intentionally unreferenced parameter
//  639 
//  640     if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      $+5
        LJMP    ??zha_project_event_loop_0 & 0xFFFF
//  641     {
//  642         while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zha_project_TaskID )) )
//  643         {
//  644             switch ( MSGpkt->hdr.event )
//  645             {
//  646                 #ifdef ZCL_EZMODE
//  647                 case ZDO_CB_MSG:
//  648                     zha_project_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  649                     break;
//  650                 #endif
//  651                 case ZCL_INCOMING_MSG:
//  652                 // Incoming ZCL Foundation command/response messages
//  653                     zha_project_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  654                     break;
//  655 
//  656                 case KEY_CHANGE:
//  657                     zha_project_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  658                     break;
//  659                 case AF_INCOMING_MSG_CMD:
//  660                     zcl_ProcessMessageMSG(MSGpkt);
//  661 
//  662                     //ZHAtest_MessageMSGCB( MSGpkt );
//  663                     break;    
//  664                 
//  665 
//  666                 case ZDO_STATE_CHANGE:
//  667                     zha_project_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  668          
//  669                     if(zha_project_NwkState == DEV_ZB_COORD)
//  670                     {
//  671                         netState = 1;
//  672                         NLME_PermitJoiningRequest(0);
//  673                     }
//  674                 break;
//  675 
//  676                 default:
//  677                     break;
//  678             }
//  679 
//  680           // Release the memory
//  681           osal_msg_deallocate( (uint8 *)MSGpkt );
//  682         }
//  683         return (events ^ SYS_EVENT_MSG);
//  684     }
//  685     if ( events & ZHA_ATTRIBUTE_REQ_EVT )
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??zha_project_event_loop_1
//  686     {
//  687         uint8 i=0;
//  688         afAddrType_t  dscReqAddr;
//  689         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  690         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  691         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  692         zclReadCmd_t BasicAttrsList;
//  693         BasicAttrsList.numAttr = 6;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  694         BasicAttrsList.attrID[0] = ATTRID_BASIC_ZCL_VERSION;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  695         BasicAttrsList.attrID[1] = ATTRID_BASIC_HW_VERSION;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        LCALL   ?Subroutine29 & 0xFFFF
//  696         BasicAttrsList.attrID[2] = ATTRID_BASIC_MODEL_ID;
??CrossCallReturnLabel_63:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        LCALL   ?Subroutine29 & 0xFFFF
//  697         BasicAttrsList.attrID[3] = ATTRID_BASIC_MANUFACTURER_NAME;
??CrossCallReturnLabel_64:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        LCALL   ?Subroutine29 & 0xFFFF
//  698         BasicAttrsList.attrID[5] = ATTRID_BASIC_SERIAL_NUMBER;
??CrossCallReturnLabel_65:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x9
        LCALL   ?Subroutine29 & 0xFFFF
//  699         BasicAttrsList.attrID[4] = ATTRID_BASIC_POWER_SOURCE;
??CrossCallReturnLabel_66:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        LCALL   ?Subroutine5 & 0xFFFF
//  700         zcl_SendRead( 1, &dscReqAddr,ZCL_CLUSTER_ID_GEN_BASIC, &BasicAttrsList,
//  701                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
//  702         
//  703 //        BasicAttrsList.numAttr = 1;
//  704 //        BasicAttrsList.attrID[0] = ATTRID_BASIC_SERIAL_NUMBER;        
//  705 //        zcl_SendRead( 1, &dscReqAddr,ZCL_CLUSTER_ID_GEN_BASIC, &BasicAttrsList,
//  706 //                    ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
//  707         //return ( events ^ ZHA_ATTRIBUTE_REQ_EVT );
//  708     }  
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  709   
//  710     if(events & ZHA_ATTRIBUTE_POWER_EVT)
??zha_project_event_loop_1:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??zha_project_event_loop_2
//  711     {
//  712         afAddrType_t  dscReqAddr;
//  713         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  714         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  715         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  716         zclReadCmd_t BasicAttrsList;
//  717         BasicAttrsList.numAttr = 2;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  718         BasicAttrsList.attrID[0] = ATTRID_POWER_CFG_BATTERY_VOLTAGE;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x20
        LCALL   ?Subroutine29 & 0xFFFF
//  719         BasicAttrsList.attrID[1] = 0x0021;
??CrossCallReturnLabel_67:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x21
        LCALL   ?Subroutine5 & 0xFFFF
//  720         zcl_SendRead( 1, &dscReqAddr,
//  721                     ZCL_CLUSTER_ID_GEN_POWER_CFG, &BasicAttrsList,
//  722                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
//  723         //return ( events ^ ZHA_ATTRIBUTE_POWER_EVT );    
//  724     }
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  725     if ( events & ZONE_TYPE_EVT )
??zha_project_event_loop_2:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??zha_project_event_loop_3
//  726     {
//  727         afAddrType_t  dscReqAddr;
//  728         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  729         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  730         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  731         zclReadCmd_t BasicAttrsList;
//  732         BasicAttrsList.numAttr = 1;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  733         BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ?Subroutine5 & 0xFFFF
//  734         zcl_SendRead( 1, &dscReqAddr,
//  735                     ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
//  736                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
//  737         //return ( events ^ ZONE_TYPE_EVT );
//  738     } 
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x0
        MOV     R5,#0x5
        MOV     A,R5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  739     if ( events & ZHA_ACTIVE_EP_EVT )
??zha_project_event_loop_3:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zha_project_event_loop_4
//  740     {
//  741         ZDP_ActiveEPReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr, 0);
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x5
        LCALL   ?Subroutine16 & 0xFFFF
//  742         //return ( events ^ ZHA_ACTIVE_EP_EVT );
//  743     }  
??CrossCallReturnLabel_42:
        LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  744   
//  745   // event to get simple descriptor of the newly joined device
//  746     if ( events & SIMPLE_DESC_QUERY_EVT )
??zha_project_event_loop_4:
        MOV     A,R6
        ANL     A,#0x10
        JNZ     $+5
        LJMP    ??zha_project_event_loop_5 & 0xFFFF
//  747     {
//  748         uint8 i;
//  749         for(i=0;i<=zha_project_ActiveEP->cnt;i++)
        MOV     ?V0,#0x0
        LJMP    ??zha_project_event_loop_6 & 0xFFFF
??zha_project_event_loop_7:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zha_project_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JNZ     ??zha_project_event_loop_8
        MOV     DPTR,#netState
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x0
        LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
??zha_project_event_loop_8:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zha_project_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??zha_project_event_loop_9 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??zha_project_event_loop_10
        ADD     A,#-0x1a
        JZ      ??zha_project_event_loop_11
        ADD     A,#0x74
        JZ      ??zha_project_event_loop_12
        ADD     A,#-0x11
        JZ      ??zha_project_event_loop_7
        ADD     A,#-0x2
        JNZ     ??zha_project_event_loop_8
        ; Setup parameters for call to function zha_project_ProcessZDOMsgs
        LCALL   `??zha_project_ProcessZDOMsgs::?relay`; Banked call to: zha_project_ProcessZDOMsgs
        SJMP    ??zha_project_event_loop_8
??zha_project_event_loop_11:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zha_project_event_loop_13
        ADD     A,#-0x3
        JZ      ??zha_project_event_loop_14
        ADD     A,#-0x6
        JNZ     ??zha_project_event_loop_15
        ; Setup parameters for call to function zha_project_ProcessInReportCmd
        LCALL   `??zha_project_ProcessInReportCmd::?relay`; Banked call to: zha_project_ProcessInReportCmd
        SJMP    ??zha_project_event_loop_15
??zha_project_event_loop_14:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
??zha_project_event_loop_16:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zha_project_event_loop_15
        INC     R0
        SJMP    ??zha_project_event_loop_16
??zha_project_event_loop_13:
        ; Setup parameters for call to function zha_project_ProcessInReadRspCmd
        LCALL   `??zha_project_ProcessInReadRspCmd::?relay`; Banked call to: zha_project_ProcessInReadRspCmd
??zha_project_event_loop_15:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_87:
        JZ      ??zha_project_event_loop_8
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LJMP    ??zha_project_event_loop_8 & 0xFFFF
??zha_project_event_loop_12:
        ; Setup parameters for call to function zha_project_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zha_project_HandleKeys::?relay`; Banked call to: zha_project_HandleKeys
        LJMP    ??zha_project_event_loop_8 & 0xFFFF
??zha_project_event_loop_10:
        ; Setup parameters for call to function zcl_ProcessMessageMSG
        LCALL   `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
        LJMP    ??zha_project_event_loop_8 & 0xFFFF
??zha_project_event_loop_9:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??zha_project_event_loop_17 & 0xFFFF
//  750         {
//  751             if(ep[i]!=0)
??zha_project_event_loop_18:
        MOV     R0,?V0
        MOV     A,#ep & 0xff
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,#(ep >> 8) & 0xff
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        JZ      ??zha_project_event_loop_19
//  752             {
//  753                   ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,
//  754                             ep[i], 0);
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V1,#0x0
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        LCALL   ?Subroutine16 & 0xFFFF
//  755             }
//  756         }
??CrossCallReturnLabel_43:
        LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
??zha_project_event_loop_19:
        INC     ?V0
??zha_project_event_loop_6:
        MOV     DPTR,#zha_project_ActiveEP
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_51:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0
        JNC     ??zha_project_event_loop_18
//  757         osal_memset(ep,0,sizeof(ep));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  758         //return ( events ^ SIMPLE_DESC_QUERY_EVT );
//  759     }
//  760 
//  761   // handle processing of timeout event triggered by request fast polling command
//  762 
//  763     if ( events & SIMPLE_DESC_EVT )
??zha_project_event_loop_5:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??zha_project_event_loop_20
//  764     {
//  765         ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,1, 0);
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x1
        LCALL   ?Subroutine16 & 0xFFFF
//  766         //return ( events ^ SIMPLE_DESC_QUERY_EVT );
//  767     }
??CrossCallReturnLabel_44:
        LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  768     if ( events & RESET_EVT )
??zha_project_event_loop_20:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??zha_project_event_loop_21
//  769     {
//  770         Onboard_soft_reset();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  771         return ( events ^ RESET_EVT );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x2
        SJMP    ??zha_project_event_loop_17
//  772     }  
//  773 #if ZG_BUILD_COORDINATOR_TYPE    
//  774      if ( events & DEVICE_STATUS_EVT )
??zha_project_event_loop_21:
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??zha_project_event_loop_22
//  775     {
//  776         CheckDeviceStatus();
        ; Setup parameters for call to function CheckDeviceStatus
        LCALL   `??CheckDeviceStatus::?relay`; Banked call to: CheckDeviceStatus
//  777         return ( events ^ DEVICE_STATUS_EVT ); 
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x1
        SJMP    ??zha_project_event_loop_17
//  778     }
//  779      if ( events & SET_DEVICE_STATE_EVT )
??zha_project_event_loop_22:
        MOV     A,R7
        ANL     A,#0x4
        JZ      ??zha_project_event_loop_23
//  780     {
//  781         SendCommond();
        ; Setup parameters for call to function SendCommond
        LCALL   `??SendCommond::?relay`; Banked call to: SendCommond
//  782         return ( events ^ SET_DEVICE_STATE_EVT ); 
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x4
??zha_project_event_loop_17:
        MOV     R3,A
        SJMP    ??zha_project_event_loop_24
//  783     }
//  784 #if ZG_BUILD_ENDDEVICE_TYPE    
//  785     if ( events & SEND_REPORT_EVT )
//  786     {
//  787         sendReport();
//  788         return ( events ^ SEND_REPORT_EVT );
//  789     } 
//  790 #endif
//  791 
//  792 #endif    
//  793   // Discard unknown events
//  794   return 0;
??zha_project_event_loop_23:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zha_project_event_loop_24:
        MOV     A,#0x35
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  795 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zha_project_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zha_project_event_loop
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL   ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_146:
        MOV     A,R2
        ORL     A,R3
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zha_project_event_loop
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zha_project_event_loop
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     DPTR,#simpleDescReqAddr
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     R2,#simpleDescReqAddr & 0xff
        MOV     R3,#(simpleDescReqAddr >> 8) & 0xff
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zha_project_event_loop
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zha_project_event_loop
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_68:
        ; Setup parameters for call to function zcl_SendRead
        ; Setup parameters for call to function zcl_SendRead
        ; Setup parameters for call to function zcl_SendRead
        MOV     ?V0,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zha_project_event_loop
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zha_project_event_loop
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zha_project_event_loop
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zha_project_event_loop
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zha_project_event_loop
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_3
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-4
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zha_project_event_loop
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_4
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-4
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zha_project_event_loop
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_5
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zha_project_event_loop
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zha_project_event_loop
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPTR,#simpleDescReqAddr
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_128:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x9
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
//  796 
//  797 
//  798 /*********************************************************************
//  799  * @fn      zha_project_HandleKeys
//  800  *
//  801  * @brief   Handles all key events for this device.
//  802  *
//  803  * @param   shift - true if in shift/alt.
//  804  * @param   keys - bit field for key events. Valid entries:
//  805  *                 HAL_KEY_SW_5
//  806  *                 HAL_KEY_SW_4
//  807  *                 HAL_KEY_SW_2
//  808  *                 HAL_KEY_SW_1
//  809  *
//  810  * @return  none
//  811  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  812 static void zha_project_HandleKeys( byte shift, byte keys )
zha_project_HandleKeys:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function zha_project_HandleKeys
        CODE
//  813 {
        FUNCALL zha_project_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, zha_project_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  814   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zha_project_HandleKeys_0
//  815   {
//  816     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  817 
//  818     // toggle local light immediately
//  819     zha_project_OnOff = zha_project_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zha_project_OnOff
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_1
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#zha_project_LevelCurrentLevel
        INC     A
        SJMP    ??zha_project_HandleKeys_2
??zha_project_HandleKeys_1:
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#zha_project_LevelOnLevel
        MOVX    A,@DPTR
        MOV     DPTR,#zha_project_LevelCurrentLevel
??zha_project_HandleKeys_2:
        MOVX    @DPTR,A
//  820 #ifdef ZCL_LEVEL_CTRL
//  821     zha_project_LevelCurrentLevel = zha_project_OnOff ? zha_project_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  822 #endif
//  823   }
//  824 
//  825   if ( keys & HAL_KEY_SW_2 )
??zha_project_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zha_project_HandleKeys_3
//  826   {
//  827 #if (defined HAL_BOARD_ZLIGHT)
//  828 
//  829     zha_project_BasicResetCB();
//  830 
//  831 #else
//  832 
//  833     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  834 
//  835 #ifdef ZCL_EZMODE
//  836     {
//  837       // Invoke EZ-Mode
//  838       zclEZMode_InvokeData_t ezModeData;
//  839 
//  840       // Invoke EZ-Mode
//  841       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     A
        MOVX    @DPTR,A
//  842       if ( (zha_project_NwkState == DEV_ZB_COORD) ||
//  843           (zha_project_NwkState == DEV_ROUTER)   ||
//  844             (zha_project_NwkState == DEV_END_DEVICE) )
        MOV     DPTR,#zha_project_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zha_project_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zha_project_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zha_project_HandleKeys_5
//  845       {
//  846         ezModeData.onNetwork = TRUE;      // node is already on the network
??zha_project_HandleKeys_4:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zha_project_HandleKeys_6
//  847       }
//  848       else
//  849       {
//  850         ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zha_project_HandleKeys_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zha_project_HandleKeys_6:
        MOVX    @DPTR,A
//  851       }
//  852       ezModeData.initiator = FALSE;          // OnOffLight is a target
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  853       ezModeData.numActiveOutClusters = 0;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  854       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  855       ezModeData.numActiveInClusters = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  856       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  857       zcl_InvokeEZMode( &ezModeData );
        ; Setup parameters for call to function zcl_InvokeEZMode
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  858     }
//  859 
//  860 #else // NOT EZ-Mode
//  861     {
//  862       zAddrType_t dstAddr;
//  863       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  864 
//  865       // Initiate an End Device Bind Request, this bind request will
//  866       // only use a cluster list that is important to binding.
//  867       dstAddr.addrMode = afAddr16Bit;
//  868       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  869       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  870                            SAMPLELIGHT_ENDPOINT,
//  871                            ZCL_HA_PROFILE_ID,
//  872                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  873                            0, NULL,   // No Outgoing clusters to bind
//  874                            TRUE );
//  875     }
//  876 #endif // ZCL_EZMODE
//  877 #endif // HAL_BOARD_ZLIGHT
//  878   }
//  879 
//  880   if ( keys & HAL_KEY_SW_3 )
??zha_project_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zha_project_HandleKeys_7
//  881   {
//  882     NLME_SendNetworkStatus( zha_project_DstAddr.addr.shortAddr,
//  883                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPTR,#zha_project_DstAddr
        LCALL   ??Subroutine43_0 & 0xFFFF
//  884   }
??CrossCallReturnLabel_89:
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  885 
//  886   if ( keys & HAL_KEY_SW_4 )
??zha_project_HandleKeys_7:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zha_project_HandleKeys_8
//  887   {
//  888     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  889 
//  890     if ( ( zha_project_NwkState == DEV_ZB_COORD ) ||
//  891           ( zha_project_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zha_project_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zha_project_HandleKeys_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zha_project_HandleKeys_8
//  892     {
//  893       zAddrType_t tmpAddr;
//  894 
//  895       tmpAddr.addrMode = Addr16Bit;
??zha_project_HandleKeys_9:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  896       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  897 
//  898       // toggle permit join
//  899       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_10
        CLR     A
        SJMP    ??zha_project_HandleKeys_11
??zha_project_HandleKeys_10:
        MOV     A,#-0x1
??zha_project_HandleKeys_11:
        MOVX    @DPTR,A
//  900 
//  901       // Trust Center significance is always true
//  902       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  903     }
//  904   }
//  905 
//  906   // Shift F5 does a Basic Reset (factory defaults)
//  907   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zha_project_HandleKeys_8:
        MOV     A,R6
        JZ      ??zha_project_HandleKeys_12
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zha_project_HandleKeys_13
//  908   {
//  909     zha_project_BasicResetCB();
        ; Setup parameters for call to function zha_project_BasicResetCB
        LCALL   `??zha_project_BasicResetCB::?relay`; Banked call to: zha_project_BasicResetCB
        SJMP    ??zha_project_HandleKeys_13
//  910   }
//  911   else if ( keys & HAL_KEY_SW_5 )
??zha_project_HandleKeys_12:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zha_project_HandleKeys_13
//  912   {
//  913     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_14
        CLR     A
        SJMP    ??zha_project_HandleKeys_15
??zha_project_HandleKeys_14:
        MOV     A,#0x1
??zha_project_HandleKeys_15:
        MOVX    @DPTR,A
//  914   }
//  915 
//  916   // update the display, including the light
//  917   //zha_project_LcdDisplayUpdate();
//  918 }
??zha_project_HandleKeys_13:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock30
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock31
//  919 
//  920 
//  921 /*********************************************************************
//  922  * @fn      zha_project_DisplayLight
//  923  *
//  924  * @brief   Displays current state of light on LED and also on main display if supported.
//  925  *
//  926  * @param   none
//  927  *
//  928  * @return  none
//  929  */
//  930 static void zha_project_DisplayLight( void )
//  931 {
//  932   // set the LED1 based on light (on or off)
//  933   if ( zha_project_OnOff == LIGHT_ON )
//  934   {
//  935     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  936   }
//  937   else
//  938   {
//  939     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  940   }
//  941 
//  942 #ifdef LCD_SUPPORTED
//  943   if (giLightScreenMode == LIGHT_MAINMODE)
//  944   {
//  945 #ifdef ZCL_LEVEL_CTRL
//  946     // display current light level
//  947     if ( ( zha_project_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  948          ( zha_project_OnOff == LIGHT_OFF ) )
//  949     {
//  950       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  951     }
//  952     else if ( ( zha_project_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  953               ( zha_project_LevelCurrentLevel == zha_project_LevelOnLevel ) ||
//  954                ( ( zha_project_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  955                  ( zha_project_LevelCurrentLevel == zha_project_LevelLastLevel ) ) )
//  956     {
//  957       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  958     }
//  959     else    // "    LEVEL ###"
//  960     {
//  961       zclHA_uint8toa( zha_project_LevelCurrentLevel, &sLightLevel[10] );
//  962       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  963     }
//  964 #else
//  965     if ( zha_project_OnOff )
//  966     {
//  967       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  968     }
//  969     else
//  970     {
//  971       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  972     }
//  973 #endif // ZCL_LEVEL_CTRL
//  974   }
//  975 #endif // LCD_SUPPORTED
//  976 }
//  977 
//  978 /*********************************************************************
//  979  * @fn      zha_project_BasicResetCB
//  980  *
//  981  * @brief   Callback from the ZCL General Cluster Library
//  982  *          to set all the Basic Cluster attributes to default values.
//  983  *
//  984  * @param   none
//  985  *
//  986  * @return  none
//  987  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  988 static void zha_project_BasicResetCB( void )
zha_project_BasicResetCB:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function zha_project_BasicResetCB
        CODE
//  989 {
        FUNCALL zha_project_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  990   NLME_LeaveReq_t leaveReq;
//  991   // Set every field to 0
//  992   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  993 
//  994   // This will enable the device to rejoin the network after reset.
//  995   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  996 
//  997   // Set the NV startup option to force a "new" join.
//  998   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  999 
// 1000   // Leave the network, and reset afterwards
// 1001   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zha_project_BasicResetCB_0
// 1002   {
// 1003     // Couldn't send out leave; prepare to reset anyway
// 1004     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
// 1005   }
// 1006 }
??zha_project_BasicResetCB_0:
        MOV     A,#0x5
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock32
// 1007 
// 1008 /*********************************************************************
// 1009  * @fn      zha_project_IdentifyCB
// 1010  *
// 1011  * @brief   Callback from the ZCL General Cluster Library when
// 1012  *          it received an Identity Command for this application.
// 1013  *
// 1014  * @param   srcAddr - source address and endpoint of the response message
// 1015  * @param   identifyTime - the number of seconds to identify yourself
// 1016  *
// 1017  * @return  none
// 1018  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1019 static void zha_project_IdentifyCB( zclIdentify_t *pCmd )
zha_project_IdentifyCB:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function zha_project_IdentifyCB
        CODE
// 1020 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1021   zha_project_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV     DPTR,#zha_project_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1022 //zha_project_ProcessIdentifyTimeChange();
// 1023 }
        SJMP    ??Subroutine41_0
          CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 5)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock34
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock35
// 1024 
// 1025 /*********************************************************************
// 1026  * @fn      zha_project_IdentifyQueryRspCB
// 1027  *
// 1028  * @brief   Callback from the ZCL General Cluster Library when
// 1029  *          it received an Identity Query Response Command for this application.
// 1030  *
// 1031  * @param   srcAddr - requestor's address
// 1032  * @param   timeout - number of seconds to identify yourself (valid for query response)
// 1033  *
// 1034  * @return  none
// 1035  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1036 static void zha_project_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zha_project_IdentifyQueryRspCB:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function zha_project_IdentifyQueryRspCB
        CODE
// 1037 {
        FUNCALL zha_project_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 1038   (void)pRsp;
// 1039 #ifdef ZCL_EZMODE
// 1040   {
// 1041     zclEZMode_ActionData_t data;
// 1042     data.pIdentifyQueryRsp = pRsp;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1043     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x4
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
// 1044   }
// 1045 #endif
// 1046 }
        MOV     A,#0x2
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock36
// 1047 
// 1048 /*********************************************************************
// 1049  * @fn      zha_project_OnOffCB
// 1050  *
// 1051  * @brief   Callback from the ZCL General Cluster Library when
// 1052  *          it received an On/Off Command for this application.
// 1053  *
// 1054  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
// 1055  *
// 1056  * @return  none
// 1057  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1058 static void zha_project_OnOffCB( uint8 cmd )
zha_project_OnOffCB:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function zha_project_OnOffCB
        CODE
// 1059 {
        FUNCALL zha_project_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1060   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
// 1061 
// 1062   zha_project_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_45:
        MOVX    @DPTR,A
// 1063 
// 1064 
// 1065   // Turn on the light
// 1066   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zha_project_OnOffCB_0
// 1067   {
// 1068     zha_project_OnOff = LIGHT_ON;
// 1069   }
// 1070   // Turn off the light
// 1071   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zha_project_OnOffCB_1
// 1072   {
// 1073     zha_project_OnOff = LIGHT_OFF;
// 1074   }
// 1075   // Toggle the light
// 1076   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        MOV     DPTR,#zha_project_OnOff
        JNZ     ??zha_project_OnOffCB_2
// 1077   {
// 1078     if ( zha_project_OnOff == LIGHT_OFF )
        MOVX    A,@DPTR
        JNZ     ??zha_project_OnOffCB_1
// 1079     {
// 1080       zha_project_OnOff = LIGHT_ON;
??zha_project_OnOffCB_0:
        MOV     DPTR,#zha_project_OnOff
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??zha_project_OnOffCB_3
// 1081     }
// 1082     else
// 1083     {
// 1084       zha_project_OnOff = LIGHT_OFF;
??zha_project_OnOffCB_1:
        MOV     DPTR,#zha_project_OnOff
        CLR     A
        MOVX    @DPTR,A
// 1085     }
// 1086   }
// 1087 
// 1088     if ( zha_project_OnOff == LIGHT_ON )
// 1089   {
// 1090     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
// 1091     //sprintf(buf,"+OK=light,%x\r\n",zclZHAtest_OnOff);
// 1092     //HalUARTWrite(HAL_UART_PORT_0,buf,13);
// 1093   }
// 1094   else
// 1095   {
// 1096     HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
??zha_project_OnOffCB_4:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zha_project_OnOffCB_5:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1097     //sprintf(buf,"+OK=LIGHT,%x\r\n",zclZHAtest_OnOff);
// 1098     //HalUARTWrite(HAL_UART_PORT_0,buf,13);
// 1099    }
// 1100   
// 1101 #if ZCL_LEVEL_CTRL
// 1102   //zha_project_DefaultMove( );
// 1103 #endif
// 1104 
// 1105   // update the display
// 1106   //zha_project_LcdDisplayUpdate( );
// 1107 }
        LJMP    ?Subroutine0 & 0xFFFF
??zha_project_OnOffCB_2:
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zha_project_OnOffCB_4
??zha_project_OnOffCB_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zha_project_OnOffCB_5
          CFI EndBlock cfiBlock37
// 1108 
// 1109 
// 1110 /******************************************************************************
// 1111  *
// 1112  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1113  *
// 1114  *****************************************************************************/
// 1115 
// 1116 /*********************************************************************
// 1117  * @fn      zha_project_ProcessIncomingMsg
// 1118  *
// 1119  * @brief   Process ZCL Foundation incoming message
// 1120  *
// 1121  * @param   pInMsg - pointer to the received message
// 1122  *
// 1123  * @return  none
// 1124  */
// 1125 static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1126 {
// 1127   switch ( pInMsg->zclHdr.commandID )
// 1128   {
// 1129 #ifdef ZCL_READ
// 1130     case ZCL_CMD_READ_RSP:
// 1131       zha_project_ProcessInReadRspCmd( pInMsg );
// 1132       break;
// 1133 #endif
// 1134 #ifdef ZCL_WRITE
// 1135     case ZCL_CMD_WRITE_RSP:
// 1136       zha_project_ProcessInWriteRspCmd( pInMsg );
// 1137       break;
// 1138 #endif
// 1139 #ifdef ZCL_REPORT
// 1140     // Attribute Reporting implementation should be added here
// 1141     case ZCL_CMD_CONFIG_REPORT:
// 1142       // zha_project_ProcessInConfigReportCmd( pInMsg );
// 1143       break;
// 1144 
// 1145     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1146       // zha_project_ProcessInConfigReportRspCmd( pInMsg );
// 1147       break;
// 1148 
// 1149     case ZCL_CMD_READ_REPORT_CFG:
// 1150       // zha_project_ProcessInReadReportCfgCmd( pInMsg );
// 1151       break;
// 1152 
// 1153     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1154       // zha_project_ProcessInReadReportCfgRspCmd( pInMsg );
// 1155       break;
// 1156 
// 1157     case ZCL_CMD_REPORT:
// 1158       zha_project_ProcessInReportCmd( pInMsg );
// 1159       break;
// 1160 #endif
// 1161     case ZCL_CMD_DEFAULT_RSP:
// 1162       zha_project_ProcessInDefaultRspCmd( pInMsg );
// 1163       break;
// 1164 #ifdef ZCL_DISCOVER
// 1165     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1166       zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
// 1167       break;
// 1168 
// 1169     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1170       zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
// 1171       break;
// 1172 
// 1173     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1174       zha_project_ProcessInDiscAttrsRspCmd( pInMsg );
// 1175       break;
// 1176 
// 1177     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1178       zha_project_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1179       break;
// 1180 #endif
// 1181     default:
// 1182       break;
// 1183   }
// 1184 
// 1185   if ( pInMsg->attrCmd )
// 1186     osal_mem_free( pInMsg->attrCmd );
// 1187 }
// 1188 
// 1189 #ifdef ZCL_READ
// 1190 /*********************************************************************
// 1191  * @fn      zha_project_ProcessInReadRspCmd
// 1192  *
// 1193  * @brief   Process the "Profile" Read Response Command
// 1194  *
// 1195  * @param   pInMsg - incoming message to process
// 1196  *
// 1197  * @return  none
// 1198  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1199 static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
zha_project_ProcessInReadRspCmd:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
        CODE
// 1200 {
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceSerial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceManuName
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceHW
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceBAT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus3
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 43
        MOV     A,#-0x2b
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
        LCALL   ?Subroutine26 & 0xFFFF
// 1201   zclReadRspCmd_t *readRspCmd;
// 1202     uint8 i,k;
// 1203     uint8 *j;
// 1204     uint16 *p;
// 1205     readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd; 
??CrossCallReturnLabel_57:
        LCALL   ??Subroutine46_0 & 0xFFFF
// 1206     switch(pInMsg->clusterId)
??CrossCallReturnLabel_116:
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_53:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for zha_project_ProcessInReadRspCm_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        768
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1024
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1026
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1029
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1280
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1282
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_10
        CODE
// 1207     {
// 1208 #if ZG_BUILD_COORDINATOR_TYPE      
// 1209       case ZCL_CLUSTER_ID_GEN_BASIC:
// 1210         {
// 1211           for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_0:
        MOV     ?V0,#0x0
        SJMP    ??zha_project_ProcessInReadRspCmd_11
// 1212           {
// 1213                 zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1214                 j=statusRec->data;
// 1215                 switch(statusRec->attrID)
// 1216                 {
// 1217                     case ATTRID_BASIC_POWER_SOURCE:
// 1218                         uint8 zha_project_PowerSource=*j;
// 1219                         break;
// 1220 //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
// 1221 //                        zha_project_BatteryVoltage=*j;
// 1222 //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
// 1223 //                        break;
// 1224                     case ATTRID_BASIC_ZCL_VERSION:
// 1225                         break;
// 1226                     case ATTRID_BASIC_MODEL_ID:
// 1227                         break;
// 1228                     case ATTRID_BASIC_MANUFACTURER_NAME:
// 1229                         SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
// 1230                         break;
// 1231                     case ATTRID_BASIC_HW_VERSION:
// 1232                         uint8 zha_project_HWRevision = *j;
// 1233                         SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zha_project_HWRevision);
// 1234                         break;           
// 1235                     case ATTRID_BASIC_SERIAL_NUMBER:
// 1236                       SetTempDeviceSerial(pInMsg->srcAddr.addr.shortAddr,j);
??zha_project_ProcessInReadRspCmd_12:
        ; Setup parameters for call to function SetTempDeviceSerial
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL   `??SetTempDeviceSerial::?relay`; Banked call to: SetTempDeviceSerial
// 1237                       break;
??zha_project_ProcessInReadRspCmd_13:
        INC     ?V0
??zha_project_ProcessInReadRspCmd_11:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_20:
        JNC     ??zha_project_ProcessInReadRspCmd_14
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for zha_project_ProcessInReadRspCm_1`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_15
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_12
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_13
        CODE
??zha_project_ProcessInReadRspCmd_16:
        ; Setup parameters for call to function SetTempDeviceManuName
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL   `??SetTempDeviceManuName::?relay`; Banked call to: SetTempDeviceManuName
        SJMP    ??zha_project_ProcessInReadRspCmd_13
??zha_project_ProcessInReadRspCmd_15:
        ; Setup parameters for call to function SetTempDeviceHW
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_124:
        LCALL   `??SetTempDeviceHW::?relay`; Banked call to: SetTempDeviceHW
        SJMP    ??zha_project_ProcessInReadRspCmd_13
// 1238                     default:
// 1239                       break;
// 1240                 
// 1241                 }
// 1242 
// 1243           }
// 1244         }
// 1245         osal_set_event( zha_project_TaskID,ZHA_ATTRIBUTE_POWER_EVT);
??zha_project_ProcessInReadRspCmd_14:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        SJMP    ??zha_project_ProcessInReadRspCmd_17
// 1246         
// 1247         break;
// 1248         
// 1249       case ZCL_CLUSTER_ID_GEN_POWER_CFG:
// 1250         {
// 1251           for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_1:
        MOV     ?V0,#0x0
        SJMP    ??zha_project_ProcessInReadRspCmd_18
// 1252           {
// 1253                 zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
??zha_project_ProcessInReadRspCmd_19:
        LCALL   ?Subroutine25 & 0xFFFF
// 1254                 j=statusRec->data;
// 1255                 switch(statusRec->attrID)
??CrossCallReturnLabel_55:
        MOVX    A,@DPTR
        XRL     A,#0x20
        JNZ     ??zha_project_ProcessInReadRspCmd_20
        INC     DPTR
        MOVX    A,@DPTR
??zha_project_ProcessInReadRspCmd_20:
        JNZ     ??zha_project_ProcessInReadRspCmd_21
// 1256                 {
// 1257                     case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
// 1258                         uint8 zha_project_BatteryVoltage=*j;
// 1259                         SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
        ; Setup parameters for call to function SetTempDeviceBAT
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_126:
        LCALL   `??SetTempDeviceBAT::?relay`; Banked call to: SetTempDeviceBAT
// 1260                         break;
// 1261                     default:
// 1262                       break;
// 1263                 
// 1264                 }
// 1265 
// 1266           }
??zha_project_ProcessInReadRspCmd_21:
        INC     ?V0
??zha_project_ProcessInReadRspCmd_18:
        LCALL   ?Subroutine12 & 0xFFFF
// 1267       
// 1268         }        
??CrossCallReturnLabel_21:
        JC      ??zha_project_ProcessInReadRspCmd_19
// 1269         
// 1270         
// 1271         osal_set_event( zha_project_TaskID, ZHA_ACTIVE_EP_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x8
??zha_project_ProcessInReadRspCmd_17:
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1272         break;
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
// 1273       case ZCL_CLUSTER_ID_GEN_ON_OFF:
// 1274         {
// 1275           for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_2:
        MOV     ?V0,#0x0
??zha_project_ProcessInReadRspCmd_22:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_22:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
// 1276           {
// 1277             zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine9 & 0xFFFF
// 1278             j=statusRec->data;
// 1279             switch(statusRec->attrID)
??CrossCallReturnLabel_15:
        JNZ     ??zha_project_ProcessInReadRspCmd_23
// 1280             {
// 1281                 case ATTRID_ON_OFF:
// 1282                     uint16 buf[3];
// 1283                     osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1284                     buf[0] = *j;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ??Subroutine53_0 & 0xFFFF
// 1285                     UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_142:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1286                   break;
// 1287                 default:
// 1288                   break;
// 1289             }
// 1290 
// 1291           }
??zha_project_ProcessInReadRspCmd_23:
        INC     ?V0
        SJMP    ??zha_project_ProcessInReadRspCmd_22
// 1292       
// 1293         }
// 1294         break;
// 1295         case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
// 1296             {
// 1297                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_4:
        MOV     ?V0,#0x0
??zha_project_ProcessInReadRspCmd_24:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_23:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
// 1298                 {
// 1299                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine25 & 0xFFFF
// 1300                     p=(uint16 *)statusRec->data;
??CrossCallReturnLabel_56:
        LCALL   ?Subroutine32 & 0xFFFF
// 1301                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1302                     switch(statusRec->attrID)
??CrossCallReturnLabel_69:
        XRL     A,#0x7
        JNZ     ??zha_project_ProcessInReadRspCmd_25
        INC     DPTR
        MOVX    A,@DPTR
??zha_project_ProcessInReadRspCmd_25:
        JNZ     ??zha_project_ProcessInReadRspCmd_26
// 1303                     {
// 1304                         case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
// 1305                             uint16 buf[3];
// 1306                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1307                             buf[2] = *p;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine52_0 & 0xFFFF
// 1308                             UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_140:
        LCALL   `??UpdateDeviceStatus3::?relay`; Banked call to: UpdateDeviceStatus3
// 1309                         break;
// 1310                         case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
// 1311                             //zha_project_HUE_Status = *p;
// 1312                           break;
// 1313                         case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
// 1314                             //zha_project_Saturation = *p;                        
// 1315                           break;
// 1316                         default:
// 1317                         break;
// 1318 
// 1319                     }
// 1320 
// 1321                 }
??zha_project_ProcessInReadRspCmd_26:
        INC     ?V0
        SJMP    ??zha_project_ProcessInReadRspCmd_24
// 1322 
// 1323              }
// 1324     
// 1325         break;
// 1326         case ZCL_CLUSTER_ID_SS_IAS_ZONE:
// 1327        {        uint16 supportOD = 0;
// 1328                 uint8 sensorType = 0;
// 1329                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_8:
        MOV     ?V0,#0x0
        LJMP    ??zha_project_ProcessInReadRspCmd_27 & 0xFFFF
// 1330                 {
// 1331                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1332                     p=(uint16 *)statusRec->data;
// 1333                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1334                     switch(statusRec->attrID)
// 1335                     {
// 1336                         case ATTRID_SS_IAS_ZONE_STATUS:
// 1337                             uint16 buf[3];
// 1338                             osal_memset(buf,0,sizeof(buf));
// 1339                             buf[0] = *p;
// 1340                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1341                         break;
// 1342                         case ATTRID_SS_IAS_ZONE_TYPE:
// 1343                             zAddrType_t addr;
// 1344                             uint8 address[8];
// 1345                             uint8 pValue[Z_EXTADDR_LEN];
// 1346                             addr.addrMode = Addr64Bit;
??zha_project_ProcessInReadRspCmd_28:
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1347                             osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     ?V4,#0x8
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1348                             //osal_memcpy(pValue,addr.addr.extAddr,8);
// 1349                             osal_memcpy(addr.addr.extAddr,pValue,8);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1350                             //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
// 1351                             APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP102_8
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
// 1352                             ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
// 1353                                                    1,
// 1354                                                    0x0020,
// 1355                                                    &addr,  pInMsg->endPoint,
// 1356                                                     FALSE );
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V1,#0x0
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 64)
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     ?V4,#0x20
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 69)
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 71)
        MOV     R1,#0x1
        MOV     R4,#dstAddr & 0xff
        MOV     R5,#(dstAddr >> 8) & 0xff
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1357                             //zha_project_Smoke_Type = *p;
// 1358                             //uint16 buf[3];
// 1359                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1360                             buf[1] = *p;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
// 1361                             UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP102_8
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
// 1362                             //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zha_project_Smoke_Type,0,false,0);
// 1363                             SetTempDeviceType(pInMsg->srcAddr.addr.shortAddr,*p);
        ; Setup parameters for call to function SetTempDeviceType
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
// 1364                          break;
??zha_project_ProcessInReadRspCmd_29:
        INC     ?V0
??zha_project_ProcessInReadRspCmd_27:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_24:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_ProcessInReadRspCm_2`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_29
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_28
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_30
        CODE
??zha_project_ProcessInReadRspCmd_30:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP102_8
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
        SJMP    ??zha_project_ProcessInReadRspCmd_29
// 1365                       
// 1366                         default:
// 1367                         break;
// 1368 
// 1369                     }
// 1370 
// 1371                 }
// 1372 
// 1373              }
// 1374       
// 1375       break;
// 1376       case ZCL_CLUSTER_ID_SS_IAS_WD:
// 1377             {
// 1378                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_9:
        MOV     ?V0,#0x0
        SJMP    ??zha_project_ProcessInReadRspCmd_31
// 1379                 {
// 1380                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1381                     j=statusRec->data;
// 1382                     switch(statusRec->attrID)
// 1383                     {
// 1384                         case COMMAND_SS_IAS_WD_START_WARNING:
// 1385                             //zha_project_Warning = *j;
// 1386                             uint16 buf[3];
// 1387                             osal_memset(buf,0,sizeof(buf));
// 1388                             //buf[0] = zha_project_Warning;
// 1389                             //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1390                             break;
// 1391                         case COMMAND_SS_IAS_WD_SQUAWK:
// 1392                             //zha_project_WD_SQUAWK = *j;
// 1393                             //uint16 buf[3];
// 1394                             osal_memset(buf,0,sizeof(buf));
??zha_project_ProcessInReadRspCmd_32:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1395                            // buf[1] = zha_project_WD_SQUAWK;
// 1396                             //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
// 1397                             break;
// 1398 
// 1399                         default:
// 1400                             break;
// 1401 
// 1402                     }
??zha_project_ProcessInReadRspCmd_33:
        INC     ?V0
??zha_project_ProcessInReadRspCmd_31:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_82:
        LCALL   ??Subroutine48_0 & 0xFFFF
// 1403 
// 1404                 }
// 1405 
// 1406              }        
??CrossCallReturnLabel_120:
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_ProcessInReadRspCm_3`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_33
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_32
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_32
        CODE
// 1407         
// 1408         break;
// 1409       
// 1410       case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
// 1411        {
// 1412                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_6:
        MOV     ?V0,#0x0
??zha_project_ProcessInReadRspCmd_34:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_26:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
// 1413                 {
// 1414                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine9 & 0xFFFF
// 1415                     p=(uint16 *)statusRec->data;
// 1416                     switch(statusRec->attrID)
??CrossCallReturnLabel_16:
        JNZ     ??zha_project_ProcessInReadRspCmd_35
// 1417                     {
// 1418                         case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
// 1419                             //zha_project_Temperature_Value = *p;
// 1420                             uint16 buf[3];
// 1421                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1422                             buf[0] = *p;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine51_0 & 0xFFFF
// 1423                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_137:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1424                             
// 1425                         break;
// 1426                         default:
// 1427                         break;
// 1428 
// 1429                     }
// 1430 
// 1431                 }
??zha_project_ProcessInReadRspCmd_35:
        INC     ?V0
        SJMP    ??zha_project_ProcessInReadRspCmd_34
// 1432 
// 1433              }
// 1434          break;
// 1435         case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
// 1436            {
// 1437                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_3:
        MOV     ?V0,#0x0
??zha_project_ProcessInReadRspCmd_36:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_27:
        JNC     ??zha_project_ProcessInReadRspCmd_10
// 1438                 {
// 1439                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine9 & 0xFFFF
// 1440                     j=statusRec->data;
// 1441                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1442                     switch(statusRec->attrID)
??CrossCallReturnLabel_17:
        JNZ     ??zha_project_ProcessInReadRspCmd_37
// 1443                     {
// 1444                         case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
// 1445                             uint16 buf[3];
// 1446                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1447                             //zha_project_Level_to_Level = *j;
// 1448                             buf[1] = *j;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LCALL   ??Subroutine53_0 & 0xFFFF
// 1449                             UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
??CrossCallReturnLabel_143:
        LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
// 1450                         break;
// 1451                         default:
// 1452                         break;
// 1453 
// 1454                     }
// 1455 
// 1456                 }
??zha_project_ProcessInReadRspCmd_37:
        INC     ?V0
        SJMP    ??zha_project_ProcessInReadRspCmd_36
// 1457 
// 1458              }
// 1459     
// 1460         break;
// 1461       case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
// 1462            {
// 1463                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_7:
        MOV     ?V0,#0x0
??zha_project_ProcessInReadRspCmd_38:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_28:
        JNC     ??zha_project_ProcessInReadRspCmd_10
// 1464                 {
// 1465                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine9 & 0xFFFF
// 1466                     p=(uint16 *)statusRec->data;
// 1467                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1468                     switch(statusRec->attrID)
??CrossCallReturnLabel_18:
        JNZ     ??zha_project_ProcessInReadRspCmd_39
// 1469                     {
// 1470                         case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
// 1471                             //zha_project_Humidity_Value = *p;
// 1472                             uint16 buf[3];
// 1473                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1474                             buf[0] = *p;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine51_0 & 0xFFFF
// 1475                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_138:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1476                             
// 1477                         break;
// 1478                         default:
// 1479                         break;
// 1480 
// 1481                     }
// 1482 
// 1483                 }
??zha_project_ProcessInReadRspCmd_39:
        INC     ?V0
        SJMP    ??zha_project_ProcessInReadRspCmd_38
// 1484 
// 1485              }     
// 1486         
// 1487         
// 1488         break;   
// 1489       case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
// 1490            {
// 1491                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_5:
        MOV     ?V0,#0x0
        SJMP    ??zha_project_ProcessInReadRspCmd_40
// 1492                 {
// 1493                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
??zha_project_ProcessInReadRspCmd_41:
        LCALL   ?Subroutine9 & 0xFFFF
// 1494                     p=(uint16 *)statusRec->data;
// 1495                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1496                     switch(statusRec->attrID)
??CrossCallReturnLabel_19:
        JNZ     ??zha_project_ProcessInReadRspCmd_42
// 1497                     {
// 1498                         case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
// 1499                             //zha_project_Illumiance_Value = *p;
// 1500                             uint16 buf[3];
// 1501                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1502                             buf[0] = *p;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine51_0 & 0xFFFF
// 1503                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_139:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1504                             
// 1505                         break;
// 1506                         default:
// 1507                         break;
// 1508 
// 1509                     }
// 1510 
// 1511                 }
??zha_project_ProcessInReadRspCmd_42:
        INC     ?V0
??zha_project_ProcessInReadRspCmd_40:
        LCALL   ?Subroutine12 & 0xFFFF
// 1512 
// 1513              }          
// 1514         
// 1515         
// 1516         break;
// 1517       default:
// 1518         break;
// 1519     //ReadRspStatus.attrID = readRspCmd->attrList;
// 1520     // Notify the originator of the results of the original read attributes 
// 1521     // attempt and, for each successfull request, the value of the requested 
// 1522     // attribute
// 1523 #endif
// 1524   }
??CrossCallReturnLabel_29:
        JC      ??zha_project_ProcessInReadRspCmd_41
// 1525 
// 1526   
// 1527   
// 1528   return TRUE; 
??zha_project_ProcessInReadRspCmd_10:
          CFI EndBlock cfiBlock38
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 1529 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 63)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x1
        MOV     A,#0x2b
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_79:
        RET
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_56
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_15
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_16
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-4
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_17
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_18
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_19
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-4
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_118
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-4
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_119
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     R0,DPL
        MOV     R1,DPH
        RET
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_55
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-6
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_56
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-6
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_15
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-6
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_16
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-6
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_17
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-6
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_18
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-6
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_19
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-6
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_118
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-6
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_119
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-6
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        MOV     A,?V0
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zha_project_ProcessInReportCmd
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zha_project_ProcessInReportCmd
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zha_project_ProcessInReportCmd
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zha_project_ProcessInReportCmd
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        MOV     DPL,?V8
        MOV     DPH,?V9
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function zha_project_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zha_project_ProcessInReportCmd
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zha_project_ProcessInReportCmd
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zha_project_ProcessInReportCmd
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zha_project_ProcessInReportCmd
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        LCALL   ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_147:
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
// 1530 #endif // ZCL_READ
// 1531 
// 1532 #ifdef ZCL_WRITE
// 1533 /*********************************************************************
// 1534  * @fn      zha_project_ProcessInWriteRspCmd
// 1535  *
// 1536  * @brief   Process the "Profile" Write Response Command
// 1537  *
// 1538  * @param   pInMsg - incoming message to process
// 1539  *
// 1540  * @return  none
// 1541  */
// 1542 static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1543 {
// 1544   zclWriteRspCmd_t *writeRspCmd;
// 1545   uint8 i;
// 1546 
// 1547   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1548   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1549   {
// 1550     // Notify the device of the results of the its original write attributes
// 1551     // command.
// 1552   }
// 1553 
// 1554   return ( TRUE );
// 1555 }
// 1556 #endif // ZCL_WRITE
// 1557 
// 1558 
// 1559 #ifdef ZCL_REPORT
// 1560 /*********************************************************************
// 1561  * @fn      zha_project_ProcessInReportCmd
// 1562  *
// 1563  * @brief   Process the "Profile" Read Response Command
// 1564  *
// 1565  * @param   pInMsg - incoming message to process
// 1566  *
// 1567  * @return  none
// 1568  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_110
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zha_project_ProcessInReportCmd
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zha_project_ProcessInReportCmd
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond96 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_103
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zha_project_IdentifyCB
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond97) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond97) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond97) CFA_SP SP+-7
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zha_project_ProcessInReportCmd
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zha_project_ProcessInReportCmd
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zha_project_ProcessInReportCmd
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_132:
        RET
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_110
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function zha_project_ProcessInReportCmd
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_111
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-4
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zha_project_ProcessInReportCmd
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_112
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zha_project_event_loop
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_103
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-4
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zha_project_IdentifyCB
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_104
          CFI (cfiCond111) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond111) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond111) CFA_SP SP+-9
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_105
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_106
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_107
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-4
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_108
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_109
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zha_project_ProcessInReportCmd
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_10
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zha_project_ProcessInReportCmd
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_11
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zha_project_ProcessInReportCmd
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_12
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zha_project_ProcessInReportCmd
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_13
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-4
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zha_project_ProcessInReportCmd
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_14
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zha_project_event_loop
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_0
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-6
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zha_project_event_loop
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_1
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-6
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zha_project_event_loop
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_2
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-6
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zha_project_ProcessInReportCmd
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_134
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-6
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zha_project_ProcessInReportCmd
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_135
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-6
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function zha_project_ProcessInReportCmd
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_136
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-6
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_137
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-6
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_138
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-6
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_139
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-6
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zha_project_OnOffCB
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_45
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_46
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond134 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker144 Using cfiCommon1
          CFI (cfiPicker144) NoFunction
          CFI (cfiPicker144) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond145 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond151 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_15
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-4
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_16
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-4
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_17
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-4
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_18
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_19
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker157 Using cfiCommon1
          CFI (cfiPicker157) NoFunction
          CFI (cfiPicker157) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiPicker157

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1569 static uint8 zha_project_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
zha_project_ProcessInReportCmd:
          CFI Block cfiBlock158 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
        CODE
// 1570 {
        FUNCALL zha_project_ProcessInReportCmd, SetTempDeviceHW
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, SetTempDeviceManuName
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, SetTempDeviceBAT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, UpdateDeviceStatus3
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, UpdateDeviceStatus2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, SetTempDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, UpdateDeviceStatus2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReportCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 43
        MOV     A,#-0x2b
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
        LCALL   ?Subroutine26 & 0xFFFF
// 1571     zclReportCmd_t *reportRspCmd;
// 1572     uint8 i,k;
// 1573     uint8 *j;
// 1574     uint16 *p;
// 1575     reportRspCmd = (zclReportCmd_t *)pInMsg->attrCmd; 
??CrossCallReturnLabel_58:
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1576     switch(pInMsg->clusterId)
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_117:
        MOV     R0,#?V2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for zha_project_ProcessInReportCmd_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        768
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1024
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1026
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1029
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1280
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1282
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_10
        CODE
// 1577     {
// 1578 #if ZG_BUILD_COORDINATOR_TYPE      
// 1579       case ZCL_CLUSTER_ID_GEN_BASIC:
// 1580         {
// 1581           for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_0:
        MOV     R6,#0x0
        SJMP    ??zha_project_ProcessInReportCmd_11
// 1582           {
// 1583                 zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
// 1584                 j=statusRec->attrData;
// 1585                 switch(statusRec->attrID)
// 1586                 {
// 1587                     case ATTRID_BASIC_POWER_SOURCE:
// 1588                         uint8 zha_project_PowerSource=*j;
// 1589                         break;
// 1590 //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
// 1591 //                        zha_project_BatteryVoltage=*j;
// 1592 //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
// 1593 //                        break;
// 1594                     case ATTRID_BASIC_ZCL_VERSION:
// 1595                         break;
// 1596                     case ATTRID_BASIC_MODEL_ID:
// 1597                         break;
// 1598                     case ATTRID_BASIC_MANUFACTURER_NAME:
// 1599                         SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
// 1600                         break;
// 1601                     case ATTRID_BASIC_HW_VERSION:
// 1602                         uint8 zha_project_HWRevision = *j;
// 1603                         SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zha_project_HWRevision);
??zha_project_ProcessInReportCmd_12:
        ; Setup parameters for call to function SetTempDeviceHW
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_125:
        LCALL   `??SetTempDeviceHW::?relay`; Banked call to: SetTempDeviceHW
// 1604                         break;                        
??zha_project_ProcessInReportCmd_13:
        INC     R6
??zha_project_ProcessInReportCmd_11:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_30:
        JC      $+5
        LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL   ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_ProcessInReportCmd_1`:
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_13
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_12
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_14
        CODE
??zha_project_ProcessInReportCmd_14:
        ; Setup parameters for call to function SetTempDeviceManuName
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL   `??SetTempDeviceManuName::?relay`; Banked call to: SetTempDeviceManuName
        SJMP    ??zha_project_ProcessInReportCmd_13
// 1605                     default:
// 1606                       break;
// 1607                 
// 1608                 }
// 1609 
// 1610           }
// 1611         }
// 1612         //osal_set_event( zha_project_TaskID,ZHA_ATTRIBUTE_POWER_EVT);
// 1613         
// 1614         break;
// 1615         
// 1616       case ZCL_CLUSTER_ID_GEN_POWER_CFG:
// 1617         {
// 1618           for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_1:
        MOV     R6,#0x0
        SJMP    ??zha_project_ProcessInReportCmd_15
// 1619           {
// 1620                 zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
??zha_project_ProcessInReportCmd_16:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     R0,DPL
        MOV     R1,DPH
// 1621                 j=statusRec->attrData;
// 1622                 switch(statusRec->attrID)
        MOVX    A,@DPTR
        XRL     A,#0x20
        JNZ     ??zha_project_ProcessInReportCmd_17
        INC     DPTR
        MOVX    A,@DPTR
??zha_project_ProcessInReportCmd_17:
        JNZ     ??zha_project_ProcessInReportCmd_18
// 1623                 {
// 1624                     case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
// 1625                         uint8 zha_project_BatteryVoltage=*j;
// 1626                         SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zha_project_BatteryVoltage);
        ; Setup parameters for call to function SetTempDeviceBAT
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_127:
        LCALL   `??SetTempDeviceBAT::?relay`; Banked call to: SetTempDeviceBAT
// 1627                         break;
// 1628                     default:
// 1629                       break;
// 1630                 
// 1631                 }
// 1632 
// 1633           }
??zha_project_ProcessInReportCmd_18:
        INC     R6
??zha_project_ProcessInReportCmd_15:
        LCALL   ?Subroutine13 & 0xFFFF
// 1634       
// 1635         }        
??CrossCallReturnLabel_31:
        JC      ??zha_project_ProcessInReportCmd_16
// 1636         
// 1637         
// 1638         osal_set_event( zha_project_TaskID, ZHA_ACTIVE_EP_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1639         break;
        LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
// 1640       case ZCL_CLUSTER_ID_GEN_ON_OFF:
// 1641         {
// 1642           for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_2:
        MOV     R6,#0x0
??zha_project_ProcessInReportCmd_19:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_32:
        JC      $+5
        LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
// 1643           {
// 1644             zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
        LCALL   ?Subroutine8 & 0xFFFF
// 1645             j=statusRec->attrData;
// 1646             switch(statusRec->attrID)
??CrossCallReturnLabel_10:
        JNZ     ??zha_project_ProcessInReportCmd_20
// 1647             {
// 1648                 case ATTRID_ON_OFF:
// 1649                     uint16 buf[3];
// 1650                     osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1651                     buf[0] = *j;
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   ??Subroutine53_0 & 0xFFFF
// 1652                     UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_144:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1653                   break;
// 1654                 default:
// 1655                   break;
// 1656             }
// 1657 
// 1658           }
??zha_project_ProcessInReportCmd_20:
        INC     R6
        SJMP    ??zha_project_ProcessInReportCmd_19
// 1659       
// 1660         }
// 1661         break;
// 1662         case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
// 1663             {
// 1664                 for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_4:
        MOV     R6,#0x0
??zha_project_ProcessInReportCmd_21:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_33:
        JC      $+5
        LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
// 1665                 {
// 1666                     zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
        LCALL   ?Subroutine14 & 0xFFFF
// 1667                     p=(uint16 *)statusRec->attrData;
// 1668                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1669                     switch(statusRec->attrID)
??CrossCallReturnLabel_114:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zha_project_ProcessInReportCmd_22
        INC     DPTR
        MOVX    A,@DPTR
??zha_project_ProcessInReportCmd_22:
        JNZ     ??zha_project_ProcessInReportCmd_23
// 1670                     {
// 1671                         case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
// 1672                             uint16 buf[3];
// 1673                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1674                             buf[2] = *p;
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine52_0 & 0xFFFF
// 1675                             UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_141:
        LCALL   `??UpdateDeviceStatus3::?relay`; Banked call to: UpdateDeviceStatus3
// 1676                         break;
// 1677                         case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
// 1678                             //zha_project_HUE_Status = *p;
// 1679                           break;
// 1680                         case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
// 1681                             //zha_project_Saturation = *p;                        
// 1682                           break;
// 1683                         default:
// 1684                         break;
// 1685 
// 1686                     }
// 1687 
// 1688                 }
??zha_project_ProcessInReportCmd_23:
        INC     R6
        SJMP    ??zha_project_ProcessInReportCmd_21
// 1689 
// 1690              }
// 1691     
// 1692         break;
// 1693         case ZCL_CLUSTER_ID_SS_IAS_ZONE:
// 1694        {        uint16 supportOD = 0;
// 1695                 uint8 sensorType = 0;
// 1696                 for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_8:
        MOV     R6,#0x0
        LJMP    ??zha_project_ProcessInReportCmd_24 & 0xFFFF
// 1697                 {
// 1698                     zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
// 1699                     p=(uint16 *)statusRec->attrData;
// 1700                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1701                     switch(statusRec->attrID)
// 1702                     {
// 1703                         case ATTRID_SS_IAS_ZONE_STATUS:
// 1704                             uint16 buf[3];
// 1705                             osal_memset(buf,0,sizeof(buf));
// 1706                             buf[0] = *p;
// 1707                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1708                         break;
// 1709                         case ATTRID_SS_IAS_ZONE_TYPE:
// 1710                             zAddrType_t addr;
// 1711                             uint8 address[8];
// 1712                             uint8 pValue[Z_EXTADDR_LEN];
// 1713                             addr.addrMode = Addr64Bit;
??zha_project_ProcessInReportCmd_25:
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1714                             osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     ?V4,#0x8
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1715                             //osal_memcpy(pValue,addr.addr.extAddr,8);
// 1716                             osal_memcpy(addr.addr.extAddr,pValue,8);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1717                             //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
// 1718                             APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP102_8
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_98:
        LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
// 1719                             ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
// 1720                                                    1,
// 1721                                                    0x0020,
// 1722                                                    &addr,  pInMsg->endPoint,
// 1723                                                     FALSE );
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V4,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 64)
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     ?V4,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     ?V4,#0x20
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 69)
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 71)
        MOV     R1,#0x1
        MOV     R4,#dstAddr & 0xff
        MOV     R5,#(dstAddr >> 8) & 0xff
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1724                             //zha_project_Smoke_Type = *p;
// 1725                             //uint16 buf[3];
// 1726                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1727                             buf[1] = *p;
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_111:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
// 1728                             UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP102_8
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
// 1729                             //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zha_project_Smoke_Type,0,false,0);
// 1730                             SetTempDeviceType(pInMsg->srcAddr.addr.shortAddr,*p);
        ; Setup parameters for call to function SetTempDeviceType
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
// 1731                          break;
??zha_project_ProcessInReportCmd_26:
        INC     R6
??zha_project_ProcessInReportCmd_24:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_34:
        JC      $+5
        LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL   ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_ProcessInReportCmd_2`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_26
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_25
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_27
        CODE
??zha_project_ProcessInReportCmd_27:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?XSTACK_DISP102_8
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
        SJMP    ??zha_project_ProcessInReportCmd_26
// 1732                       
// 1733                         default:
// 1734                         break;
// 1735 
// 1736                     }
// 1737 
// 1738                 }
// 1739 
// 1740              }
// 1741       
// 1742       break;
// 1743       case ZCL_CLUSTER_ID_SS_IAS_WD:
// 1744             {
// 1745                 for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_9:
        MOV     R6,#0x0
        SJMP    ??zha_project_ProcessInReportCmd_28
// 1746                 {
// 1747                     zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
// 1748                     j=statusRec->attrData;
// 1749                     switch(statusRec->attrID)
// 1750                     {
// 1751                         case COMMAND_SS_IAS_WD_START_WARNING:
// 1752                             //zha_project_Warning = *j;
// 1753                             uint16 buf[3];
// 1754                             osal_memset(buf,0,sizeof(buf));
// 1755                             //buf[0] = zha_project_Warning;
// 1756                             //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1757                             break;
// 1758                         case COMMAND_SS_IAS_WD_SQUAWK:
// 1759                             //zha_project_WD_SQUAWK = *j;
// 1760                             //uint16 buf[3];
// 1761                             osal_memset(buf,0,sizeof(buf));
??zha_project_ProcessInReportCmd_29:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1762                            // buf[1] = zha_project_WD_SQUAWK;
// 1763                             //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
// 1764                             break;
// 1765 
// 1766                         default:
// 1767                             break;
// 1768 
// 1769                     }
??zha_project_ProcessInReportCmd_30:
        INC     R6
??zha_project_ProcessInReportCmd_28:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_35:
        JC      $+5
        LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ??Subroutine48_0 & 0xFFFF
// 1770 
// 1771                 }
// 1772 
// 1773              }        
??CrossCallReturnLabel_121:
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_ProcessInReportCmd_3`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_30
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_29
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReportCmd_29
        CODE
// 1774         
// 1775         break;
// 1776       
// 1777       case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
// 1778        {
// 1779                 for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_6:
        MOV     R6,#0x0
??zha_project_ProcessInReportCmd_31:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_36:
        JC      $+5
        LJMP    ??zha_project_ProcessInReportCmd_10 & 0xFFFF
// 1780                 {
// 1781                     zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
        LCALL   ?Subroutine8 & 0xFFFF
// 1782                     p=(uint16 *)statusRec->attrData;
// 1783                     switch(statusRec->attrID)
??CrossCallReturnLabel_11:
        JNZ     ??zha_project_ProcessInReportCmd_32
// 1784                     {
// 1785                         case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
// 1786                             //zha_project_Temperature_Value = *p;
// 1787                             uint16 buf[3];
// 1788                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1789                             buf[0] = *p;
        LCALL   ?Subroutine3 & 0xFFFF
// 1790                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_134:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1791                             
// 1792                         break;
// 1793                         default:
// 1794                         break;
// 1795 
// 1796                     }
// 1797 
// 1798                 }
??zha_project_ProcessInReportCmd_32:
        INC     R6
        SJMP    ??zha_project_ProcessInReportCmd_31
// 1799 
// 1800              }
// 1801          break;
// 1802         case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
// 1803            {
// 1804                 for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_3:
        MOV     R6,#0x0
??zha_project_ProcessInReportCmd_33:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_37:
        JNC     ??zha_project_ProcessInReportCmd_10
// 1805                 {
// 1806                     zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
        LCALL   ?Subroutine8 & 0xFFFF
// 1807                     j=statusRec->attrData;
// 1808                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1809                     switch(statusRec->attrID)
??CrossCallReturnLabel_12:
        JNZ     ??zha_project_ProcessInReportCmd_34
// 1810                     {
// 1811                         case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
// 1812                             uint16 buf[3];
// 1813                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1814                             //zha_project_Level_to_Level = *j;
// 1815                             buf[1] = *j;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LCALL   ??Subroutine53_0 & 0xFFFF
// 1816                             UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
??CrossCallReturnLabel_145:
        LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
// 1817                         break;
// 1818                         default:
// 1819                         break;
// 1820 
// 1821                     }
// 1822 
// 1823                 }
??zha_project_ProcessInReportCmd_34:
        INC     R6
        SJMP    ??zha_project_ProcessInReportCmd_33
// 1824 
// 1825              }
// 1826     
// 1827         break;
// 1828       case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
// 1829            {
// 1830                 for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_7:
        MOV     R6,#0x0
??zha_project_ProcessInReportCmd_35:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_38:
        JNC     ??zha_project_ProcessInReportCmd_10
// 1831                 {
// 1832                     zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
        LCALL   ?Subroutine8 & 0xFFFF
// 1833                     p=(uint16 *)statusRec->attrData;
// 1834                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1835                     switch(statusRec->attrID)
??CrossCallReturnLabel_13:
        JNZ     ??zha_project_ProcessInReportCmd_36
// 1836                     {
// 1837                         case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
// 1838                             //zha_project_Humidity_Value = *p;
// 1839                             uint16 buf[3];
// 1840                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1841                             buf[0] = *p;
        LCALL   ?Subroutine3 & 0xFFFF
// 1842                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_135:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1843                             
// 1844                         break;
// 1845                         default:
// 1846                         break;
// 1847 
// 1848                     }
// 1849 
// 1850                 }
??zha_project_ProcessInReportCmd_36:
        INC     R6
        SJMP    ??zha_project_ProcessInReportCmd_35
// 1851 
// 1852              }     
// 1853         
// 1854         
// 1855         break;   
// 1856       case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
// 1857            {
// 1858                 for (i = 0; i < reportRspCmd->numAttr; i++)
??zha_project_ProcessInReportCmd_5:
        MOV     R6,#0x0
        SJMP    ??zha_project_ProcessInReportCmd_37
// 1859                 {
// 1860                     zclReport_t *statusRec = &(reportRspCmd->attrList[i]);
??zha_project_ProcessInReportCmd_38:
        LCALL   ?Subroutine8 & 0xFFFF
// 1861                     p=(uint16 *)statusRec->attrData;
// 1862                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1863                     switch(statusRec->attrID)
??CrossCallReturnLabel_14:
        JNZ     ??zha_project_ProcessInReportCmd_39
// 1864                     {
// 1865                         case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
// 1866                             //zha_project_Illumiance_Value = *p;
// 1867                             uint16 buf[3];
// 1868                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1869                             buf[0] = *p;
        LCALL   ?Subroutine3 & 0xFFFF
// 1870                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_136:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1871                             
// 1872                         break;
// 1873                         default:
// 1874                         break;
// 1875 
// 1876                     }
// 1877 
// 1878                 }
??zha_project_ProcessInReportCmd_39:
        INC     R6
??zha_project_ProcessInReportCmd_37:
        LCALL   ?Subroutine13 & 0xFFFF
// 1879 
// 1880              }          
// 1881         
// 1882         
// 1883         break;
// 1884       default:
// 1885         break;
// 1886     //ReadRspStatus.attrID = readRspCmd->attrList;
// 1887     // Notify the originator of the results of the original read attributes 
// 1888     // attempt and, for each successfull request, the value of the requested 
// 1889     // attribute
// 1890 #endif
// 1891     }
??CrossCallReturnLabel_39:
        JC      ??zha_project_ProcessInReportCmd_38
// 1892 
// 1893   
// 1894   
// 1895   return TRUE; 
??zha_project_ProcessInReportCmd_10:
        LJMP    ?Subroutine2 & 0xFFFF
// 1896 }
          CFI EndBlock cfiBlock158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 64)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zha_project_ProcessInReportCmd
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 64)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOV     A,?V10
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,?V11
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zha_project_ProcessInReportCmd
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_84:
        RET
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zha_project_ProcessInReportCmd
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_60
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zha_project_ProcessInReportCmd
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_113
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-6
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zha_project_ProcessInReportCmd
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_114
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-6
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function zha_project_ProcessInReportCmd
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_115
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-6
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function zha_project_ProcessInReportCmd
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_10
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-6
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function zha_project_ProcessInReportCmd
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_11
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-6
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zha_project_ProcessInReportCmd
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_12
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-6
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function zha_project_ProcessInReportCmd
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_13
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-6
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function zha_project_ProcessInReportCmd
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_14
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-6
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V1
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond176 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zha_project_ProcessInReportCmd
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker178 Using cfiCommon1
          CFI (cfiPicker178) NoFunction
          CFI (cfiPicker178) Picker
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     A,R2
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,?V11
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiPicker178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function zha_project_ProcessInReportCmd
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker181 Using cfiCommon1
          CFI (cfiPicker181) NoFunction
          CFI (cfiPicker181) Picker
        MOV     A,R2
        ADD     A,#0xa
        MOV     ?V8,A
        CLR     A
        ADDC    A,?V11
        MOV     ?V9,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiPicker181

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond182 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function zha_project_ProcessInReportCmd
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker184 Using cfiCommon1
          CFI (cfiPicker184) NoFunction
          CFI (cfiPicker184) Picker
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        RET
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiPicker184

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond185 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function zha_project_ProcessInReportCmd
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker187 Using cfiCommon1
          CFI (cfiPicker187) NoFunction
          CFI (cfiPicker187) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_148:
        RET
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiPicker187

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond188 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function zha_project_event_loop
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_43
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-4
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zha_project_event_loop
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_44
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-4
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_40
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-4
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function zha_project_ProcessInReportCmd
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_41
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-4
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker195 Using cfiCommon1
          CFI (cfiPicker195) NoFunction
          CFI (cfiPicker195) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond196 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_113
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zha_project_ProcessInReportCmd
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function zha_project_ProcessInReportCmd
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker199 Using cfiCommon1
          CFI (cfiPicker199) NoFunction
          CFI (cfiPicker199) Picker
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_81:
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiPicker199
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond200 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function zha_project_ProcessInReportCmd
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function zha_project_ProcessInReportCmd
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function zha_project_ProcessInReportCmd
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker204 Using cfiCommon1
          CFI (cfiPicker204) NoFunction
          CFI (cfiPicker204) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiPicker204
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond205 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function zha_project_ProcessInReportCmd
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zha_project_ProcessInReportCmd
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function zha_project_ProcessInReportCmd
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function zha_project_ProcessInReportCmd
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker210 Using cfiCommon1
          CFI (cfiPicker210) NoFunction
          CFI (cfiPicker210) Picker
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        RET
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiPicker210

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond211 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function zha_project_ProcessInReportCmd
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function zha_project_ProcessInReportCmd
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zha_project_ProcessInReportCmd
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function zha_project_ProcessInReportCmd
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zha_project_ProcessInReportCmd
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function zha_project_ProcessInReportCmd
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function zha_project_ProcessInReportCmd
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function zha_project_ProcessInReportCmd
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function zha_project_ProcessInReportCmd
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker221 Using cfiCommon1
          CFI (cfiPicker221) NoFunction
          CFI (cfiPicker221) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiPicker221

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond222 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_118
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker224 Using cfiCommon1
          CFI (cfiPicker224) NoFunction
          CFI (cfiPicker224) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_78:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiPicker224
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_122
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function zha_project_ProcessInReportCmd
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker229 Using cfiCommon1
          CFI (cfiPicker229) NoFunction
          CFI (cfiPicker229) Picker
        MOV     DPL,R0
        MOV     DPH,R1
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiPicker229
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond230 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_120
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function zha_project_ProcessInReportCmd
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function zha_project_ProcessInReportCmd
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function zha_project_ProcessInReportCmd
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker236 Using cfiCommon1
          CFI (cfiPicker236) NoFunction
          CFI (cfiPicker236) Picker
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiPicker236

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond237 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function zha_project_ProcessInReportCmd
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker239 Using cfiCommon1
          CFI (cfiPicker239) NoFunction
          CFI (cfiPicker239) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_75:
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiPicker239
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond240 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function zha_project_ProcessInReportCmd
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function zha_project_ProcessInReportCmd
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker244 Using cfiCommon1
          CFI (cfiPicker244) NoFunction
          CFI (cfiPicker244) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_149:
        RET
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiPicker244

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond245 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function zha_project_ProcessInReportCmd
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_41
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-4
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_126
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-4
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function zha_project_ProcessInReportCmd
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_127
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond248) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-4
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_124
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond249) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-4
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function zha_project_ProcessInReportCmd
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_125
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond250) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-4
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function zha_project_ProcessInReportCmd
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_134
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-4
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function zha_project_ProcessInReportCmd
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_135
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-4
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function zha_project_ProcessInReportCmd
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_136
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-4
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_137
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-4
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_138
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-4
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond256 Using cfiCommon0
          CFI (cfiCond256) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond256) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_139
          CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond256) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond256) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond256) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond256) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond256) CFA_SP SP+-4
          CFI (cfiCond256) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_140
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond257) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond257) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+-4
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function zha_project_ProcessInReportCmd
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_141
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond258) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond258) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-4
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_142
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond259) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond259) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond259) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond259) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond259) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-4
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_143
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond260) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond260) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-4
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function zha_project_ProcessInReportCmd
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_144
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-4
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function zha_project_ProcessInReportCmd
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_145
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond262) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond262) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond262) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond262) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond262) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-4
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker263 Using cfiCommon1
          CFI (cfiPicker263) NoFunction
          CFI (cfiPicker263) Picker
        MOV     DPL,?V8
        MOV     DPH,?V9
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiPicker263
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond264 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_88
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-4
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_86
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-4
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_101
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-4
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_102
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond268) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-4
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_94
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-4
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_95
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-4
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_96
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond271) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond271) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-4
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function zha_project_ProcessInReportCmd
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_97
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond272) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond272) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond272) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond272) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-4
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function zha_project_ProcessInReportCmd
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_98
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond273) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond273) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-4
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function zha_project_ProcessInReportCmd
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_99
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond274) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond274) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond274) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-4
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function zha_project_ProcessInReportCmd
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_100
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-4
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function zha_project_HandleKeys
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_89
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-4
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_90
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-4
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_91
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-4
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_92
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-4
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_93
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-4
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_40
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond281) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond281) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond281) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond281) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-4
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function zha_project_ProcessInReportCmd
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_41
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-4
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_126
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond283) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond283) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-4
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function zha_project_ProcessInReportCmd
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_127
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond284) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond284) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond284) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond284) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond284) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-4
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_124
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond285) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-4
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function zha_project_ProcessInReportCmd
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_125
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond286) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond286) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond286) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond286) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond286) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond286) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-4
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function zha_project_ProcessInReportCmd
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_134
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond287) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond287) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond287) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond287) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond287) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond287) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-4
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function zha_project_ProcessInReportCmd
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_135
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond288) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond288) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond288) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond288) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-4
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function zha_project_ProcessInReportCmd
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_136
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond289) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond289) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-4
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_137
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond290) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-4
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_138
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond291) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond291) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-4
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_139
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond292) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond292) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-4
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_140
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond293) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond293) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond293) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond293) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond293) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond293) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-4
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function zha_project_ProcessInReportCmd
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_141
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond294) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond294) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond294) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond294) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond294) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond294) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond294) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-4
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_142
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond295) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond295) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond295) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond295) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond295) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-4
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_143
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond296) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond296) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond296) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond296) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-4
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function zha_project_ProcessInReportCmd
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_144
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond297) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond297) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond297) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond297) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond297) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond297) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond297) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-4
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function zha_project_ProcessInReportCmd
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_145
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond298) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond298) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond298) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond298) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-4
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker299 Using cfiCommon1
          CFI (cfiPicker299) NoFunction
          CFI (cfiPicker299) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiPicker299

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond300 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function zha_project_ProcessInReportCmd
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond301) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond301) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond301) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond301) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond301) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond301) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-2
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function zha_project_ProcessInReportCmd
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond302) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond302) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond302) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond302) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond302) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond302) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+-2
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function zha_project_ProcessInReportCmd
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond303) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond303) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond303) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond303) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond303) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+-2
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function zha_project_ProcessInReportCmd
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-2
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker305 Using cfiCommon1
          CFI (cfiPicker305) NoFunction
          CFI (cfiPicker305) Picker
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_80:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_130:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiPicker305

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond306 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_113
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function zha_project_ProcessInReportCmd
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_114
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond307) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond307) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond307) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond307) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond307) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+-4
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function zha_project_ProcessInReportCmd
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_115
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond308) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond308) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond308) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond308) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-4
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function zha_project_ProcessInReportCmd
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_10
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond309) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond309) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond309) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond309) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-4
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function zha_project_ProcessInReportCmd
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_11
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-4
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function zha_project_ProcessInReportCmd
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_12
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond311) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-4
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function zha_project_ProcessInReportCmd
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_13
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond312) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond312) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond312) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond312) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond312) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond312) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond312) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+-4
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function zha_project_ProcessInReportCmd
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_14
          CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond313) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond313) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond313) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond313) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond313) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond313) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond313) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond313) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond313) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond313) CFA_SP SP+-4
          CFI (cfiCond313) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker314 Using cfiCommon1
          CFI (cfiPicker314) NoFunction
          CFI (cfiPicker314) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     R0,DPL
        MOV     R1,DPH
        RET
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiPicker314

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond315 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond316) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond316) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond316) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function zha_project_ProcessInReportCmd
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond317) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond317) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond317) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond317) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond317) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond317) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond317) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond317) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond317) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond317) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond317) CFA_SP SP+-2
          CFI (cfiCond317) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function zha_project_ProcessInReportCmd
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond318) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond318) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond318) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-2
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker319 Using cfiCommon1
          CFI (cfiPicker319) NoFunction
          CFI (cfiPicker319) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function UpdateDeviceStatus2
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus2
        ; Setup parameters for call to function UpdateDeviceStatus1
        MOV     A,#0x6
        RET
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiPicker319

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond320 Using cfiCommon0
          CFI Function zha_project_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_134
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function zha_project_ProcessInReportCmd
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond321) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond321) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond321) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond321) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond321) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-2
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function zha_project_ProcessInReportCmd
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-2
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker323 Using cfiCommon1
          CFI (cfiPicker323) NoFunction
          CFI (cfiPicker323) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiPicker323
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond324 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_137
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond325) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond325) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond325) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond325) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond325) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond325) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-2
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond326) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond326) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond326) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond326) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond326) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond326) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-2
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function zha_project_ProcessInReportCmd
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond327) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond327) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond327) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond327) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-2
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond328 Using cfiCommon0
          CFI (cfiCond328) Function zha_project_ProcessInReportCmd
          CFI (cfiCond328) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond328) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond328) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond328) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond328) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond328) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond328) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond328) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond328) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond328) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond328) CFA_SP SP+-2
          CFI (cfiCond328) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function zha_project_ProcessInReportCmd
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond329) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond329) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-2
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker330 Using cfiCommon1
          CFI (cfiPicker330) NoFunction
          CFI (cfiPicker330) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_129:
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiPicker330
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond331 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_140
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function zha_project_ProcessInReportCmd
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond332) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond332) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond332) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond332) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond332) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond332) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-2
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond333) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond333) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond333) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond333) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond333) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond333) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+-2
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond334) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond334) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond334) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond334) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond334) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond334) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond334) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond334) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond334) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond334) CFA_SP SP+-2
          CFI (cfiCond334) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond335) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond335) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond335) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond335) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond335) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond335) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond335) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond335) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond335) CFA_SP SP+-2
          CFI (cfiCond335) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond336 Using cfiCommon0
          CFI (cfiCond336) Function zha_project_ProcessInReportCmd
          CFI (cfiCond336) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond336) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond336) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond336) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond336) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond336) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond336) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond336) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond336) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond336) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond336) CFA_SP SP+-2
          CFI (cfiCond336) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond337 Using cfiCommon0
          CFI (cfiCond337) Function zha_project_ProcessInReportCmd
          CFI (cfiCond337) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond337) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond337) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond337) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond337) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond337) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond337) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond337) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond337) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond337) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond337) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond337) CFA_SP SP+-2
          CFI (cfiCond337) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function zha_project_ProcessInReportCmd
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond338) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond338) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond338) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond338) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond338) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond338) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-2
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker339 Using cfiCommon1
          CFI (cfiPicker339) NoFunction
          CFI (cfiPicker339) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiCond336
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiPicker339
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond340 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_142
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond341) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond341) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond341) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond341) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond341) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond341) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond341) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond341) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond341) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond341) CFA_SP SP+-2
          CFI (cfiCond341) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function zha_project_ProcessInReportCmd
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond342) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond342) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond342) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond342) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond342) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond342) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond342) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond342) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond342) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond342) CFA_SP SP+-2
          CFI (cfiCond342) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function zha_project_ProcessInReportCmd
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond343) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond343) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond343) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+-2
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond344) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond344) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond344) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond344) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond344) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+-2
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function zha_project_ProcessInReportCmd
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond345) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond345) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond345) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond345) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond345) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond345) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+-2
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond346) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+-2
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond347) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond347) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond347) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond347) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond347) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond347) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond347) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond347) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond347) CFA_SP SP+-2
          CFI (cfiCond347) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond348) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond348) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond348) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond348) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond348) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond348) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+-2
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function zha_project_ProcessInReportCmd
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond349) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond349) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond349) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond349) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-2
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function zha_project_ProcessInReportCmd
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-2
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond351 Using cfiCommon0
          CFI (cfiCond351) Function zha_project_ProcessInReportCmd
          CFI (cfiCond351) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond351) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond351) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond351) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond351) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond351) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond351) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond351) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond351) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond351) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond351) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond351) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond351) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond351) CFA_SP SP+-2
          CFI (cfiCond351) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker352 Using cfiCommon1
          CFI (cfiPicker352) NoFunction
          CFI (cfiPicker352) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus3
        ; Setup parameters for call to function UpdateDeviceStatus3
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus2
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus2
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_150:
        RET
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiCond351
          CFI EndBlock cfiPicker352

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond353 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond354 Using cfiCommon0
          CFI (cfiCond354) Function zha_project_event_loop
          CFI (cfiCond354) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_1
          CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond354) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond354) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond354) CFA_SP SP+-4
          CFI (cfiCond354) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond355 Using cfiCommon0
          CFI (cfiCond355) Function zha_project_event_loop
          CFI (cfiCond355) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_2
          CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond355) CFA_SP SP+-4
          CFI (cfiCond355) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond356 Using cfiCommon0
          CFI (cfiCond356) Function zha_project_ProcessInReportCmd
          CFI (cfiCond356) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_134
          CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond356) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond356) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond356) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond356) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond356) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond356) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond356) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond356) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond356) CFA_SP SP+-4
          CFI (cfiCond356) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond357 Using cfiCommon0
          CFI (cfiCond357) Function zha_project_ProcessInReportCmd
          CFI (cfiCond357) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_135
          CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond357) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond357) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond357) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond357) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond357) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond357) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond357) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond357) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond357) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond357) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond357) CFA_SP SP+-4
          CFI (cfiCond357) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond358 Using cfiCommon0
          CFI (cfiCond358) Function zha_project_ProcessInReportCmd
          CFI (cfiCond358) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_136
          CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond358) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond358) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond358) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond358) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond358) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond358) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond358) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond358) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond358) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond358) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond358) CFA_SP SP+-4
          CFI (cfiCond358) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond359 Using cfiCommon0
          CFI (cfiCond359) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond359) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_137
          CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond359) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond359) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond359) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond359) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond359) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond359) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond359) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond359) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond359) CFA_SP SP+-4
          CFI (cfiCond359) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond360 Using cfiCommon0
          CFI (cfiCond360) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond360) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_138
          CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond360) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond360) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond360) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond360) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond360) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond360) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond360) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond360) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond360) CFA_SP SP+-4
          CFI (cfiCond360) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond361 Using cfiCommon0
          CFI (cfiCond361) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond361) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_139
          CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond361) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond361) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond361) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond361) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond361) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond361) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond361) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond361) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond361) CFA_SP SP+-4
          CFI (cfiCond361) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker362 Using cfiCommon1
          CFI (cfiPicker362) NoFunction
          CFI (cfiPicker362) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond353
          CFI EndBlock cfiCond354
          CFI EndBlock cfiCond355
          CFI EndBlock cfiCond356
          CFI EndBlock cfiCond357
          CFI EndBlock cfiCond358
          CFI EndBlock cfiCond359
          CFI EndBlock cfiCond360
          CFI EndBlock cfiCond361
          CFI EndBlock cfiPicker362
// 1897 #endif
// 1898 /*********************************************************************
// 1899  * @fn      zha_project_ProcessInDefaultRspCmd
// 1900  *
// 1901  * @brief   Process the "Profile" Default Response Command
// 1902  *
// 1903  * @param   pInMsg - incoming message to process
// 1904  *
// 1905  * @return  none
// 1906  */
// 1907 static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1908 {
// 1909   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1910 
// 1911   // Device is notified of the Default Response command.
// 1912   (void)pInMsg;
// 1913 
// 1914   return ( TRUE );
// 1915 }
// 1916 
// 1917 #ifdef ZCL_DISCOVER
// 1918 /*********************************************************************
// 1919  * @fn      zha_project_ProcessInDiscCmdsRspCmd
// 1920  *
// 1921  * @brief   Process the Discover Commands Response Command
// 1922  *
// 1923  * @param   pInMsg - incoming message to process
// 1924  *
// 1925  * @return  none
// 1926  */
// 1927 static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1928 {
// 1929   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1930   uint8 i;
// 1931 
// 1932   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1933   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1934   {
// 1935     // Device is notified of the result of its attribute discovery command.
// 1936   }
// 1937 
// 1938   return ( TRUE );
// 1939 }
// 1940 
// 1941 /*********************************************************************
// 1942  * @fn      zha_project_ProcessInDiscAttrsRspCmd
// 1943  *
// 1944  * @brief   Process the "Profile" Discover Attributes Response Command
// 1945  *
// 1946  * @param   pInMsg - incoming message to process
// 1947  *
// 1948  * @return  none
// 1949  */
// 1950 static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1951 {
// 1952   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1953   uint8 i;
// 1954 
// 1955   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1956   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1957   {
// 1958     // Device is notified of the result of its attribute discovery command.
// 1959   }
// 1960 
// 1961   return ( TRUE );
// 1962 }
// 1963 
// 1964 /*********************************************************************
// 1965  * @fn      zha_project_ProcessInDiscAttrsExtRspCmd
// 1966  *
// 1967  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1968  *
// 1969  * @param   pInMsg - incoming message to process
// 1970  *
// 1971  * @return  none
// 1972  */
// 1973 static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1974 {
// 1975   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1976   uint8 i;
// 1977 
// 1978   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1979   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1980   {
// 1981     // Device is notified of the result of its attribute discovery command.
// 1982   }
// 1983 
// 1984   return ( TRUE );
// 1985 }
// 1986 #endif // ZCL_DISCOVER
// 1987 
// 1988 #if ZCL_EZMODE
// 1989 /*********************************************************************
// 1990  * @fn      zha_project_ProcessZDOMsgs
// 1991  *
// 1992  * @brief   Called when this node receives a ZDO/ZDP response.
// 1993  *
// 1994  * @param   none
// 1995  *
// 1996  * @return  status
// 1997  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1998 static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
zha_project_ProcessZDOMsgs:
          CFI Block cfiBlock363 Using cfiCommon0
          CFI Function zha_project_ProcessZDOMsgs
        CODE
// 1999 {
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, SetTempDeviceSA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, SetTempDeviceEP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseSimpleDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, SetTempDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseMgmtBindRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2000   zclEZMode_ActionData_t data;
// 2001   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 2002 
// 2003   // Let EZ-Mode know of the Simple Descriptor Response
// 2004     ZDO_DeviceAnnce_t devAnnce;
// 2005     zAddrType_t addr;
// 2006     afAddrType_t destAddr;
// 2007     uint8 *pData;
// 2008     uint8 address[8];
// 2009     uint8 i;
// 2010     uint8 pValue[Z_EXTADDR_LEN];
// 2011     uint8 pValue1[Z_EXTADDR_LEN];
// 2012     switch ( pMsg->clusterID )
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for zha_project_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        19
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32772
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32773
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32801
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_6
        CODE
// 2013     {
// 2014         case End_Device_Bind_rsp:
// 2015         {
// 2016             if ( ZDO_ParseBindRsp( pMsg ) == ZSuccess )
??zha_project_ProcessZDOMsgs_4:
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_52:
        MOVX    A,@DPTR
        JNZ     ??zha_project_ProcessZDOMsgs_7
// 2017             {
// 2018 
// 2019             // Light LED
// 2020             //HalUARTWrite(HAL_UART_PORT_0,"Bind established",sizeof("Bind established"));
// 2021                 HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zha_project_ProcessZDOMsgs_8
// 2022             }
// 2023             #if defined( BLINK_LEDS )
// 2024             else
// 2025             {
// 2026             // Flash LED to show failure
// 2027                 HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??zha_project_ProcessZDOMsgs_7:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
??zha_project_ProcessZDOMsgs_8:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 2028             }
// 2029             #endif
// 2030             break;
// 2031         }
// 2032         case Match_Desc_rsp:
// 2033         {
// 2034             ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
??zha_project_ProcessZDOMsgs_3:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 2035             if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 2036             {
// 2037                 if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??zha_project_ProcessZDOMsgs_9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??zha_project_ProcessZDOMsgs_9
// 2038                 {
// 2039                     zha_project_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#zha_project_DstAddr + 8
        LCALL   ?Subroutine7 & 0xFFFF
// 2040                     zha_project_DstAddr.addr.shortAddr = pRsp->nwkAddr;
??CrossCallReturnLabel_151:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ??Subroutine54_0 & 0xFFFF
// 2041                     // Take the first endpoint, Can be changed to search through endpoints
// 2042                     zha_project_DstAddr.endPoint = pRsp->epList[0];
??CrossCallReturnLabel_153:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zha_project_DstAddr + 9
        MOVX    @DPTR,A
// 2043 
// 2044                     // Light LED
// 2045                     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2046                 }
// 2047                 osal_mem_free( pRsp );
??zha_project_ProcessZDOMsgs_9:
        ; Setup parameters for call to function osal_mem_free
        LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
// 2048             }
// 2049             break;
// 2050         }
// 2051         case Device_annce:
// 2052         { 
// 2053             uint8 k=0;
// 2054             ZDO_ParseDeviceAnnce( pMsg, &devAnnce );
??zha_project_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
// 2055             
// 2056 #if ZG_BUILD_COORDINATOR_TYPE            
// 2057             for(i=0;i<5;i++)
        MOV     R6,#0x0
// 2058             {
// 2059 
// 2060                 if(AssociatedDevList[i].shortAddr!=devAnnce.nwkAddr)
??zha_project_ProcessZDOMsgs_11:
        MOV     A,R6
        MOV     B,#0x1c
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#AssociatedDevList & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(AssociatedDevList >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??zha_project_ProcessZDOMsgs_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??zha_project_ProcessZDOMsgs_12:
        JZ      ??zha_project_ProcessZDOMsgs_13
// 2061                 {
// 2062                     SetTempDeviceSA(devAnnce.nwkAddr,devAnnce.extAddr);
        ; Setup parameters for call to function SetTempDeviceSA
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine43_0 & 0xFFFF
// 2063                 }
// 2064             }
??CrossCallReturnLabel_90:
        LCALL   `??SetTempDeviceSA::?relay`; Banked call to: SetTempDeviceSA
??zha_project_ProcessZDOMsgs_13:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x5
        JC      ??zha_project_ProcessZDOMsgs_11
// 2065 #endif
// 2066             // set simple descriptor query event
// 2067             //DelayMS(50);
// 2068             simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#simpleDescReqAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2069             simpleDescReqAddr.addr.shortAddr = devAnnce.nwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV     DPTR,#simpleDescReqAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2070 //            afAddrType_t dstAddr;
// 2071 //            dstAddr.addrMode=afAddr16Bit;
// 2072 //            dstAddr.addr.shortAddr=devAnnce.nwkAddr;
// 2073 //            dstAddr.endPoint=1;
// 2074 //            zcl_SendCommand( 1, &dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, COMMAND_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, FALSE, 0, 0, 0, NULL );
// 2075             //osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT ,50);
// 2076             //osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_POWER_EVT,100);
// 2077             //osal_start_timerEx( zha_project_TaskID, ZHA_ACTIVE_EP_EVT,150);
// 2078             //osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT,200);
// 2079             osal_set_event( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 2080             break;
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 2081         }
// 2082 
// 2083         case Active_EP_rsp:
// 2084         {
// 2085             ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
??zha_project_ProcessZDOMsgs_2:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 2086             *zha_project_ActiveEP = *pRsp;
        MOV     DPTR,#zha_project_ActiveEP
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     DPH,R3
        MOV     DPL,R2
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 2087             osal_memset(ep,0,sizeof(ep));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,A
        MOV     R1,A
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2088             osal_memcpy(ep,pRsp->epList,pRsp->cnt);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
// 2089             simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#simpleDescReqAddr + 8
        LCALL   ?Subroutine7 & 0xFFFF
// 2090             simpleDescReqAddr.addr.shortAddr = pRsp->nwkAddr;
??CrossCallReturnLabel_152:
        MOV     R0,DPL
        MOV     R1,DPH
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     DPTR,#simpleDescReqAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 2091             //HalUARTWrite(HAL_UART_PORT_0,ep,pRsp->cnt);
// 2092             //zha_project_ActiveEP.status = pRsp->status;
// 2093             //zha_project_ActiveEP.nwkAddr= pRsp->nwkAddr;
// 2094             //osal_memcpy(zha_project_ActiveEP.epList,pRsp->epList,sizeof(uint8));
// 2095             //zha_project_ActiveEP.epList[] = pRsp->epList[];
// 2096             //DelayMS(50);
// 2097 #if ZG_BUILD_COORDINATOR_TYPE            
// 2098             SetTempDeviceEP(pRsp->nwkAddr , ep );
        ; Setup parameters for call to function SetTempDeviceEP
        MOV     R4,#ep & 0xff
        MOV     R5,#(ep >> 8) & 0xff
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL   `??SetTempDeviceEP::?relay`; Banked call to: SetTempDeviceEP
// 2099 #endif
// 2100             osal_set_event( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 2101             osal_mem_free( pRsp ); 
        ; Setup parameters for call to function osal_mem_free
??zha_project_ProcessZDOMsgs_10:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LJMP    ??zha_project_ProcessZDOMsgs_14 & 0xFFFF
// 2102             break;
// 2103         }
// 2104         case Simple_Desc_rsp:
// 2105         {
// 2106             uint8 k=0;
// 2107             ZDO_SimpleDescRsp_t *pSimpleDescRsp;   // pointer to received simple desc response
// 2108             pSimpleDescRsp = (ZDO_SimpleDescRsp_t *)osal_mem_alloc( sizeof( ZDO_SimpleDescRsp_t ) );
??zha_project_ProcessZDOMsgs_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2109 
// 2110 
// 2111             if(pSimpleDescRsp)
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 2112             {
// 2113                 pSimpleDescRsp->simpleDesc.pAppInClusterList = NULL;
        MOV     A,R2
        ADD     A,#0xa
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V5,A
        MOV     DPL,?V4
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2114                 pSimpleDescRsp->simpleDesc.pAppOutClusterList = NULL;
        MOV     A,R2
        ADD     A,#0xd
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        MOV     DPL,?V2
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2115 
// 2116                 ZDO_ParseSimpleDescRsp( pMsg, pSimpleDescRsp );
        ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
// 2117 #if ZG_BUILD_COORDINATOR_TYPE
// 2118                 if(pSimpleDescRsp->simpleDesc.AppDeviceId ==0x0402)
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??zha_project_ProcessZDOMsgs_15
        MOV     A,#0x4
        XRL     A,R5
??zha_project_ProcessZDOMsgs_15:
        JNZ     ??zha_project_ProcessZDOMsgs_16
// 2119                 {
// 2120 //                    afAddrType_t  dscReqAddr;
// 2121 //                    dscReqAddr.addrMode=afAddr16Bit;
// 2122 //                    dscReqAddr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
// 2123 //                    dscReqAddr.endPoint=1;
// 2124 //                    zclReadCmd_t BasicAttrsList;
// 2125 //                    BasicAttrsList.numAttr = 1;
// 2126 //                    BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
// 2127 //                    zcl_SendRead( 1, &dscReqAddr,
// 2128 //                    ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
// 2129 //                    ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
// 2130                     osal_start_timerEx( zha_project_TaskID, ZONE_TYPE_EVT,200);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_c8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
// 2131                     osal_set_event( zha_project_TaskID, ZONE_TYPE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??zha_project_ProcessZDOMsgs_17
// 2132                     //DelayMS(100);
// 2133                     //zclSampleCIE_WriteIAS_CIE_Address(&destAddr); 
// 2134                 }
// 2135                 else
// 2136                     SetTempDeviceType(pSimpleDescRsp->nwkAddr,pSimpleDescRsp->simpleDesc.AppDeviceId);
??zha_project_ProcessZDOMsgs_16:
        ; Setup parameters for call to function SetTempDeviceType
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
// 2137 #endif
// 2138                 //osal_mem_free( pSimpleDescRsp );
// 2139                 // free memory for InClusterList
// 2140                 if (pSimpleDescRsp->simpleDesc.pAppInClusterList)
??zha_project_ProcessZDOMsgs_17:
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_86:
        JZ      ??zha_project_ProcessZDOMsgs_18
// 2141                 {
// 2142                     osal_mem_free(pSimpleDescRsp->simpleDesc.pAppInClusterList);
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2143                 }
// 2144 
// 2145                 // free memory for OutClusterList
// 2146                 if (pSimpleDescRsp->simpleDesc.pAppOutClusterList)
??zha_project_ProcessZDOMsgs_18:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_88:
        JZ      ??zha_project_ProcessZDOMsgs_19
// 2147                 {
// 2148                     osal_mem_free(pSimpleDescRsp->simpleDesc.pAppOutClusterList);
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2149                 }
// 2150 
// 2151                 osal_mem_free( pSimpleDescRsp );
??zha_project_ProcessZDOMsgs_19:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        SJMP    ??zha_project_ProcessZDOMsgs_14
// 2152             }
// 2153             break;
// 2154         }
// 2155 
// 2156         case Bind_rsp:
// 2157             ZDO_MgmtBindRsp_t *Bind_pRsp =ZDO_ParseMgmtBindRsp( pMsg ) ;
??zha_project_ProcessZDOMsgs_5:
        ; Setup parameters for call to function ZDO_ParseMgmtBindRsp
        LCALL   `??ZDO_ParseMgmtBindRsp::?relay`; Banked call to: ZDO_ParseMgmtBindRsp
// 2158             afAddrType_t  dscReqAddr;
// 2159             dscReqAddr.addrMode=afAddr16Bit;
// 2160             if ( Bind_pRsp )
// 2161             {
// 2162               //osal_memcpy(dstAddr.addr.extAddr,NWK_command.NWK_General_Frame.NWKCG_TargetAddress,8);
// 2163               //dstAddr.addr.shortAddr=Node_Info.uiNwk_Addr;
// 2164               dscReqAddr.addr.shortAddr=AssociatedDevList[0].shortAddr;
// 2165               dscReqAddr.endPoint=0x01;
// 2166               //zclSampleCIE_WriteIAS_CIE_Address(&dscReqAddr);   
// 2167             }
// 2168             osal_mem_free( Bind_pRsp );
        ; Setup parameters for call to function osal_mem_free
??zha_project_ProcessZDOMsgs_14:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2169             break;
// 2170         default:
// 2171             break;
// 2172     }
// 2173 }
??zha_project_ProcessZDOMsgs_6:
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock363

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond364 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond365 Using cfiCommon0
          CFI (cfiCond365) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond365) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond365) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond365) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond365) CFA_SP SP+-2
          CFI (cfiCond365) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker366 Using cfiCommon1
          CFI (cfiPicker366) NoFunction
          CFI (cfiPicker366) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_76:
        RET
          CFI EndBlock cfiCond364
          CFI EndBlock cfiCond365
          CFI EndBlock cfiPicker366

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond367 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond368 Using cfiCommon0
          CFI (cfiCond368) Function zha_project_ProcessInReportCmd
          CFI (cfiCond368) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_127
          CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond368) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond368) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond368) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond368) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond368) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond368) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond368) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond368) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond368) CFA_SP SP+-4
          CFI (cfiCond368) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond369 Using cfiCommon0
          CFI (cfiCond369) Function zha_project_event_loop
          CFI (cfiCond369) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_51
          CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond369) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond369) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond369) CFA_SP SP+-4
          CFI (cfiCond369) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond370 Using cfiCommon0
          CFI (cfiCond370) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond370) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_52
          CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond370) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond370) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond370) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond370) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond370) CFA_SP SP+-4
          CFI (cfiCond370) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker371 Using cfiCommon1
          CFI (cfiPicker371) NoFunction
          CFI (cfiPicker371) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond367
          CFI EndBlock cfiCond368
          CFI EndBlock cfiCond369
          CFI EndBlock cfiCond370
          CFI EndBlock cfiPicker371

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond372 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond373 Using cfiCommon0
          CFI (cfiCond373) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond373) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond373) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond373) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond373) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond373) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond373) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond373) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond373) CFA_SP SP+-2
          CFI (cfiCond373) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker374 Using cfiCommon1
          CFI (cfiPicker374) NoFunction
          CFI (cfiPicker374) Picker
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond372
          CFI EndBlock cfiCond373
          CFI EndBlock cfiPicker374

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond375 Using cfiCommon0
          CFI Function zha_project_OnOffCB
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond376 Using cfiCommon0
          CFI (cfiCond376) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond376) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond376) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond376) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond376) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond376) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond376) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond376) CFA_SP SP+-2
          CFI (cfiCond376) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker377 Using cfiCommon1
          CFI (cfiPicker377) NoFunction
          CFI (cfiPicker377) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_131:
        MOV     DPTR,#zha_project_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        RET
          CFI EndBlock cfiCond375
          CFI EndBlock cfiCond376
          CFI EndBlock cfiPicker377

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond378 Using cfiCommon0
          CFI Function zha_project_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_151
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond379 Using cfiCommon0
          CFI (cfiCond379) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond379) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond379) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond379) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond379) CFA_SP SP+-2
          CFI (cfiCond379) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker380 Using cfiCommon1
          CFI (cfiPicker380) NoFunction
          CFI (cfiPicker380) Picker
        MOV     A,#0x2
          CFI EndBlock cfiCond378
          CFI EndBlock cfiCond379
          CFI EndBlock cfiPicker380
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond381 Using cfiCommon0
          CFI Function zha_project_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_153
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond382 Using cfiCommon0
          CFI (cfiCond382) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond382) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond382) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond382) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond382) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond382) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond382) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond382) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond382) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond382) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond382) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond382) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond382) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond382) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond382) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond382) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond382) CFA_SP SP+-2
          CFI (cfiCond382) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond383 Using cfiCommon0
          CFI (cfiCond383) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond383) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond383) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond383) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond383) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond383) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond383) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond383) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond383) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond383) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond383) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond383) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond383) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond383) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond383) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond383) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond383) CFA_SP SP+-2
          CFI (cfiCond383) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker384 Using cfiCommon1
          CFI (cfiPicker384) NoFunction
          CFI (cfiPicker384) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
          CFI EndBlock cfiCond381
          CFI EndBlock cfiCond382
          CFI EndBlock cfiCond383
          CFI EndBlock cfiPicker384
// 2174 
// 2175 /*********************************************************************
// 2176  * @fn      zha_project_EZModeCB
// 2177  *
// 2178  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 2179 *           going on during EZ-Mode steering/finding/binding.
// 2180  *
// 2181  * @param   state - an
// 2182  *
// 2183  * @return  none
// 2184  */
// 2185 static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
// 2186 {
// 2187 #ifdef LCD_SUPPORTED
// 2188   char *pStr;
// 2189   uint8 err;
// 2190 #endif
// 2191 
// 2192   // time to go into identify mode
// 2193   if ( state == EZMODE_STATE_IDENTIFYING )
// 2194   {
// 2195 #ifdef LCD_SUPPORTED
// 2196     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 2197 #endif
// 2198 
// 2199     zha_project_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
// 2200     //zha_project_ProcessIdentifyTimeChange();
// 2201   }
// 2202 
// 2203   // autoclosing, show what happened (success, cancelled, etc...)
// 2204   if( state == EZMODE_STATE_AUTOCLOSE )
// 2205   {
// 2206 #ifdef LCD_SUPPORTED
// 2207     pStr = NULL;
// 2208     err = pData->sAutoClose.err;
// 2209     if ( err == EZMODE_ERR_SUCCESS )
// 2210     {
// 2211       pStr = "EZMode: Success";
// 2212     }
// 2213     else if ( err == EZMODE_ERR_NOMATCH )
// 2214     {
// 2215       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 2216     }
// 2217     if ( pStr )
// 2218     {
// 2219       if ( giLightScreenMode == LIGHT_MAINMODE )
// 2220       {
// 2221         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 2222       }
// 2223     }
// 2224 #endif
// 2225   }
// 2226 
// 2227   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 2228   if( state == EZMODE_STATE_FINISH )
// 2229   {
// 2230     // turn off identify mode
// 2231     zha_project_IdentifyTime = 0;
// 2232     //zha_project_ProcessIdentifyTimeChange();
// 2233 
// 2234 #ifdef LCD_SUPPORTED
// 2235     // if successful, inform user which nwkaddr/ep we bound to
// 2236     pStr = NULL;
// 2237     err = pData->sFinish.err;
// 2238     if( err == EZMODE_ERR_SUCCESS )
// 2239     {
// 2240       // already stated on autoclose
// 2241     }
// 2242     else if ( err == EZMODE_ERR_CANCELLED )
// 2243     {
// 2244       pStr = "EZMode: Cancel";
// 2245     }
// 2246     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 2247     {
// 2248       pStr = "EZMode: BadParm";
// 2249     }
// 2250     else if ( err == EZMODE_ERR_TIMEDOUT )
// 2251     {
// 2252       pStr = "EZMode: TimeOut";
// 2253     }
// 2254     if ( pStr )
// 2255     {
// 2256       if ( giLightScreenMode == LIGHT_MAINMODE )
// 2257       {
// 2258         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 2259       }
// 2260     }
// 2261 #endif
// 2262     // show main UI screen 3 seconds after binding
// 2263     //osal_start_timerEx( zha_project_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
// 2264   }
// 2265 }
// 2266 #endif // ZCL_EZMODE
// 2267 
// 2268 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2269 static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
zha_project_LevelControlMoveToLevelCB:
          CFI Block cfiBlock385 Using cfiCommon0
          CFI Function zha_project_LevelControlMoveToLevelCB
        CODE
// 2270 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2271     zha_project_Level_to_Level=pCmd->level;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     DPTR,#zha_project_Level_to_Level
        MOVX    @DPTR,A
// 2272 }
        LJMP    ??Subroutine41_0 & 0xFFFF
          CFI EndBlock cfiBlock385

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 1
        DATA16
        DW zha_project_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zha_project_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zha_project_CmdCallbacks>`:
        DATA16
        DW `??zha_project_BasicResetCB::?relay`
        DW `??zha_project_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zha_project_IdentifyQueryRspCB::?relay`
        DW `??zha_project_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zha_project_LevelControlMoveToLevelCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c8:
        DD 200

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_ProcessInReadRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_ProcessInReadRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_ProcessInReportCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_ProcessInReportCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_LevelControlMoveToLevelCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_LevelControlMoveToLevelCB

        END
// 2273 
// 2274 
// 2275 static ZStatus_t zclZLL_ColorControl_MoveToColorTemperature(zclCCMoveToColorTemperature_t *pCmd)
// 2276 {
// 2277         zha_project_Light_Color_Status = pCmd->colorTemperature;
// 2278 }
// 2279 
// 2280 static void zclSS_ChangeNotification(zclZoneChangeNotif_t *pCmd)
// 2281 {
// 2282         zha_project_Alarm_Status=pCmd->zoneStatus;
// 2283 }
// 2284 
// 2285 
// 2286 /****************************************************************************
// 2287 ****************************************************************************/
// 2288 
// 2289 
// 
// 3 974 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//    47 bytes in segment XDATA_I
//    47 bytes in segment XDATA_ID
//     4 bytes in segment XDATA_ROM_C
//    60 bytes in segment XDATA_Z
// 
// 4 087 bytes of CODE  memory
//     0 bytes of CONST memory (+ 4 bytes shared)
//   107 bytes of XDATA memory
//
//Errors: none
//Warnings: 88
