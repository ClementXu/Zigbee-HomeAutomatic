///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               23/Aug/2016  23:37:11
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
//        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zha_project.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zha_project

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zha_project_BasicResetCB::?relay`,0203H
        FUNCTION `??zha_project_HandleKeys::?relay`,0203H
        FUNCTION `??zha_project_IdentifyCB::?relay`,0203H
        FUNCTION `??zha_project_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zha_project_Init::?relay`
        FUNCTION `??zha_project_Init::?relay`,0203H
        FUNCTION `??zha_project_OnOffCB::?relay`,0203H
        PUBLIC `??zha_project_event_loop::?relay`
        FUNCTION `??zha_project_event_loop::?relay`,0203H
        PUBLIC bindingInClusters
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC zha_projectSeqNum
        FUNCTION zha_project_BasicResetCB,021603H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zha_project_DstAddr
        FUNCTION zha_project_HandleKeys,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        FUNCTION zha_project_IdentifyCB,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zha_project_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zha_project_Init
        FUNCTION zha_project_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zha_project_NwkState
        FUNCTION zha_project_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zha_project_TaskID
        PUBLIC zha_project_event_loop
        FUNCTION zha_project_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 28>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 28>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zha_project_Init    SYMBOL "zha_project_Init"
`??zha_project_Init::?relay` SYMBOL "?relay", zha_project_Init
zha_project_event_loop SYMBOL "zha_project_event_loop"
`??zha_project_event_loop::?relay` SYMBOL "?relay", zha_project_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zha_project_Attrs
        EXTERN zha_project_IdentifyTime
        EXTERN zha_project_NumAttributes
        EXTERN zha_project_OnOff
        EXTERN zha_project_SimpleDesc

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
//    1 /**************************************************************************************************
//    2   Filename:       zha_project.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "zcl.h"
//   77 #include "zcl_general.h"
//   78 #include "zcl_ha.h"
//   79 #include "zcl_ezmode.h"
//   80 #include "zcl_diagnostic.h"
//   81 
//   82 #include "zha_project.h"
//   83 
//   84 #include "onboard.h"
//   85 
//   86 /* HAL */
//   87 #include "hal_lcd.h"
//   88 #include "hal_led.h"
//   89 #include "hal_key.h"
//   90 
//   91 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   92       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   93 #include "zgp_translationtable.h"
//   94   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   95     #define ZGP_AUTO_TT
//   96   #endif
//   97 #endif
//   98 
//   99 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  100 #include "math.h"
//  101 #include "hal_timer.h"
//  102 #endif
//  103 
//  104 #include "NLMEDE.h"
//  105 
//  106 /*********************************************************************
//  107  * MACROS
//  108  */
//  109 
//  110 /*********************************************************************
//  111  * CONSTANTS
//  112  */
//  113 #if (defined HAL_BOARD_ZLIGHT)
//  114 #define LEVEL_MAX                 0xFE
//  115 #define LEVEL_MIN                 0x0
//  116 #define GAMMA_VALUE               2
//  117 #define PWM_FULL_DUTY_CYCLE       1000
//  118 #elif (defined HAL_PWM)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       100
//  123 #endif
//  124 
//  125 /*********************************************************************
//  126  * TYPEDEFS
//  127  */
//  128 
//  129 /*********************************************************************
//  130  * GLOBAL VARIABLES
//  131  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 byte zha_project_TaskID;
zha_project_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 zha_projectSeqNum;
zha_projectSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 
//  135 
//  136 /*********************************************************************
//  137  * GLOBAL FUNCTIONS
//  138  */
//  139 
//  140 /*********************************************************************
//  141  * LOCAL VARIABLES
//  142  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 afAddrType_t zha_project_DstAddr;
zha_project_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 #ifdef ZCL_EZMODE
//  146 static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  147 static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  148 
//  149 
//  150 // register EZ-Mode with task information (timeout events, callback, etc...)
//  151 static const zclEZMode_RegisterData_t zha_project_RegisterEZModeData =
//  152 {
//  153   &zha_project_TaskID,
//  154   SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  155   SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  156   &zha_projectSeqNum,
//  157   zha_project_EZModeCB
//  158 };
//  159 
//  160 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  161 uint16 bindingInClusters[] =
bindingInClusters:
        DATA16
        DS 2
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//  162 {
//  163   ZCL_CLUSTER_ID_GEN_ON_OFF
//  164 #ifdef ZCL_LEVEL_CTRL
//  165   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  166 #endif
//  167 };
//  168 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  169 
//  170 #endif  // ZCL_EZMODE
//  171 
//  172 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  173 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  174 {
//  175   SAMPLELIGHT_ENDPOINT,
//  176   &zha_project_TaskID,
//  177   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  178   (afNetworkLatencyReq_t)0            // No Network Latency req
//  179 };
//  180 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  181 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  182 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  183 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  184 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  185 devStates_t zha_project_NwkState = DEV_INIT;
zha_project_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zha_project_NwkState>`
        REQUIRE __INIT_XDATA_I
//  186 
//  187 #if ZCL_LEVEL_CTRL
//  188 uint8 zha_project_WithOnOff;       // set to TRUE if state machine should set light on/off
//  189 uint8 zha_project_NewLevel;        // new level when done moving
//  190 bool  zha_project_NewLevelUp;      // is direction to new level up or down?
//  191 int32 zha_project_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  192 int32 zha_project_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  193 uint8 zha_project_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  194 #endif
//  195 
//  196 /*********************************************************************
//  197  * LOCAL FUNCTIONS
//  198  */
//  199 static void zha_project_HandleKeys( byte shift, byte keys );
//  200 static void zha_project_BasicResetCB( void );
//  201 static void zha_project_IdentifyCB( zclIdentify_t *pCmd );
//  202 static void zha_project_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  203 static void zha_project_OnOffCB( uint8 cmd );
//  204 #ifdef ZCL_LEVEL_CTRL
//  205 static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  206 static void zha_project_LevelControlMoveCB( zclLCMove_t *pCmd );
//  207 static void zha_project_LevelControlStepCB( zclLCStep_t *pCmd );
//  208 static void zha_project_LevelControlStopCB( void );
//  209 static void zha_project_DefaultMove( void );
//  210 static uint32 zha_project_TimeRateHelper( uint8 newLevel );
//  211 static uint16 zha_project_GetTime ( uint8 level, uint16 time );
//  212 static void zha_project_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  213 static void zha_project_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  214 static void zha_project_AdjustLightLevel( void );
//  215 #endif
//  216 
//  217 // app display functions
//  218 static void zha_project_DisplayLight( void );
//  219 
//  220 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  221 void zha_project_UpdateLampLevel( uint8 level );
//  222 #endif
//  223 
//  224 // Functions to process ZCL Foundation incoming Command/Response messages
//  225 static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  226 #ifdef ZCL_READ
//  227 static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  228 #endif
//  229 #ifdef ZCL_WRITE
//  230 static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  231 #endif
//  232 static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  233 #ifdef ZCL_DISCOVER
//  234 static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  235 static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  236 static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  237 #endif
//  238 
//  239 /*********************************************************************
//  240  * STATUS STRINGS
//  241  */
//  242 
//  243 
//  244 /*********************************************************************
//  245  * ZCL General Profile Callback table
//  246  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  247 static zclGeneral_AppCallbacks_t zha_project_CmdCallbacks =
zha_project_CmdCallbacks:
        DATA8
        DS 28
        REQUIRE `?<Initializer for zha_project_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  248 {
//  249   zha_project_BasicResetCB,            // Basic Cluster Reset command
//  250   zha_project_IdentifyCB,              // Identify command
//  251 #ifdef ZCL_EZMODE
//  252   NULL,                                   // Identify EZ-Mode Invoke command
//  253   NULL,                                   // Identify Update Commission State command
//  254 #endif
//  255   NULL,                                   // Identify Trigger Effect command
//  256   zha_project_IdentifyQueryRspCB,      // Identify Query Response command
//  257   zha_project_OnOffCB,                 // On/Off cluster commands
//  258   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  259   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  260   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  261 #ifdef ZCL_LEVEL_CTRL
//  262   zha_project_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  263   zha_project_LevelControlMoveCB,        // Level Control Move command
//  264   zha_project_LevelControlStepCB,        // Level Control Step command
//  265   zha_project_LevelControlStopCB,        // Level Control Stop command
//  266 #endif
//  267 #ifdef ZCL_GROUPS
//  268   NULL,                                   // Group Response commands
//  269 #endif
//  270 #ifdef ZCL_SCENES
//  271   NULL,                                  // Scene Store Request command
//  272   NULL,                                  // Scene Recall Request command
//  273   NULL,                                  // Scene Response command
//  274 #endif
//  275 #ifdef ZCL_ALARMS
//  276   NULL,                                  // Alarm (Response) commands
//  277 #endif
//  278 #ifdef SE_UK_EXT
//  279   NULL,                                  // Get Event Log command
//  280   NULL,                                  // Publish Event Log command
//  281 #endif
//  282   NULL,                                  // RSSI Location command
//  283   NULL                                   // RSSI Location Response command
//  284 };
//  285 
//  286 /*********************************************************************
//  287  * @fn          zha_project_Init
//  288  *
//  289  * @brief       Initialization function for the zclGeneral layer.
//  290  *
//  291  * @param       none
//  292  *
//  293  * @return      none
//  294  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  295 void zha_project_Init( byte task_id )
zha_project_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zha_project_Init
        CODE
//  296 {
        FUNCALL zha_project_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  297   zha_project_TaskID = task_id;
        MOV     DPTR,#zha_project_TaskID
        MOVX    @DPTR,A
//  298 
//  299   // Set destination address to indirect
//  300   zha_project_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zha_project_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  301   zha_project_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  302   zha_project_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zha_project_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  303 
//  304   // This app is part of the Home Automation Profile
//  305   zclHA_Init( &zha_project_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zha_project_SimpleDesc & 0xff
        MOV     R3,#(zha_project_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  306 
//  307   // Register the ZCL General Cluster Library callback functions
//  308   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zha_project_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zha_project_CmdCallbacks & 0xff
        MOV     R3,#(zha_project_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  309 
//  310   // Register the application's attribute list
//  311   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zha_project_NumAttributes, zha_project_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zha_project_Attrs & 0xff
        MOV     R5,#(zha_project_Attrs >> 8) & 0xff
        MOV     DPTR,#zha_project_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  312 
//  313   // Register the Application to receive the unprocessed Foundation command/response messages
//  314   zcl_registerForMsg( zha_project_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  315 
//  316 #ifdef ZCL_DISCOVER
//  317   // Register the application's command list
//  318   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zha_project_Cmds );
//  319 #endif
//  320 
//  321   // Register for all key events - This app will handle all key events
//  322   RegisterForKeys( zha_project_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  323 
//  324   // Register for a test endpoint
//  325   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  326 
//  327 #ifdef ZCL_EZMODE
//  328   // Register EZ-Mode
//  329   zcl_RegisterEZMode( &zha_project_RegisterEZModeData );
//  330 
//  331   // Register with the ZDO to receive Match Descriptor Responses
//  332   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
//  333 #endif
//  334 
//  335 
//  336 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  337   HalTimer1Init( 0 );
//  338   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  339   halTimer1SetChannelDuty( RED_LED, 0 );
//  340   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  341   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  342 
//  343   // find if we are already on a network from NV_RESTORE
//  344   uint8 state;
//  345   NLME_GetRequest( nwkNwkState, 0, &state );
//  346 
//  347   if ( state < NWK_ENDDEVICE )
//  348   {
//  349     // Start EZMode on Start up to avoid button press
//  350     osal_start_timerEx( zha_project_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  351   }
//  352 #if ZCL_LEVEL_CTRL
//  353   zha_project_DefaultMove();
//  354 #endif
//  355 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  356 
//  357 #ifdef ZCL_DIAGNOSTIC
//  358   // Register the application's callback function to read/write attribute data.
//  359   // This is only required when the attribute data format is unknown to ZCL.
//  360   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  361 
//  362   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  363   {
//  364     // Here the user could start the timer to save Diagnostics to NV
//  365   }
//  366 #endif
//  367 
//  368 #ifdef LCD_SUPPORTED
//  369   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  370 #endif  // LCD_SUPPORTED
//  371 
//  372 #ifdef ZGP_AUTO_TT
//  373   zgpTranslationTable_RegisterEP ( &zha_project_SimpleDesc );
//  374 #endif
//  375 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  376 
//  377 /*********************************************************************
//  378  * @fn          zclSample_event_loop
//  379  *
//  380  * @brief       Event Loop Processor for zclGeneral.
//  381  *
//  382  * @param       none
//  383  *
//  384  * @return      none
//  385  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  386 uint16 zha_project_event_loop( uint8 task_id, uint16 events )
zha_project_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zha_project_event_loop
        CODE
//  387 {
        FUNCALL zha_project_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
//  388   afIncomingMSGPacket_t *MSGpkt;
//  389 
//  390   (void)task_id;  // Intentionally unreferenced parameter
//  391 
//  392   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     ??zha_project_event_loop_0
//  393   {
//  394     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zha_project_TaskID )) )
//  395     {
//  396       switch ( MSGpkt->hdr.event )
//  397       {
//  398 #ifdef ZCL_EZMODE
//  399         case ZDO_CB_MSG:
//  400           zha_project_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  401           break;
//  402 #endif
//  403         case ZCL_INCOMING_MSG:
//  404           // Incoming ZCL Foundation command/response messages
//  405           zha_project_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  406           break;
//  407 
//  408         case KEY_CHANGE:
//  409           zha_project_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  410           break;
//  411 
//  412         case ZDO_STATE_CHANGE:
//  413           zha_project_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  414 
//  415           // now on the network
//  416           if ( (zha_project_NwkState == DEV_ZB_COORD) ||
//  417                (zha_project_NwkState == DEV_ROUTER)   ||
//  418                (zha_project_NwkState == DEV_END_DEVICE) )
//  419           {
//  420             giLightScreenMode = LIGHT_MAINMODE;
//  421             //zha_project_LcdDisplayUpdate();
//  422 #ifdef ZCL_EZMODE
//  423             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  424 #endif // ZCL_EZMODE
//  425           }
//  426           break;
//  427 
//  428         default:
//  429           break;
//  430       }
//  431 
//  432       // Release the memory
//  433       osal_msg_deallocate( (uint8 *)MSGpkt );
//  434     }
//  435 
//  436     // return unprocessed events
//  437     return (events ^ SYS_EVENT_MSG);
//  438   }
//  439 
//  440  
//  441   // Discard unknown events
//  442   return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
??zha_project_event_loop_1:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
??zha_project_event_loop_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zha_project_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zha_project_event_loop_3
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zha_project_event_loop_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zha_project_event_loop_4
??zha_project_event_loop_3:
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
??zha_project_event_loop_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zha_project_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
        MOV     A,R6
        ORL     A,R7
        JZ      ??zha_project_event_loop_5
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zha_project_event_loop_6
        ADD     A,#0x74
        JZ      ??zha_project_event_loop_7
        ADD     A,#-0x11
        JZ      ??zha_project_event_loop_2
        SJMP    ??zha_project_event_loop_4
??zha_project_event_loop_6:
        MOV     A,R6
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zha_project_event_loop_8
        ADD     A,#-0x3
        JNZ     ??zha_project_event_loop_9
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zha_project_event_loop_9
        INC     R0
        SJMP    ??CrossCallReturnLabel_0
??zha_project_event_loop_8:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??zha_project_event_loop_10
??zha_project_event_loop_11:
        INC     R0
??zha_project_event_loop_10:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zha_project_event_loop_11
??zha_project_event_loop_9:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zha_project_event_loop_4
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zha_project_event_loop_4
??zha_project_event_loop_7:
        ; Setup parameters for call to function zha_project_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zha_project_HandleKeys::?relay`; Banked call to: zha_project_HandleKeys
        LJMP    ??zha_project_event_loop_4 & 0xFFFF
??zha_project_event_loop_5:
        MOV     R2,?V0
        MOV     A,?V1
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??zha_project_event_loop_1 & 0xFFFF
//  443 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zha_project_event_loop
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
//  444 
//  445 /*********************************************************************
//  446  * @fn      zha_project_HandleKeys
//  447  *
//  448  * @brief   Handles all key events for this device.
//  449  *
//  450  * @param   shift - true if in shift/alt.
//  451  * @param   keys - bit field for key events. Valid entries:
//  452  *                 HAL_KEY_SW_5
//  453  *                 HAL_KEY_SW_4
//  454  *                 HAL_KEY_SW_2
//  455  *                 HAL_KEY_SW_1
//  456  *
//  457  * @return  none
//  458  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  459 static void zha_project_HandleKeys( byte shift, byte keys )
zha_project_HandleKeys:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zha_project_HandleKeys
        CODE
//  460 {
        FUNCALL zha_project_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, zha_project_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  461   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zha_project_HandleKeys_0
//  462   {
//  463     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  464 
//  465     // toggle local light immediately
//  466     zha_project_OnOff = zha_project_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zha_project_OnOff
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_1
        CLR     A
        SJMP    ??zha_project_HandleKeys_2
??zha_project_HandleKeys_1:
        MOV     A,#0x1
??zha_project_HandleKeys_2:
        MOVX    @DPTR,A
//  467 #ifdef ZCL_LEVEL_CTRL
//  468     zha_project_LevelCurrentLevel = zha_project_OnOff ? zha_project_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  469 #endif
//  470   }
//  471 
//  472   if ( keys & HAL_KEY_SW_2 )
??zha_project_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zha_project_HandleKeys_3
//  473   {
//  474 #if (defined HAL_BOARD_ZLIGHT)
//  475 
//  476     zha_project_BasicResetCB();
//  477 
//  478 #else
//  479 
//  480     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  481 
//  482 #ifdef ZCL_EZMODE
//  483     {
//  484       // Invoke EZ-Mode
//  485       zclEZMode_InvokeData_t ezModeData;
//  486 
//  487       // Invoke EZ-Mode
//  488       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  489       if ( (zha_project_NwkState == DEV_ZB_COORD) ||
//  490           (zha_project_NwkState == DEV_ROUTER)   ||
//  491             (zha_project_NwkState == DEV_END_DEVICE) )
//  492       {
//  493         ezModeData.onNetwork = TRUE;      // node is already on the network
//  494       }
//  495       else
//  496       {
//  497         ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  498       }
//  499       ezModeData.initiator = FALSE;          // OnOffLight is a target
//  500       ezModeData.numActiveOutClusters = 0;
//  501       ezModeData.pActiveOutClusterIDs = NULL;
//  502       ezModeData.numActiveInClusters = 0;
//  503       ezModeData.pActiveOutClusterIDs = NULL;
//  504       zcl_InvokeEZMode( &ezModeData );
//  505     }
//  506 
//  507 #else // NOT EZ-Mode
//  508     {
//  509       zAddrType_t dstAddr;
//  510       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  511 
//  512       // Initiate an End Device Bind Request, this bind request will
//  513       // only use a cluster list that is important to binding.
//  514       dstAddr.addrMode = afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  515       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  516       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  517                            SAMPLELIGHT_ENDPOINT,
//  518                            ZCL_HA_PROFILE_ID,
//  519                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  520                            0, NULL,   // No Outgoing clusters to bind
//  521                            TRUE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0,#bindingInClusters & 0xff
        MOV     ?V1,#(bindingInClusters >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0,#0x4
        MOV     ?V1,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R1,#0x8
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  522     }
//  523 #endif // ZCL_EZMODE
//  524 #endif // HAL_BOARD_ZLIGHT
//  525   }
//  526 
//  527   if ( keys & HAL_KEY_SW_3 )
??zha_project_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zha_project_HandleKeys_4
//  528   {
//  529     NLME_SendNetworkStatus( zha_project_DstAddr.addr.shortAddr,
//  530                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPTR,#zha_project_DstAddr
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  531   }
//  532 
//  533   if ( keys & HAL_KEY_SW_4 )
??zha_project_HandleKeys_4:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zha_project_HandleKeys_5
//  534   {
//  535     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  536 
//  537     if ( ( zha_project_NwkState == DEV_ZB_COORD ) ||
//  538           ( zha_project_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zha_project_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zha_project_HandleKeys_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zha_project_HandleKeys_5
//  539     {
//  540       zAddrType_t tmpAddr;
//  541 
//  542       tmpAddr.addrMode = Addr16Bit;
??zha_project_HandleKeys_6:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  543       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  544 
//  545       // toggle permit join
//  546       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_7
        CLR     A
        SJMP    ??zha_project_HandleKeys_8
??zha_project_HandleKeys_7:
        MOV     A,#-0x1
??zha_project_HandleKeys_8:
        MOVX    @DPTR,A
//  547 
//  548       // Trust Center significance is always true
//  549       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  550     }
//  551   }
//  552 
//  553   // Shift F5 does a Basic Reset (factory defaults)
//  554   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zha_project_HandleKeys_5:
        MOV     A,R6
        JZ      ??zha_project_HandleKeys_9
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zha_project_HandleKeys_10
//  555   {
//  556     zha_project_BasicResetCB();
        ; Setup parameters for call to function zha_project_BasicResetCB
        LCALL   `??zha_project_BasicResetCB::?relay`; Banked call to: zha_project_BasicResetCB
        SJMP    ??zha_project_HandleKeys_10
//  557   }
//  558   else if ( keys & HAL_KEY_SW_5 )
??zha_project_HandleKeys_9:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zha_project_HandleKeys_10
//  559   {
//  560     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_11
        CLR     A
        SJMP    ??zha_project_HandleKeys_12
??zha_project_HandleKeys_11:
        MOV     A,#0x1
??zha_project_HandleKeys_12:
        MOVX    @DPTR,A
//  561   }
//  562 
//  563   // update the display, including the light
//  564   //zha_project_LcdDisplayUpdate();
//  565 }
??zha_project_HandleKeys_10:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  566 
//  567 
//  568 /*********************************************************************
//  569  * @fn      zha_project_DisplayLight
//  570  *
//  571  * @brief   Displays current state of light on LED and also on main display if supported.
//  572  *
//  573  * @param   none
//  574  *
//  575  * @return  none
//  576  */
//  577 static void zha_project_DisplayLight( void )
//  578 {
//  579   // set the LED1 based on light (on or off)
//  580   if ( zha_project_OnOff == LIGHT_ON )
//  581   {
//  582     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  583   }
//  584   else
//  585   {
//  586     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  587   }
//  588 
//  589 #ifdef LCD_SUPPORTED
//  590   if (giLightScreenMode == LIGHT_MAINMODE)
//  591   {
//  592 #ifdef ZCL_LEVEL_CTRL
//  593     // display current light level
//  594     if ( ( zha_project_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  595          ( zha_project_OnOff == LIGHT_OFF ) )
//  596     {
//  597       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  598     }
//  599     else if ( ( zha_project_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  600               ( zha_project_LevelCurrentLevel == zha_project_LevelOnLevel ) ||
//  601                ( ( zha_project_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  602                  ( zha_project_LevelCurrentLevel == zha_project_LevelLastLevel ) ) )
//  603     {
//  604       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  605     }
//  606     else    // "    LEVEL ###"
//  607     {
//  608       zclHA_uint8toa( zha_project_LevelCurrentLevel, &sLightLevel[10] );
//  609       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  610     }
//  611 #else
//  612     if ( zha_project_OnOff )
//  613     {
//  614       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  615     }
//  616     else
//  617     {
//  618       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  619     }
//  620 #endif // ZCL_LEVEL_CTRL
//  621   }
//  622 #endif // LCD_SUPPORTED
//  623 }
//  624 
//  625 /*********************************************************************
//  626  * @fn      zha_project_BasicResetCB
//  627  *
//  628  * @brief   Callback from the ZCL General Cluster Library
//  629  *          to set all the Basic Cluster attributes to default values.
//  630  *
//  631  * @param   none
//  632  *
//  633  * @return  none
//  634  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  635 static void zha_project_BasicResetCB( void )
zha_project_BasicResetCB:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zha_project_BasicResetCB
        CODE
//  636 {
        FUNCALL zha_project_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  637   NLME_LeaveReq_t leaveReq;
//  638   // Set every field to 0
//  639   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  640 
//  641   // This will enable the device to rejoin the network after reset.
//  642   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  643 
//  644   // Set the NV startup option to force a "new" join.
//  645   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  646 
//  647   // Leave the network, and reset afterwards
//  648   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zha_project_BasicResetCB_0
//  649   {
//  650     // Couldn't send out leave; prepare to reset anyway
//  651     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  652   }
//  653 }
??zha_project_BasicResetCB_0:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock7
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock8
//  654 
//  655 /*********************************************************************
//  656  * @fn      zha_project_IdentifyCB
//  657  *
//  658  * @brief   Callback from the ZCL General Cluster Library when
//  659  *          it received an Identity Command for this application.
//  660  *
//  661  * @param   srcAddr - source address and endpoint of the response message
//  662  * @param   identifyTime - the number of seconds to identify yourself
//  663  *
//  664  * @return  none
//  665  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  666 static void zha_project_IdentifyCB( zclIdentify_t *pCmd )
zha_project_IdentifyCB:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zha_project_IdentifyCB
        CODE
//  667 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  668   zha_project_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zha_project_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  669 //zha_project_ProcessIdentifyTimeChange();
//  670 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock9
//  671 
//  672 /*********************************************************************
//  673  * @fn      zha_project_IdentifyQueryRspCB
//  674  *
//  675  * @brief   Callback from the ZCL General Cluster Library when
//  676  *          it received an Identity Query Response Command for this application.
//  677  *
//  678  * @param   srcAddr - requestor's address
//  679  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  680  *
//  681  * @return  none
//  682  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  683 static void zha_project_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zha_project_IdentifyQueryRspCB:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zha_project_IdentifyQueryRspCB
        CODE
//  684 {
        ; Saved register size: 0
        ; Auto size: 0
//  685   (void)pRsp;
//  686 #ifdef ZCL_EZMODE
//  687   {
//  688     zclEZMode_ActionData_t data;
//  689     data.pIdentifyQueryRsp = pRsp;
//  690     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
//  691   }
//  692 #endif
//  693 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock10
//  694 
//  695 /*********************************************************************
//  696  * @fn      zha_project_OnOffCB
//  697  *
//  698  * @brief   Callback from the ZCL General Cluster Library when
//  699  *          it received an On/Off Command for this application.
//  700  *
//  701  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  702  *
//  703  * @return  none
//  704  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  705 static void zha_project_OnOffCB( uint8 cmd )
zha_project_OnOffCB:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zha_project_OnOffCB
        CODE
//  706 {
        FUNCALL zha_project_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  707   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  708 
//  709   zha_project_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zha_project_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  710 
//  711 
//  712   // Turn on the light
//  713   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zha_project_OnOffCB_0
//  714   {
//  715     zha_project_OnOff = LIGHT_ON;
//  716   }
//  717   // Turn off the light
//  718   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zha_project_OnOffCB_1
//  719   {
//  720     zha_project_OnOff = LIGHT_OFF;
//  721   }
//  722   // Toggle the light
//  723   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zha_project_OnOffCB_2
//  724   {
//  725     if ( zha_project_OnOff == LIGHT_OFF )
        MOV     DPTR,#zha_project_OnOff
        MOVX    A,@DPTR
        JNZ     ??zha_project_OnOffCB_1
//  726     {
//  727       zha_project_OnOff = LIGHT_ON;
??zha_project_OnOffCB_0:
        MOV     DPTR,#zha_project_OnOff
        MOV     A,#0x1
        SJMP    ??zha_project_OnOffCB_3
//  728     }
//  729     else
//  730     {
//  731       zha_project_OnOff = LIGHT_OFF;
??zha_project_OnOffCB_1:
        MOV     DPTR,#zha_project_OnOff
        CLR     A
??zha_project_OnOffCB_3:
        MOVX    @DPTR,A
//  732     }
//  733   }
//  734 
//  735 #if ZCL_LEVEL_CTRL
//  736   zha_project_DefaultMove( );
//  737 #endif
//  738 
//  739   // update the display
//  740   //zha_project_LcdDisplayUpdate( );
//  741 }
??zha_project_OnOffCB_2:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock11

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bindingInClusters>`:
        DATA16
        DW 6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 8
        DATA16
        DW zha_project_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zha_project_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zha_project_CmdCallbacks>`:
        DATA16
        DW `??zha_project_BasicResetCB::?relay`
        DW `??zha_project_IdentifyCB::?relay`
        DW 0H
        DW `??zha_project_IdentifyQueryRspCB::?relay`
        DW `??zha_project_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_OnOffCB

        END
//  742 
//  743 
//  744 /******************************************************************************
//  745  *
//  746  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  747  *
//  748  *****************************************************************************/
//  749 
//  750 /*********************************************************************
//  751  * @fn      zha_project_ProcessIncomingMsg
//  752  *
//  753  * @brief   Process ZCL Foundation incoming message
//  754  *
//  755  * @param   pInMsg - pointer to the received message
//  756  *
//  757  * @return  none
//  758  */
//  759 static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
//  760 {
//  761   switch ( pInMsg->zclHdr.commandID )
//  762   {
//  763 #ifdef ZCL_READ
//  764     case ZCL_CMD_READ_RSP:
//  765       zha_project_ProcessInReadRspCmd( pInMsg );
//  766       break;
//  767 #endif
//  768 #ifdef ZCL_WRITE
//  769     case ZCL_CMD_WRITE_RSP:
//  770       zha_project_ProcessInWriteRspCmd( pInMsg );
//  771       break;
//  772 #endif
//  773 #ifdef ZCL_REPORT
//  774     // Attribute Reporting implementation should be added here
//  775     case ZCL_CMD_CONFIG_REPORT:
//  776       // zha_project_ProcessInConfigReportCmd( pInMsg );
//  777       break;
//  778 
//  779     case ZCL_CMD_CONFIG_REPORT_RSP:
//  780       // zha_project_ProcessInConfigReportRspCmd( pInMsg );
//  781       break;
//  782 
//  783     case ZCL_CMD_READ_REPORT_CFG:
//  784       // zha_project_ProcessInReadReportCfgCmd( pInMsg );
//  785       break;
//  786 
//  787     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  788       // zha_project_ProcessInReadReportCfgRspCmd( pInMsg );
//  789       break;
//  790 
//  791     case ZCL_CMD_REPORT:
//  792       // zha_project_ProcessInReportCmd( pInMsg );
//  793       break;
//  794 #endif
//  795     case ZCL_CMD_DEFAULT_RSP:
//  796       zha_project_ProcessInDefaultRspCmd( pInMsg );
//  797       break;
//  798 #ifdef ZCL_DISCOVER
//  799     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  800       zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
//  801       break;
//  802 
//  803     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  804       zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
//  805       break;
//  806 
//  807     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  808       zha_project_ProcessInDiscAttrsRspCmd( pInMsg );
//  809       break;
//  810 
//  811     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  812       zha_project_ProcessInDiscAttrsExtRspCmd( pInMsg );
//  813       break;
//  814 #endif
//  815     default:
//  816       break;
//  817   }
//  818 
//  819   if ( pInMsg->attrCmd )
//  820     osal_mem_free( pInMsg->attrCmd );
//  821 }
//  822 
//  823 #ifdef ZCL_READ
//  824 /*********************************************************************
//  825  * @fn      zha_project_ProcessInReadRspCmd
//  826  *
//  827  * @brief   Process the "Profile" Read Response Command
//  828  *
//  829  * @param   pInMsg - incoming message to process
//  830  *
//  831  * @return  none
//  832  */
//  833 static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  834 {
//  835   zclReadRspCmd_t *readRspCmd;
//  836   uint8 i;
//  837 
//  838   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  839   for (i = 0; i < readRspCmd->numAttr; i++)
//  840   {
//  841     // Notify the originator of the results of the original read attributes
//  842     // attempt and, for each successfull request, the value of the requested
//  843     // attribute
//  844   }
//  845 
//  846   return ( TRUE );
//  847 }
//  848 #endif // ZCL_READ
//  849 
//  850 #ifdef ZCL_WRITE
//  851 /*********************************************************************
//  852  * @fn      zha_project_ProcessInWriteRspCmd
//  853  *
//  854  * @brief   Process the "Profile" Write Response Command
//  855  *
//  856  * @param   pInMsg - incoming message to process
//  857  *
//  858  * @return  none
//  859  */
//  860 static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  861 {
//  862   zclWriteRspCmd_t *writeRspCmd;
//  863   uint8 i;
//  864 
//  865   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  866   for ( i = 0; i < writeRspCmd->numAttr; i++ )
//  867   {
//  868     // Notify the device of the results of the its original write attributes
//  869     // command.
//  870   }
//  871 
//  872   return ( TRUE );
//  873 }
//  874 #endif // ZCL_WRITE
//  875 
//  876 /*********************************************************************
//  877  * @fn      zha_project_ProcessInDefaultRspCmd
//  878  *
//  879  * @brief   Process the "Profile" Default Response Command
//  880  *
//  881  * @param   pInMsg - incoming message to process
//  882  *
//  883  * @return  none
//  884  */
//  885 static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  886 {
//  887   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  888 
//  889   // Device is notified of the Default Response command.
//  890   (void)pInMsg;
//  891 
//  892   return ( TRUE );
//  893 }
//  894 
//  895 #ifdef ZCL_DISCOVER
//  896 /*********************************************************************
//  897  * @fn      zha_project_ProcessInDiscCmdsRspCmd
//  898  *
//  899  * @brief   Process the Discover Commands Response Command
//  900  *
//  901  * @param   pInMsg - incoming message to process
//  902  *
//  903  * @return  none
//  904  */
//  905 static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
//  906 {
//  907   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
//  908   uint8 i;
//  909 
//  910   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
//  911   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
//  912   {
//  913     // Device is notified of the result of its attribute discovery command.
//  914   }
//  915 
//  916   return ( TRUE );
//  917 }
//  918 
//  919 /*********************************************************************
//  920  * @fn      zha_project_ProcessInDiscAttrsRspCmd
//  921  *
//  922  * @brief   Process the "Profile" Discover Attributes Response Command
//  923  *
//  924  * @param   pInMsg - incoming message to process
//  925  *
//  926  * @return  none
//  927  */
//  928 static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
//  929 {
//  930   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
//  931   uint8 i;
//  932 
//  933   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
//  934   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  935   {
//  936     // Device is notified of the result of its attribute discovery command.
//  937   }
//  938 
//  939   return ( TRUE );
//  940 }
//  941 
//  942 /*********************************************************************
//  943  * @fn      zha_project_ProcessInDiscAttrsExtRspCmd
//  944  *
//  945  * @brief   Process the "Profile" Discover Attributes Extended Response Command
//  946  *
//  947  * @param   pInMsg - incoming message to process
//  948  *
//  949  * @return  none
//  950  */
//  951 static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
//  952 {
//  953   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
//  954   uint8 i;
//  955 
//  956   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
//  957   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  958   {
//  959     // Device is notified of the result of its attribute discovery command.
//  960   }
//  961 
//  962   return ( TRUE );
//  963 }
//  964 #endif // ZCL_DISCOVER
//  965 
//  966 #if ZCL_EZMODE
//  967 /*********************************************************************
//  968  * @fn      zha_project_ProcessZDOMsgs
//  969  *
//  970  * @brief   Called when this node receives a ZDO/ZDP response.
//  971  *
//  972  * @param   none
//  973  *
//  974  * @return  status
//  975  */
//  976 static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
//  977 {
//  978   zclEZMode_ActionData_t data;
//  979   ZDO_MatchDescRsp_t *pMatchDescRsp;
//  980 
//  981   // Let EZ-Mode know of the Simple Descriptor Response
//  982   if ( pMsg->clusterID == Match_Desc_rsp )
//  983   {
//  984     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
//  985     data.pMatchDescRsp = pMatchDescRsp;
//  986     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
//  987     osal_mem_free( pMatchDescRsp );
//  988   }
//  989 }
//  990 
//  991 /*********************************************************************
//  992  * @fn      zha_project_EZModeCB
//  993  *
//  994  * @brief   The Application is informed of events. This can be used to show on the UI what is
//  995 *           going on during EZ-Mode steering/finding/binding.
//  996  *
//  997  * @param   state - an
//  998  *
//  999  * @return  none
// 1000  */
// 1001 static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
// 1002 {
// 1003 #ifdef LCD_SUPPORTED
// 1004   char *pStr;
// 1005   uint8 err;
// 1006 #endif
// 1007 
// 1008   // time to go into identify mode
// 1009   if ( state == EZMODE_STATE_IDENTIFYING )
// 1010   {
// 1011 #ifdef LCD_SUPPORTED
// 1012     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1013 #endif
// 1014 
// 1015     zha_project_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
// 1016     zha_project_ProcessIdentifyTimeChange();
// 1017   }
// 1018 
// 1019   // autoclosing, show what happened (success, cancelled, etc...)
// 1020   if( state == EZMODE_STATE_AUTOCLOSE )
// 1021   {
// 1022 #ifdef LCD_SUPPORTED
// 1023     pStr = NULL;
// 1024     err = pData->sAutoClose.err;
// 1025     if ( err == EZMODE_ERR_SUCCESS )
// 1026     {
// 1027       pStr = "EZMode: Success";
// 1028     }
// 1029     else if ( err == EZMODE_ERR_NOMATCH )
// 1030     {
// 1031       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1032     }
// 1033     if ( pStr )
// 1034     {
// 1035       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1036       {
// 1037         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1038       }
// 1039     }
// 1040 #endif
// 1041   }
// 1042 
// 1043   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1044   if( state == EZMODE_STATE_FINISH )
// 1045   {
// 1046     // turn off identify mode
// 1047     zha_project_IdentifyTime = 0;
// 1048     zha_project_ProcessIdentifyTimeChange();
// 1049 
// 1050 #ifdef LCD_SUPPORTED
// 1051     // if successful, inform user which nwkaddr/ep we bound to
// 1052     pStr = NULL;
// 1053     err = pData->sFinish.err;
// 1054     if( err == EZMODE_ERR_SUCCESS )
// 1055     {
// 1056       // already stated on autoclose
// 1057     }
// 1058     else if ( err == EZMODE_ERR_CANCELLED )
// 1059     {
// 1060       pStr = "EZMode: Cancel";
// 1061     }
// 1062     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1063     {
// 1064       pStr = "EZMode: BadParm";
// 1065     }
// 1066     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1067     {
// 1068       pStr = "EZMode: TimeOut";
// 1069     }
// 1070     if ( pStr )
// 1071     {
// 1072       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1073       {
// 1074         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1075       }
// 1076     }
// 1077 #endif
// 1078     // show main UI screen 3 seconds after binding
// 1079     //osal_start_timerEx( zha_project_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
// 1080   }
// 1081 }
// 1082 #endif // ZCL_EZMODE
// 1083 
// 1084 /****************************************************************************
// 1085 ****************************************************************************/
// 1086 
// 1087 
// 
// 766 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//  37 bytes in segment XDATA_I
//  37 bytes in segment XDATA_ID
//  16 bytes in segment XDATA_Z
// 
// 845 bytes of CODE  memory
//  53 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
